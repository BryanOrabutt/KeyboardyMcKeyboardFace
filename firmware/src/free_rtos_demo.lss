
free_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027c4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  004027c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a200  2000043c  00402c00  0002043c  2**2
                  ALLOC
  3 .stack        00003004  2000a63c  0040ce00  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      0000003c  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fcb9  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000033d0  00000000  00000000  0003015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 00005054  00000000  00000000  0003352b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000b10  00000000  00000000  00038580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 000009a6  00000000  00000000  00039090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  000149fc  00000000  00000000  00039a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000fd20  00000000  00000000  0004e432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0005ea18  00000000  00000000  0005e152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001a5c  00000000  00000000  000bcb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000059  00000000  00000000  000be5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 d6 00 20 61 08 40 00 5d 08 40 00 5d 08 40 00     @.. a.@.].@.].@.
  400010:	5d 08 40 00 5d 08 40 00 5d 08 40 00 00 00 00 00     ].@.].@.].@.....
	...
  40002c:	91 20 40 00 5d 08 40 00 00 00 00 00 31 21 40 00     . @.].@.....1!@.
  40003c:	75 21 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     u!@.].@.].@.].@.
  40004c:	5d 08 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     ].@.].@.].@.].@.
  40005c:	5d 08 40 00 5d 08 40 00 5d 08 40 00 00 00 00 00     ].@.].@.].@.....
  40006c:	f1 06 40 00 01 07 40 00 11 07 40 00 5d 08 40 00     ..@...@...@.].@.
  40007c:	5d 08 40 00 00 00 00 00 00 00 00 00 5d 08 40 00     ].@.........].@.
  40008c:	5d 08 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     ].@.].@.].@.].@.
  40009c:	5d 08 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     ].@.].@.].@.].@.
  4000ac:	5d 08 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     ].@.].@.].@.].@.
  4000bc:	5d 08 40 00 5d 08 40 00 5d 08 40 00 5d 08 40 00     ].@.].@.].@.].@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004027c4 	.word	0x004027c4

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b03      	ldr	r3, [pc, #12]	; (400100 <frame_dummy+0x10>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4903      	ldr	r1, [pc, #12]	; (400104 <frame_dummy+0x14>)
  4000f8:	4803      	ldr	r0, [pc, #12]	; (400108 <frame_dummy+0x18>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	bd08      	pop	{r3, pc}
  400100:	00000000 	.word	0x00000000
  400104:	20000440 	.word	0x20000440
  400108:	004027c4 	.word	0x004027c4

0040010c <prvQueueSendTask>:
	functions. */
	vParTestInitialise();
}

static void prvQueueSendTask( void *pvParameters )
{
  40010c:	b500      	push	{lr}
  40010e:	b083      	sub	sp, #12
	TickType_t xNextWakeTime;
	const unsigned long ulValueToSend = 100UL;
  400110:	2364      	movs	r3, #100	; 0x64
  400112:	9300      	str	r3, [sp, #0]

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_SEND_PARAMETER );
  400114:	f241 1311 	movw	r3, #4369	; 0x1111
  400118:	4298      	cmp	r0, r3
  40011a:	d008      	beq.n	40012e <prvQueueSendTask+0x22>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  40011c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400120:	f383 8811 	msr	BASEPRI, r3
  400124:	f3bf 8f6f 	isb	sy
  400128:	f3bf 8f4f 	dsb	sy
  40012c:	e7fe      	b.n	40012c <prvQueueSendTask+0x20>

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
  40012e:	f001 fa01 	bl	401534 <xTaskGetTickCount>
  400132:	9001      	str	r0, [sp, #4]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  400134:	f44f 757a 	mov.w	r5, #1000	; 0x3e8

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
  400138:	4c05      	ldr	r4, [pc, #20]	; (400150 <prvQueueSendTask+0x44>)
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  40013a:	4629      	mov	r1, r5
  40013c:	a801      	add	r0, sp, #4
  40013e:	f001 fbad 	bl	40189c <xTaskDelayUntil>
		xQueueSend( xQueue, &ulValueToSend, 0U );
  400142:	2300      	movs	r3, #0
  400144:	461a      	mov	r2, r3
  400146:	4669      	mov	r1, sp
  400148:	6820      	ldr	r0, [r4, #0]
  40014a:	f000 fe4f 	bl	400dec <xQueueGenericSend>
	for( ;; )
  40014e:	e7f4      	b.n	40013a <prvQueueSendTask+0x2e>
  400150:	20000458 	.word	0x20000458

00400154 <prvQueueReceiveTask>:
static void prvQueueReceiveTask( void *pvParameters )
{
	unsigned long ulReceivedValue;

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_RECEIVE_PARAMETER );
  400154:	2822      	cmp	r0, #34	; 0x22
  400156:	d008      	beq.n	40016a <prvQueueReceiveTask+0x16>
  400158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40015c:	f383 8811 	msr	BASEPRI, r3
  400160:	f3bf 8f6f 	isb	sy
  400164:	f3bf 8f4f 	dsb	sy
  400168:	e7fe      	b.n	400168 <prvQueueReceiveTask+0x14>
{
  40016a:	b500      	push	{lr}
  40016c:	b083      	sub	sp, #12
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  40016e:	4d08      	ldr	r5, [pc, #32]	; (400190 <prvQueueReceiveTask+0x3c>)

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == 100UL )
		{
			vParTestToggleLED( 0 );
  400170:	2600      	movs	r6, #0
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  400172:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  400176:	4622      	mov	r2, r4
  400178:	a901      	add	r1, sp, #4
  40017a:	6828      	ldr	r0, [r5, #0]
  40017c:	f000 ff24 	bl	400fc8 <xQueueReceive>
		if( ulReceivedValue == 100UL )
  400180:	9b01      	ldr	r3, [sp, #4]
  400182:	2b64      	cmp	r3, #100	; 0x64
  400184:	d1f7      	bne.n	400176 <prvQueueReceiveTask+0x22>
			vParTestToggleLED( 0 );
  400186:	4630      	mov	r0, r6
  400188:	f000 f861 	bl	40024e <vParTestToggleLED>
			ulReceivedValue = 0U;
  40018c:	9601      	str	r6, [sp, #4]
  40018e:	e7f0      	b.n	400172 <prvQueueReceiveTask+0x1e>
  400190:	20000458 	.word	0x20000458

00400194 <main>:
{
  400194:	b500      	push	{lr}
  400196:	b083      	sub	sp, #12
	sysclk_init();
  400198:	f000 f864 	bl	400264 <sysclk_init>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  40019c:	4a16      	ldr	r2, [pc, #88]	; (4001f8 <main+0x64>)
  40019e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  4001a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  4001a4:	041b      	lsls	r3, r3, #16
  4001a6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
  4001a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  4001ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
  4001b0:	60d3      	str	r3, [r2, #12]
	board_init();
  4001b2:	f000 f87b 	bl	4002ac <board_init>
	vParTestInitialise();
  4001b6:	f000 f83f 	bl	400238 <vParTestInitialise>
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
  4001ba:	2200      	movs	r2, #0
  4001bc:	2104      	movs	r1, #4
  4001be:	2001      	movs	r0, #1
  4001c0:	f000 fdea 	bl	400d98 <xQueueGenericCreate>
  4001c4:	4b0d      	ldr	r3, [pc, #52]	; (4001fc <main+0x68>)
  4001c6:	6018      	str	r0, [r3, #0]
	if( xQueue != NULL )
  4001c8:	b1a8      	cbz	r0, 4001f6 <main+0x62>
		xTaskCreate( prvQueueReceiveTask,					/* The function that implements the task. */
  4001ca:	2400      	movs	r4, #0
  4001cc:	9401      	str	r4, [sp, #4]
  4001ce:	2302      	movs	r3, #2
  4001d0:	9300      	str	r3, [sp, #0]
  4001d2:	2322      	movs	r3, #34	; 0x22
  4001d4:	2282      	movs	r2, #130	; 0x82
  4001d6:	490a      	ldr	r1, [pc, #40]	; (400200 <main+0x6c>)
  4001d8:	480a      	ldr	r0, [pc, #40]	; (400204 <main+0x70>)
  4001da:	f001 f871 	bl	4012c0 <xTaskCreate>
		xTaskCreate( prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, ( void * ) mainQUEUE_SEND_PARAMETER, mainQUEUE_SEND_TASK_PRIORITY, NULL );
  4001de:	9401      	str	r4, [sp, #4]
  4001e0:	2301      	movs	r3, #1
  4001e2:	9300      	str	r3, [sp, #0]
  4001e4:	f241 1311 	movw	r3, #4369	; 0x1111
  4001e8:	2282      	movs	r2, #130	; 0x82
  4001ea:	4907      	ldr	r1, [pc, #28]	; (400208 <main+0x74>)
  4001ec:	4807      	ldr	r0, [pc, #28]	; (40020c <main+0x78>)
  4001ee:	f001 f867 	bl	4012c0 <xTaskCreate>
		vTaskStartScheduler();
  4001f2:	f001 f951 	bl	401498 <vTaskStartScheduler>
	while(1);
  4001f6:	e7fe      	b.n	4001f6 <main+0x62>
  4001f8:	e000ed00 	.word	0xe000ed00
  4001fc:	20000458 	.word	0x20000458
  400200:	00402784 	.word	0x00402784
  400204:	00400155 	.word	0x00400155
  400208:	00402788 	.word	0x00402788
  40020c:	0040010d 	.word	0x0040010d

00400210 <vParTestSetLED>:
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
	if( uxLED < partestNUM_LEDS )
  400210:	b988      	cbnz	r0, 400236 <vParTestSetLED+0x26>
{
  400212:	b508      	push	{r3, lr}
		if( uxLED == partstsINVERTED_LED )
		{
			xValue = !xValue;
		}

		if( xValue != pdFALSE )
  400214:	b939      	cbnz	r1, 400226 <vParTestSetLED+0x16>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
  400216:	f001 ff4d 	bl	4020b4 <vPortEnterCritical>
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
  40021a:	2057      	movs	r0, #87	; 0x57
  40021c:	f000 f92a 	bl	400474 <pio_set_pin_low>
			}
			taskEXIT_CRITICAL();
  400220:	f001 ff6a 	bl	4020f8 <vPortExitCritical>
				gpio_set_pin_high( ulLED[ uxLED ]);
			}
			taskEXIT_CRITICAL();
		}
	}
}
  400224:	bd08      	pop	{r3, pc}
			taskENTER_CRITICAL();
  400226:	f001 ff45 	bl	4020b4 <vPortEnterCritical>
				gpio_set_pin_high( ulLED[ uxLED ]);
  40022a:	2057      	movs	r0, #87	; 0x57
  40022c:	f000 f916 	bl	40045c <pio_set_pin_high>
			taskEXIT_CRITICAL();
  400230:	f001 ff62 	bl	4020f8 <vPortExitCritical>
}
  400234:	e7f6      	b.n	400224 <vParTestSetLED+0x14>
  400236:	4770      	bx	lr

00400238 <vParTestInitialise>:
{
  400238:	b508      	push	{r3, lr}
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
  40023a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40023e:	2057      	movs	r0, #87	; 0x57
  400240:	f000 f934 	bl	4004ac <pio_configure_pin>
		vParTestSetLED( ul, pdFALSE );
  400244:	2100      	movs	r1, #0
  400246:	4608      	mov	r0, r1
  400248:	f7ff ffe2 	bl	400210 <vParTestSetLED>
}
  40024c:	bd08      	pop	{r3, pc}

0040024e <vParTestToggleLED>:
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
	if( uxLED < partestNUM_LEDS )
  40024e:	b100      	cbz	r0, 400252 <vParTestToggleLED+0x4>
  400250:	4770      	bx	lr
{
  400252:	b508      	push	{r3, lr}
	{
		taskENTER_CRITICAL();
  400254:	f001 ff2e 	bl	4020b4 <vPortEnterCritical>
		{
			gpio_toggle_pin( ulLED[ uxLED ] );
  400258:	2057      	movs	r0, #87	; 0x57
  40025a:	f000 f917 	bl	40048c <pio_toggle_pin>
		}
		taskEXIT_CRITICAL();
  40025e:	f001 ff4b 	bl	4020f8 <vPortExitCritical>
	}
}
  400262:	bd08      	pop	{r3, pc}

00400264 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400264:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400266:	480e      	ldr	r0, [pc, #56]	; (4002a0 <sysclk_init+0x3c>)
  400268:	f000 fbd8 	bl	400a1c <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40026c:	213e      	movs	r1, #62	; 0x3e
  40026e:	2000      	movs	r0, #0
  400270:	f000 fa86 	bl	400780 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400274:	f000 faae 	bl	4007d4 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400278:	2800      	cmp	r0, #0
  40027a:	d0fb      	beq.n	400274 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40027c:	f000 fab2 	bl	4007e4 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <sysclk_init+0x40>)
  400282:	4a09      	ldr	r2, [pc, #36]	; (4002a8 <sysclk_init+0x44>)
  400284:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400286:	f000 fab5 	bl	4007f4 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40028a:	2800      	cmp	r0, #0
  40028c:	d0fb      	beq.n	400286 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40028e:	2010      	movs	r0, #16
  400290:	f000 fa46 	bl	400720 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400294:	f000 fb3a 	bl	40090c <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400298:	4801      	ldr	r0, [pc, #4]	; (4002a0 <sysclk_init+0x3c>)
  40029a:	f000 fbbf 	bl	400a1c <system_init_flash>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40029e:	bd08      	pop	{r3, pc}
  4002a0:	07270e00 	.word	0x07270e00
  4002a4:	400e0400 	.word	0x400e0400
  4002a8:	20133f01 	.word	0x20133f01

004002ac <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4002ac:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4002ae:	482c      	ldr	r0, [pc, #176]	; (400360 <board_init+0xb4>)
  4002b0:	f000 fad0 	bl	400854 <wdt_disable>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002b4:	200b      	movs	r0, #11
  4002b6:	f000 faa5 	bl	400804 <pmc_enable_periph_clk>
  4002ba:	200c      	movs	r0, #12
  4002bc:	f000 faa2 	bl	400804 <pmc_enable_periph_clk>
  4002c0:	200d      	movs	r0, #13
  4002c2:	f000 fa9f 	bl	400804 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002c6:	4b27      	ldr	r3, [pc, #156]	; (400364 <board_init+0xb8>)
  4002c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002cc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002ce:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002d4:	4c24      	ldr	r4, [pc, #144]	; (400368 <board_init+0xbc>)
  4002d6:	2504      	movs	r5, #4
  4002d8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002da:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002de:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002e0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002e4:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002e6:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002e8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4002ee:	f022 0204 	bic.w	r2, r2, #4
  4002f2:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4002f6:	f022 0204 	bic.w	r2, r2, #4
  4002fa:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400300:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400302:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40030c:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40030e:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400310:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400314:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400318:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40031a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40031c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400324:	210c      	movs	r1, #12
  400326:	4811      	ldr	r0, [pc, #68]	; (40036c <board_init+0xc0>)
  400328:	f000 f94a 	bl	4005c0 <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40032c:	4e10      	ldr	r6, [pc, #64]	; (400370 <board_init+0xc4>)
  40032e:	4631      	mov	r1, r6
  400330:	2003      	movs	r0, #3
  400332:	f000 f8bb 	bl	4004ac <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400336:	4631      	mov	r1, r6
  400338:	4628      	mov	r0, r5
  40033a:	f000 f8b7 	bl	4004ac <pio_configure_pin>
		base->PIO_PUER = mask;
  40033e:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400340:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400344:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400346:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400348:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40034c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40034e:	f023 0304 	bic.w	r3, r3, #4
  400352:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400354:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400356:	f023 0304 	bic.w	r3, r3, #4
  40035a:	6763      	str	r3, [r4, #116]	; 0x74

#endif



}
  40035c:	bd70      	pop	{r4, r5, r6, pc}
  40035e:	bf00      	nop
  400360:	400e1450 	.word	0x400e1450
  400364:	400e1200 	.word	0x400e1200
  400368:	400e0e00 	.word	0x400e0e00
  40036c:	400e1000 	.word	0x400e1000
  400370:	08000001 	.word	0x08000001

00400374 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400374:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400376:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40037a:	d02e      	beq.n	4003da <pio_set_peripheral+0x66>
  40037c:	d813      	bhi.n	4003a6 <pio_set_peripheral+0x32>
  40037e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400382:	d01d      	beq.n	4003c0 <pio_set_peripheral+0x4c>
  400384:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400388:	d109      	bne.n	40039e <pio_set_peripheral+0x2a>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40038a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40038c:	4313      	orrs	r3, r2
  40038e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400390:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400392:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400394:	400b      	ands	r3, r1
  400396:	ea23 0302 	bic.w	r3, r3, r2
  40039a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40039c:	e000      	b.n	4003a0 <pio_set_peripheral+0x2c>
	switch (ul_type) {
  40039e:	b109      	cbz	r1, 4003a4 <pio_set_peripheral+0x30>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003a0:	6042      	str	r2, [r0, #4]
  4003a2:	e00c      	b.n	4003be <pio_set_peripheral+0x4a>
  4003a4:	4770      	bx	lr
	switch (ul_type) {
  4003a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4003aa:	d020      	beq.n	4003ee <pio_set_peripheral+0x7a>
  4003ac:	d3f8      	bcc.n	4003a0 <pio_set_peripheral+0x2c>
  4003ae:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4003b2:	d004      	beq.n	4003be <pio_set_peripheral+0x4a>
  4003b4:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4003b8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4003bc:	d1f0      	bne.n	4003a0 <pio_set_peripheral+0x2c>
}
  4003be:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4003c4:	400b      	ands	r3, r1
  4003c6:	ea23 0302 	bic.w	r3, r3, r2
  4003ca:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4003d0:	400b      	ands	r3, r1
  4003d2:	ea23 0302 	bic.w	r3, r3, r2
  4003d6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003d8:	e7e2      	b.n	4003a0 <pio_set_peripheral+0x2c>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003da:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4003de:	400b      	ands	r3, r1
  4003e0:	ea23 0302 	bic.w	r3, r3, r2
  4003e4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003e8:	4313      	orrs	r3, r2
  4003ea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003ec:	e7d8      	b.n	4003a0 <pio_set_peripheral+0x2c>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003f0:	4313      	orrs	r3, r2
  4003f2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003f6:	4313      	orrs	r3, r2
  4003f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003fa:	e7d1      	b.n	4003a0 <pio_set_peripheral+0x2c>

004003fc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003fc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4003fe:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400402:	bf14      	ite	ne
  400404:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400406:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400408:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40040c:	bf14      	ite	ne
  40040e:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400410:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400412:	f012 0f02 	tst.w	r2, #2
  400416:	d004      	beq.n	400422 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  400418:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40041c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40041e:	6001      	str	r1, [r0, #0]
}
  400420:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
  400422:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400426:	bf18      	it	ne
  400428:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
  40042c:	e7f6      	b.n	40041c <pio_set_input+0x20>

0040042e <pio_set_output>:
{
  40042e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;
  400430:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400432:	9c01      	ldr	r4, [sp, #4]
  400434:	b144      	cbz	r4, 400448 <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400436:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  400438:	b143      	cbz	r3, 40044c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40043a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40043c:	b142      	cbz	r2, 400450 <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
  40043e:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
  400440:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400442:	6001      	str	r1, [r0, #0]
}
  400444:	bc10      	pop	{r4}
  400446:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  400448:	6601      	str	r1, [r0, #96]	; 0x60
  40044a:	e7f5      	b.n	400438 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40044c:	6541      	str	r1, [r0, #84]	; 0x54
  40044e:	e7f5      	b.n	40043c <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
  400450:	6341      	str	r1, [r0, #52]	; 0x34
  400452:	e7f5      	b.n	400440 <pio_set_output+0x12>

00400454 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400454:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400456:	4770      	bx	lr

00400458 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400458:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40045a:	4770      	bx	lr

0040045c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40045c:	0943      	lsrs	r3, r0, #5
  40045e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400462:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400466:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400468:	f000 001f 	and.w	r0, r0, #31
  40046c:	2201      	movs	r2, #1
  40046e:	4082      	lsls	r2, r0
  400470:	631a      	str	r2, [r3, #48]	; 0x30
}
  400472:	4770      	bx	lr

00400474 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400474:	0943      	lsrs	r3, r0, #5
  400476:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40047a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40047e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400480:	f000 001f 	and.w	r0, r0, #31
  400484:	2201      	movs	r2, #1
  400486:	4082      	lsls	r2, r0
  400488:	635a      	str	r2, [r3, #52]	; 0x34
}
  40048a:	4770      	bx	lr

0040048c <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40048c:	0943      	lsrs	r3, r0, #5
  40048e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400492:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400496:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400498:	6b99      	ldr	r1, [r3, #56]	; 0x38
  40049a:	f000 001f 	and.w	r0, r0, #31
  40049e:	2201      	movs	r2, #1
  4004a0:	4082      	lsls	r2, r0
  4004a2:	4211      	tst	r1, r2
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004a4:	bf14      	ite	ne
  4004a6:	635a      	strne	r2, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4004a8:	631a      	streq	r2, [r3, #48]	; 0x30
}
  4004aa:	4770      	bx	lr

004004ac <pio_configure_pin>:
{
  4004ac:	b570      	push	{r4, r5, r6, lr}
  4004ae:	b082      	sub	sp, #8
  4004b0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004b2:	0944      	lsrs	r4, r0, #5
  4004b4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  4004b8:	f204 7407 	addw	r4, r4, #1799	; 0x707
  4004bc:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4004be:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4004c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004c6:	d054      	beq.n	400572 <pio_configure_pin+0xc6>
  4004c8:	d82d      	bhi.n	400526 <pio_configure_pin+0x7a>
  4004ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004ce:	d03f      	beq.n	400550 <pio_configure_pin+0xa4>
  4004d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004d4:	d110      	bne.n	4004f8 <pio_configure_pin+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4004d6:	f000 001f 	and.w	r0, r0, #31
  4004da:	2601      	movs	r6, #1
  4004dc:	4086      	lsls	r6, r0
  4004de:	4632      	mov	r2, r6
  4004e0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004e4:	4620      	mov	r0, r4
  4004e6:	f7ff ff45 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  4004ea:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004ee:	bf12      	itee	ne
  4004f0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4004f2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4004f4:	2001      	moveq	r0, #1
  4004f6:	e014      	b.n	400522 <pio_configure_pin+0x76>
	switch (ul_flags & PIO_TYPE_Msk) {
  4004f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004fc:	d110      	bne.n	400520 <pio_configure_pin+0x74>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4004fe:	f000 001f 	and.w	r0, r0, #31
  400502:	2601      	movs	r6, #1
  400504:	4086      	lsls	r6, r0
  400506:	4632      	mov	r2, r6
  400508:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40050c:	4620      	mov	r0, r4
  40050e:	f7ff ff31 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400512:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  400516:	bf12      	itee	ne
  400518:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40051a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40051c:	2001      	moveq	r0, #1
  40051e:	e000      	b.n	400522 <pio_configure_pin+0x76>
	switch (ul_flags & PIO_TYPE_Msk) {
  400520:	2000      	movs	r0, #0
}
  400522:	b002      	add	sp, #8
  400524:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_flags & PIO_TYPE_Msk) {
  400526:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
  40052a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  40052e:	d031      	beq.n	400594 <pio_configure_pin+0xe8>
  400530:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400534:	bf18      	it	ne
  400536:	2000      	movne	r0, #0
  400538:	d1f3      	bne.n	400522 <pio_configure_pin+0x76>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40053a:	f000 011f 	and.w	r1, r0, #31
  40053e:	2601      	movs	r6, #1
  400540:	462a      	mov	r2, r5
  400542:	fa06 f101 	lsl.w	r1, r6, r1
  400546:	4620      	mov	r0, r4
  400548:	f7ff ff58 	bl	4003fc <pio_set_input>
	return 1;
  40054c:	4630      	mov	r0, r6
		break;
  40054e:	e7e8      	b.n	400522 <pio_configure_pin+0x76>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400550:	f000 001f 	and.w	r0, r0, #31
  400554:	2601      	movs	r6, #1
  400556:	4086      	lsls	r6, r0
  400558:	4632      	mov	r2, r6
  40055a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40055e:	4620      	mov	r0, r4
  400560:	f7ff ff08 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400564:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  400568:	bf12      	itee	ne
  40056a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40056c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40056e:	2001      	moveq	r0, #1
  400570:	e7d7      	b.n	400522 <pio_configure_pin+0x76>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400572:	f000 001f 	and.w	r0, r0, #31
  400576:	2601      	movs	r6, #1
  400578:	4086      	lsls	r6, r0
  40057a:	4632      	mov	r2, r6
  40057c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400580:	4620      	mov	r0, r4
  400582:	f7ff fef7 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400586:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  40058a:	bf12      	itee	ne
  40058c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40058e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400590:	2001      	moveq	r0, #1
  400592:	e7c6      	b.n	400522 <pio_configure_pin+0x76>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400594:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400598:	f000 011f 	and.w	r1, r0, #31
  40059c:	2601      	movs	r6, #1
  40059e:	ea05 0306 	and.w	r3, r5, r6
  4005a2:	9300      	str	r3, [sp, #0]
  4005a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005ac:	bf14      	ite	ne
  4005ae:	2200      	movne	r2, #0
  4005b0:	2201      	moveq	r2, #1
  4005b2:	fa06 f101 	lsl.w	r1, r6, r1
  4005b6:	4620      	mov	r0, r4
  4005b8:	f7ff ff39 	bl	40042e <pio_set_output>
	return 1;
  4005bc:	4630      	mov	r0, r6
		break;
  4005be:	e7b0      	b.n	400522 <pio_configure_pin+0x76>

004005c0 <pio_configure_pin_group>:
{
  4005c0:	b570      	push	{r4, r5, r6, lr}
  4005c2:	b082      	sub	sp, #8
  4005c4:	4605      	mov	r5, r0
  4005c6:	460e      	mov	r6, r1
  4005c8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4005ca:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4005ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005d2:	d040      	beq.n	400656 <pio_configure_pin_group+0x96>
  4005d4:	d823      	bhi.n	40061e <pio_configure_pin_group+0x5e>
  4005d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005da:	d030      	beq.n	40063e <pio_configure_pin_group+0x7e>
  4005dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005e0:	d10b      	bne.n	4005fa <pio_configure_pin_group+0x3a>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005e2:	460a      	mov	r2, r1
  4005e4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005e8:	f7ff fec4 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  4005ec:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005f0:	bf12      	itee	ne
  4005f2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005f4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4005f6:	2001      	moveq	r0, #1
  4005f8:	e00f      	b.n	40061a <pio_configure_pin_group+0x5a>
	switch (ul_flags & PIO_TYPE_Msk) {
  4005fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005fe:	d10b      	bne.n	400618 <pio_configure_pin_group+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400600:	460a      	mov	r2, r1
  400602:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400606:	f7ff feb5 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  40060a:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  40060e:	bf12      	itee	ne
  400610:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400612:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400614:	2001      	moveq	r0, #1
  400616:	e000      	b.n	40061a <pio_configure_pin_group+0x5a>
	switch (ul_flags & PIO_TYPE_Msk) {
  400618:	2000      	movs	r0, #0
}
  40061a:	b002      	add	sp, #8
  40061c:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_flags & PIO_TYPE_Msk) {
  40061e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  400622:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  400626:	d022      	beq.n	40066e <pio_configure_pin_group+0xae>
  400628:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40062c:	bf18      	it	ne
  40062e:	2000      	movne	r0, #0
  400630:	d1f3      	bne.n	40061a <pio_configure_pin_group+0x5a>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400632:	4622      	mov	r2, r4
  400634:	4628      	mov	r0, r5
  400636:	f7ff fee1 	bl	4003fc <pio_set_input>
	return 1;
  40063a:	2001      	movs	r0, #1
		break;
  40063c:	e7ed      	b.n	40061a <pio_configure_pin_group+0x5a>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40063e:	460a      	mov	r2, r1
  400640:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400644:	f7ff fe96 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400648:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  40064c:	bf12      	itee	ne
  40064e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400650:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400652:	2001      	moveq	r0, #1
  400654:	e7e1      	b.n	40061a <pio_configure_pin_group+0x5a>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400656:	460a      	mov	r2, r1
  400658:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40065c:	f7ff fe8a 	bl	400374 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400660:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  400664:	bf12      	itee	ne
  400666:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400668:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40066a:	2001      	moveq	r0, #1
  40066c:	e7d5      	b.n	40061a <pio_configure_pin_group+0x5a>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40066e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400672:	f004 0301 	and.w	r3, r4, #1
  400676:	9300      	str	r3, [sp, #0]
  400678:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40067c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400680:	bf14      	ite	ne
  400682:	2200      	movne	r2, #0
  400684:	2201      	moveq	r2, #1
  400686:	f7ff fed2 	bl	40042e <pio_set_output>
	return 1;
  40068a:	2001      	movs	r0, #1
		break;
  40068c:	e7c5      	b.n	40061a <pio_configure_pin_group+0x5a>
	...

00400690 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400694:	4607      	mov	r7, r0
  400696:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400698:	f7ff fedc 	bl	400454 <pio_get_interrupt_status>
  40069c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40069e:	4638      	mov	r0, r7
  4006a0:	f7ff feda 	bl	400458 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4006a4:	4005      	ands	r5, r0
  4006a6:	d013      	beq.n	4006d0 <pio_handler_process+0x40>
  4006a8:	4c0e      	ldr	r4, [pc, #56]	; (4006e4 <pio_handler_process+0x54>)
  4006aa:	f104 0970 	add.w	r9, r4, #112	; 0x70
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4006ae:	e003      	b.n	4006b8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006b0:	3410      	adds	r4, #16
  4006b2:	454c      	cmp	r4, r9
  4006b4:	d00c      	beq.n	4006d0 <pio_handler_process+0x40>
		while (status != 0) {
  4006b6:	b15d      	cbz	r5, 4006d0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4006b8:	6820      	ldr	r0, [r4, #0]
  4006ba:	42b0      	cmp	r0, r6
  4006bc:	d1f8      	bne.n	4006b0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006be:	6861      	ldr	r1, [r4, #4]
  4006c0:	4229      	tst	r1, r5
  4006c2:	d0f5      	beq.n	4006b0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006c4:	68e3      	ldr	r3, [r4, #12]
  4006c6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4006c8:	6863      	ldr	r3, [r4, #4]
  4006ca:	ea25 0503 	bic.w	r5, r5, r3
  4006ce:	e7ef      	b.n	4006b0 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4006d0:	4b05      	ldr	r3, [pc, #20]	; (4006e8 <pio_handler_process+0x58>)
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	b123      	cbz	r3, 4006e0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4006d6:	4b05      	ldr	r3, [pc, #20]	; (4006ec <pio_handler_process+0x5c>)
  4006d8:	681b      	ldr	r3, [r3, #0]
  4006da:	b10b      	cbz	r3, 4006e0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4006dc:	4638      	mov	r0, r7
  4006de:	4798      	blx	r3
		}
	}
#endif
}
  4006e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006e4:	20000464 	.word	0x20000464
  4006e8:	2000045c 	.word	0x2000045c
  4006ec:	20000460 	.word	0x20000460

004006f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006f2:	210b      	movs	r1, #11
  4006f4:	4801      	ldr	r0, [pc, #4]	; (4006fc <PIOA_Handler+0xc>)
  4006f6:	f7ff ffcb 	bl	400690 <pio_handler_process>
}
  4006fa:	bd08      	pop	{r3, pc}
  4006fc:	400e0e00 	.word	0x400e0e00

00400700 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400700:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400702:	210c      	movs	r1, #12
  400704:	4801      	ldr	r0, [pc, #4]	; (40070c <PIOB_Handler+0xc>)
  400706:	f7ff ffc3 	bl	400690 <pio_handler_process>
}
  40070a:	bd08      	pop	{r3, pc}
  40070c:	400e1000 	.word	0x400e1000

00400710 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400710:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400712:	210d      	movs	r1, #13
  400714:	4801      	ldr	r0, [pc, #4]	; (40071c <PIOC_Handler+0xc>)
  400716:	f7ff ffbb 	bl	400690 <pio_handler_process>
}
  40071a:	bd08      	pop	{r3, pc}
  40071c:	400e1200 	.word	0x400e1200

00400720 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400720:	4a16      	ldr	r2, [pc, #88]	; (40077c <pmc_switch_mck_to_pllack+0x5c>)
  400722:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400728:	4303      	orrs	r3, r0
  40072a:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40072c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40072e:	f013 0f08 	tst.w	r3, #8
  400732:	d10a      	bne.n	40074a <pmc_switch_mck_to_pllack+0x2a>
  400734:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400738:	4910      	ldr	r1, [pc, #64]	; (40077c <pmc_switch_mck_to_pllack+0x5c>)
  40073a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40073c:	f012 0f08 	tst.w	r2, #8
  400740:	d103      	bne.n	40074a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400742:	3b01      	subs	r3, #1
  400744:	d1f9      	bne.n	40073a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400746:	2001      	movs	r0, #1
  400748:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40074a:	4a0c      	ldr	r2, [pc, #48]	; (40077c <pmc_switch_mck_to_pllack+0x5c>)
  40074c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40074e:	f023 0303 	bic.w	r3, r3, #3
  400752:	f043 0302 	orr.w	r3, r3, #2
  400756:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400758:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40075a:	f010 0008 	ands.w	r0, r0, #8
  40075e:	d10a      	bne.n	400776 <pmc_switch_mck_to_pllack+0x56>
  400760:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400764:	4905      	ldr	r1, [pc, #20]	; (40077c <pmc_switch_mck_to_pllack+0x5c>)
  400766:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400768:	f012 0f08 	tst.w	r2, #8
  40076c:	d105      	bne.n	40077a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40076e:	3b01      	subs	r3, #1
  400770:	d1f9      	bne.n	400766 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400772:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400774:	4770      	bx	lr
	return 0;
  400776:	2000      	movs	r0, #0
  400778:	4770      	bx	lr
  40077a:	4770      	bx	lr
  40077c:	400e0400 	.word	0x400e0400

00400780 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400780:	b138      	cbz	r0, 400792 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400782:	4911      	ldr	r1, [pc, #68]	; (4007c8 <pmc_switch_mainck_to_xtal+0x48>)
  400784:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400786:	4a11      	ldr	r2, [pc, #68]	; (4007cc <pmc_switch_mainck_to_xtal+0x4c>)
  400788:	401a      	ands	r2, r3
  40078a:	4b11      	ldr	r3, [pc, #68]	; (4007d0 <pmc_switch_mainck_to_xtal+0x50>)
  40078c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40078e:	620b      	str	r3, [r1, #32]
  400790:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400792:	480d      	ldr	r0, [pc, #52]	; (4007c8 <pmc_switch_mainck_to_xtal+0x48>)
  400794:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400796:	0209      	lsls	r1, r1, #8
  400798:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40079a:	f422 125c 	bic.w	r2, r2, #3604480	; 0x370000
  40079e:	f022 0203 	bic.w	r2, r2, #3
  4007a2:	4313      	orrs	r3, r2
  4007a4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007a8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007ac:	6203      	str	r3, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007ae:	4602      	mov	r2, r0
  4007b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007b2:	f013 0f01 	tst.w	r3, #1
  4007b6:	d0fb      	beq.n	4007b0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007b8:	4a03      	ldr	r2, [pc, #12]	; (4007c8 <pmc_switch_mainck_to_xtal+0x48>)
  4007ba:	6a13      	ldr	r3, [r2, #32]
  4007bc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007c4:	6213      	str	r3, [r2, #32]
	}
}
  4007c6:	4770      	bx	lr
  4007c8:	400e0400 	.word	0x400e0400
  4007cc:	fec8fffc 	.word	0xfec8fffc
  4007d0:	01370002 	.word	0x01370002

004007d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4007d4:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <pmc_osc_is_ready_mainck+0xc>)
  4007d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop
  4007e0:	400e0400 	.word	0x400e0400

004007e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007e4:	4b02      	ldr	r3, [pc, #8]	; (4007f0 <pmc_disable_pllack+0xc>)
  4007e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4007ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	400e0400 	.word	0x400e0400

004007f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4007f4:	4b02      	ldr	r3, [pc, #8]	; (400800 <pmc_is_locked_pllack+0xc>)
  4007f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007f8:	f000 0002 	and.w	r0, r0, #2
  4007fc:	4770      	bx	lr
  4007fe:	bf00      	nop
  400800:	400e0400 	.word	0x400e0400

00400804 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400804:	2822      	cmp	r0, #34	; 0x22
  400806:	d81c      	bhi.n	400842 <pmc_enable_periph_clk+0x3e>
		return 1;
	}

	if (ul_id < 32) {
  400808:	281f      	cmp	r0, #31
  40080a:	d80b      	bhi.n	400824 <pmc_enable_periph_clk+0x20>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40080c:	4b10      	ldr	r3, [pc, #64]	; (400850 <pmc_enable_periph_clk+0x4c>)
  40080e:	699a      	ldr	r2, [r3, #24]
  400810:	2301      	movs	r3, #1
  400812:	4083      	lsls	r3, r0
  400814:	4393      	bics	r3, r2
  400816:	d016      	beq.n	400846 <pmc_enable_periph_clk+0x42>
			PMC->PMC_PCER0 = 1 << ul_id;
  400818:	2301      	movs	r3, #1
  40081a:	4083      	lsls	r3, r0
  40081c:	4a0c      	ldr	r2, [pc, #48]	; (400850 <pmc_enable_periph_clk+0x4c>)
  40081e:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400820:	2000      	movs	r0, #0
  400822:	4770      	bx	lr
		ul_id -= 32;
  400824:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400826:	4b0a      	ldr	r3, [pc, #40]	; (400850 <pmc_enable_periph_clk+0x4c>)
  400828:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40082c:	2301      	movs	r3, #1
  40082e:	4083      	lsls	r3, r0
  400830:	4393      	bics	r3, r2
  400832:	d00a      	beq.n	40084a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER1 = 1 << ul_id;
  400834:	2301      	movs	r3, #1
  400836:	4083      	lsls	r3, r0
  400838:	4a05      	ldr	r2, [pc, #20]	; (400850 <pmc_enable_periph_clk+0x4c>)
  40083a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	return 0;
  40083e:	2000      	movs	r0, #0
  400840:	4770      	bx	lr
		return 1;
  400842:	2001      	movs	r0, #1
  400844:	4770      	bx	lr
	return 0;
  400846:	2000      	movs	r0, #0
  400848:	4770      	bx	lr
  40084a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop
  400850:	400e0400 	.word	0x400e0400

00400854 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400858:	6043      	str	r3, [r0, #4]

}
  40085a:	4770      	bx	lr

0040085c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
  40085c:	e7fe      	b.n	40085c <Dummy_Handler>
	...

00400860 <Reset_Handler>:
{
  400860:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400862:	4a22      	ldr	r2, [pc, #136]	; (4008ec <Reset_Handler+0x8c>)
  400864:	4b22      	ldr	r3, [pc, #136]	; (4008f0 <Reset_Handler+0x90>)
  400866:	429a      	cmp	r2, r3
  400868:	d929      	bls.n	4008be <Reset_Handler+0x5e>
		for (; pDest < &_erelocate;) {
  40086a:	461a      	mov	r2, r3
  40086c:	4b21      	ldr	r3, [pc, #132]	; (4008f4 <Reset_Handler+0x94>)
  40086e:	429a      	cmp	r2, r3
  400870:	d20c      	bcs.n	40088c <Reset_Handler+0x2c>
  400872:	1e58      	subs	r0, r3, #1
  400874:	1a80      	subs	r0, r0, r2
  400876:	f020 0003 	bic.w	r0, r0, #3
  40087a:	3004      	adds	r0, #4
  40087c:	4b1b      	ldr	r3, [pc, #108]	; (4008ec <Reset_Handler+0x8c>)
  40087e:	4418      	add	r0, r3
			*pDest++ = *pSrc++;
  400880:	f853 1b04 	ldr.w	r1, [r3], #4
  400884:	f842 1b04 	str.w	r1, [r2], #4
		for (; pDest < &_erelocate;) {
  400888:	4283      	cmp	r3, r0
  40088a:	d1f9      	bne.n	400880 <Reset_Handler+0x20>
	__NOP();
  40088c:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40088e:	4a1a      	ldr	r2, [pc, #104]	; (4008f8 <Reset_Handler+0x98>)
  400890:	4b1a      	ldr	r3, [pc, #104]	; (4008fc <Reset_Handler+0x9c>)
  400892:	429a      	cmp	r2, r3
  400894:	d20b      	bcs.n	4008ae <Reset_Handler+0x4e>
  400896:	4613      	mov	r3, r2
  400898:	4a19      	ldr	r2, [pc, #100]	; (400900 <Reset_Handler+0xa0>)
  40089a:	1ad2      	subs	r2, r2, r3
  40089c:	f022 0203 	bic.w	r2, r2, #3
  4008a0:	3204      	adds	r2, #4
  4008a2:	441a      	add	r2, r3
		*pDest++ = 0;
  4008a4:	2100      	movs	r1, #0
  4008a6:	f843 1b04 	str.w	r1, [r3], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4008aa:	429a      	cmp	r2, r3
  4008ac:	d1fb      	bne.n	4008a6 <Reset_Handler+0x46>
	SCB->VTOR = ((uint32_t) pSrc);
  4008ae:	4a15      	ldr	r2, [pc, #84]	; (400904 <Reset_Handler+0xa4>)
  4008b0:	4b15      	ldr	r3, [pc, #84]	; (400908 <Reset_Handler+0xa8>)
  4008b2:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4008b4:	f001 fe06 	bl	4024c4 <__libc_init_array>
	main();
  4008b8:	f7ff fc6c 	bl	400194 <main>
	while (1);
  4008bc:	e7fe      	b.n	4008bc <Reset_Handler+0x5c>
	} else if (pSrc < pDest) {
  4008be:	4a0b      	ldr	r2, [pc, #44]	; (4008ec <Reset_Handler+0x8c>)
  4008c0:	4b0b      	ldr	r3, [pc, #44]	; (4008f0 <Reset_Handler+0x90>)
  4008c2:	429a      	cmp	r2, r3
  4008c4:	d2e2      	bcs.n	40088c <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008c6:	4a0b      	ldr	r2, [pc, #44]	; (4008f4 <Reset_Handler+0x94>)
  4008c8:	1ad1      	subs	r1, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008ca:	4808      	ldr	r0, [pc, #32]	; (4008ec <Reset_Handler+0x8c>)
  4008cc:	1f03      	subs	r3, r0, #4
  4008ce:	440b      	add	r3, r1
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4008d0:	3a04      	subs	r2, #4
		for (;nb_bytes;nb_bytes -= 4) {
  4008d2:	2900      	cmp	r1, #0
  4008d4:	d0da      	beq.n	40088c <Reset_Handler+0x2c>
  4008d6:	f1c0 0004 	rsb	r0, r0, #4
			*pDest-- = *pSrc--;
  4008da:	4619      	mov	r1, r3
  4008dc:	3b04      	subs	r3, #4
  4008de:	6809      	ldr	r1, [r1, #0]
  4008e0:	f842 1904 	str.w	r1, [r2], #-4
		for (;nb_bytes;nb_bytes -= 4) {
  4008e4:	42c3      	cmn	r3, r0
  4008e6:	d1f8      	bne.n	4008da <Reset_Handler+0x7a>
  4008e8:	e7d0      	b.n	40088c <Reset_Handler+0x2c>
  4008ea:	bf00      	nop
  4008ec:	004027c4 	.word	0x004027c4
  4008f0:	20000000 	.word	0x20000000
  4008f4:	2000043c 	.word	0x2000043c
  4008f8:	2000043c 	.word	0x2000043c
  4008fc:	2000a63c 	.word	0x2000a63c
  400900:	2000a63b 	.word	0x2000a63b
  400904:	00400000 	.word	0x00400000
  400908:	e000ed00 	.word	0xe000ed00

0040090c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40090c:	4b3c      	ldr	r3, [pc, #240]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  40090e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400910:	f002 0303 	and.w	r3, r2, #3
  400914:	2b01      	cmp	r3, #1
  400916:	d024      	beq.n	400962 <SystemCoreClockUpdate+0x56>
  400918:	f012 0f02 	tst.w	r2, #2
  40091c:	d10d      	bne.n	40093a <SystemCoreClockUpdate+0x2e>
  40091e:	2b00      	cmp	r3, #0
  400920:	d153      	bne.n	4009ca <SystemCoreClockUpdate+0xbe>
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400922:	4b38      	ldr	r3, [pc, #224]	; (400a04 <SystemCoreClockUpdate+0xf8>)
  400924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400926:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40092a:	4b37      	ldr	r3, [pc, #220]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  40092c:	bf14      	ite	ne
  40092e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400932:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400936:	601a      	str	r2, [r3, #0]
  400938:	e047      	b.n	4009ca <SystemCoreClockUpdate+0xbe>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40093a:	4b31      	ldr	r3, [pc, #196]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  40093c:	6a1b      	ldr	r3, [r3, #32]
  40093e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400942:	d12a      	bne.n	40099a <SystemCoreClockUpdate+0x8e>
				SystemCoreClock = CHIP_FREQ_XTAL;
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400944:	4b30      	ldr	r3, [pc, #192]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  400946:	4a31      	ldr	r2, [pc, #196]	; (400a0c <SystemCoreClockUpdate+0x100>)
  400948:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40094a:	4b2d      	ldr	r3, [pc, #180]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  40094c:	6a1b      	ldr	r3, [r3, #32]
  40094e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400952:	2b10      	cmp	r3, #16
  400954:	d049      	beq.n	4009ea <SystemCoreClockUpdate+0xde>
  400956:	2b20      	cmp	r3, #32
  400958:	d122      	bne.n	4009a0 <SystemCoreClockUpdate+0x94>
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40095a:	4b2b      	ldr	r3, [pc, #172]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  40095c:	4a2c      	ldr	r2, [pc, #176]	; (400a10 <SystemCoreClockUpdate+0x104>)
  40095e:	601a      	str	r2, [r3, #0]
					break;
  400960:	e01e      	b.n	4009a0 <SystemCoreClockUpdate+0x94>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400962:	4b27      	ldr	r3, [pc, #156]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  400964:	6a1b      	ldr	r3, [r3, #32]
  400966:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40096a:	d003      	beq.n	400974 <SystemCoreClockUpdate+0x68>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40096c:	4b26      	ldr	r3, [pc, #152]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  40096e:	4a28      	ldr	r2, [pc, #160]	; (400a10 <SystemCoreClockUpdate+0x104>)
  400970:	601a      	str	r2, [r3, #0]
  400972:	e02a      	b.n	4009ca <SystemCoreClockUpdate+0xbe>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400974:	4b24      	ldr	r3, [pc, #144]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  400976:	4a25      	ldr	r2, [pc, #148]	; (400a0c <SystemCoreClockUpdate+0x100>)
  400978:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40097a:	4b21      	ldr	r3, [pc, #132]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  40097c:	6a1b      	ldr	r3, [r3, #32]
  40097e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400982:	2b10      	cmp	r3, #16
  400984:	d005      	beq.n	400992 <SystemCoreClockUpdate+0x86>
  400986:	2b20      	cmp	r3, #32
  400988:	d11f      	bne.n	4009ca <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40098a:	4b1f      	ldr	r3, [pc, #124]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  40098c:	4a20      	ldr	r2, [pc, #128]	; (400a10 <SystemCoreClockUpdate+0x104>)
  40098e:	601a      	str	r2, [r3, #0]
			break;
  400990:	e01b      	b.n	4009ca <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400992:	4b1d      	ldr	r3, [pc, #116]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  400994:	4a1f      	ldr	r2, [pc, #124]	; (400a14 <SystemCoreClockUpdate+0x108>)
  400996:	601a      	str	r2, [r3, #0]
			break;
  400998:	e017      	b.n	4009ca <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40099a:	4b1b      	ldr	r3, [pc, #108]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  40099c:	4a1c      	ldr	r2, [pc, #112]	; (400a10 <SystemCoreClockUpdate+0x104>)
  40099e:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009a0:	4b17      	ldr	r3, [pc, #92]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  4009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009a4:	f003 0303 	and.w	r3, r3, #3
  4009a8:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009aa:	4b15      	ldr	r3, [pc, #84]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  4009ac:	bf07      	ittee	eq
  4009ae:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009b0:	6a9a      	ldreq	r2, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009b2:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009b4:	6ada      	ldrne	r2, [r3, #44]	; 0x2c
  4009b6:	4814      	ldr	r0, [pc, #80]	; (400a08 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4009b8:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009bc:	6803      	ldr	r3, [r0, #0]
  4009be:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  4009c2:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009c4:	fbb3 f3f2 	udiv	r3, r3, r2
  4009c8:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4009ca:	4b0d      	ldr	r3, [pc, #52]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  4009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d2:	2b70      	cmp	r3, #112	; 0x70
  4009d4:	d00d      	beq.n	4009f2 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4009d6:	4b0a      	ldr	r3, [pc, #40]	; (400a00 <SystemCoreClockUpdate+0xf4>)
  4009d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4009da:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4009de:	4b0a      	ldr	r3, [pc, #40]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  4009e0:	681b      	ldr	r3, [r3, #0]
  4009e2:	40d3      	lsrs	r3, r2
  4009e4:	4a08      	ldr	r2, [pc, #32]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  4009e6:	6013      	str	r3, [r2, #0]
	}
}
  4009e8:	4770      	bx	lr
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009ea:	4b07      	ldr	r3, [pc, #28]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  4009ec:	4a09      	ldr	r2, [pc, #36]	; (400a14 <SystemCoreClockUpdate+0x108>)
  4009ee:	601a      	str	r2, [r3, #0]
					break;
  4009f0:	e7d6      	b.n	4009a0 <SystemCoreClockUpdate+0x94>
		SystemCoreClock /= 3U;
  4009f2:	4b05      	ldr	r3, [pc, #20]	; (400a08 <SystemCoreClockUpdate+0xfc>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	4a08      	ldr	r2, [pc, #32]	; (400a18 <SystemCoreClockUpdate+0x10c>)
  4009f8:	fba2 2303 	umull	r2, r3, r2, r3
  4009fc:	085b      	lsrs	r3, r3, #1
  4009fe:	e7f1      	b.n	4009e4 <SystemCoreClockUpdate+0xd8>
  400a00:	400e0400 	.word	0x400e0400
  400a04:	400e1400 	.word	0x400e1400
  400a08:	20000000 	.word	0x20000000
  400a0c:	003d0900 	.word	0x003d0900
  400a10:	00b71b00 	.word	0x00b71b00
  400a14:	007a1200 	.word	0x007a1200
  400a18:	aaaaaaab 	.word	0xaaaaaaab

00400a1c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a1c:	4b1a      	ldr	r3, [pc, #104]	; (400a88 <system_init_flash+0x6c>)
  400a1e:	4298      	cmp	r0, r3
  400a20:	d807      	bhi.n	400a32 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400a26:	4a19      	ldr	r2, [pc, #100]	; (400a8c <system_init_flash+0x70>)
  400a28:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a2a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a2e:	6013      	str	r3, [r2, #0]
  400a30:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400a32:	4b17      	ldr	r3, [pc, #92]	; (400a90 <system_init_flash+0x74>)
  400a34:	4298      	cmp	r0, r3
  400a36:	d206      	bcs.n	400a46 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a38:	4b16      	ldr	r3, [pc, #88]	; (400a94 <system_init_flash+0x78>)
  400a3a:	4a14      	ldr	r2, [pc, #80]	; (400a8c <system_init_flash+0x70>)
  400a3c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a3e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a42:	6013      	str	r3, [r2, #0]
  400a44:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a46:	4b14      	ldr	r3, [pc, #80]	; (400a98 <system_init_flash+0x7c>)
  400a48:	4298      	cmp	r0, r3
  400a4a:	d206      	bcs.n	400a5a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a4c:	4b13      	ldr	r3, [pc, #76]	; (400a9c <system_init_flash+0x80>)
  400a4e:	4a0f      	ldr	r2, [pc, #60]	; (400a8c <system_init_flash+0x70>)
  400a50:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a52:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a56:	6013      	str	r3, [r2, #0]
  400a58:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a5a:	4b11      	ldr	r3, [pc, #68]	; (400aa0 <system_init_flash+0x84>)
  400a5c:	4298      	cmp	r0, r3
  400a5e:	d806      	bhi.n	400a6e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a60:	4b10      	ldr	r3, [pc, #64]	; (400aa4 <system_init_flash+0x88>)
  400a62:	4a0a      	ldr	r2, [pc, #40]	; (400a8c <system_init_flash+0x70>)
  400a64:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a66:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a6a:	6013      	str	r3, [r2, #0]
  400a6c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a6e:	4b0e      	ldr	r3, [pc, #56]	; (400aa8 <system_init_flash+0x8c>)
  400a70:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a72:	bf94      	ite	ls
  400a74:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a78:	4b0c      	ldrhi	r3, [pc, #48]	; (400aac <system_init_flash+0x90>)
  400a7a:	4a04      	ldr	r2, [pc, #16]	; (400a8c <system_init_flash+0x70>)
  400a7c:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a7e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a82:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
#endif
}
  400a84:	4770      	bx	lr
  400a86:	bf00      	nop
  400a88:	01312cff 	.word	0x01312cff
  400a8c:	400e0a00 	.word	0x400e0a00
  400a90:	02625a00 	.word	0x02625a00
  400a94:	04000100 	.word	0x04000100
  400a98:	03938700 	.word	0x03938700
  400a9c:	04000200 	.word	0x04000200
  400aa0:	04c4b3ff 	.word	0x04c4b3ff
  400aa4:	04000300 	.word	0x04000300
  400aa8:	05f5e0ff 	.word	0x05f5e0ff
  400aac:	04000500 	.word	0x04000500

00400ab0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ab0:	f100 0308 	add.w	r3, r0, #8
  400ab4:	6043      	str	r3, [r0, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  400ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  400aba:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400abc:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400abe:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400ac0:	2300      	movs	r3, #0
  400ac2:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
  400ac4:	4770      	bx	lr

00400ac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  400ac6:	2300      	movs	r3, #0
  400ac8:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
  400aca:	4770      	bx	lr

00400acc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  400acc:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400ace:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  400ad0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  400ad4:	d011      	beq.n	400afa <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  400ad6:	f100 0308 	add.w	r3, r0, #8
  400ada:	461c      	mov	r4, r3
  400adc:	685b      	ldr	r3, [r3, #4]
  400ade:	681a      	ldr	r2, [r3, #0]
  400ae0:	42aa      	cmp	r2, r5
  400ae2:	d9fa      	bls.n	400ada <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  400ae4:	6863      	ldr	r3, [r4, #4]
  400ae6:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400ae8:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  400aea:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  400aec:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  400aee:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  400af0:	6803      	ldr	r3, [r0, #0]
  400af2:	3301      	adds	r3, #1
  400af4:	6003      	str	r3, [r0, #0]
}
  400af6:	bc30      	pop	{r4, r5}
  400af8:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
  400afa:	6904      	ldr	r4, [r0, #16]
  400afc:	e7f2      	b.n	400ae4 <vListInsert+0x18>

00400afe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  400afe:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b00:	6841      	ldr	r1, [r0, #4]
  400b02:	6882      	ldr	r2, [r0, #8]
  400b04:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b06:	6841      	ldr	r1, [r0, #4]
  400b08:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  400b0a:	685a      	ldr	r2, [r3, #4]
  400b0c:	4282      	cmp	r2, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b0e:	bf04      	itt	eq
  400b10:	6882      	ldreq	r2, [r0, #8]
  400b12:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  400b14:	2200      	movs	r2, #0
  400b16:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  400b18:	681a      	ldr	r2, [r3, #0]
  400b1a:	3a01      	subs	r2, #1
  400b1c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  400b1e:	6818      	ldr	r0, [r3, #0]
}
  400b20:	4770      	bx	lr

00400b22 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400b22:	b510      	push	{r4, lr}
  400b24:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400b26:	f001 fac5 	bl	4020b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400b2a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  400b2c:	f001 fae4 	bl	4020f8 <vPortExitCritical>

    return xReturn;
}
  400b30:	fab4 f084 	clz	r0, r4
  400b34:	0940      	lsrs	r0, r0, #5
  400b36:	bd10      	pop	{r4, pc}

00400b38 <prvCopyDataToQueue>:
{
  400b38:	b570      	push	{r4, r5, r6, lr}
  400b3a:	4604      	mov	r4, r0
  400b3c:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400b3e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400b40:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b42:	b95a      	cbnz	r2, 400b5c <prvCopyDataToQueue+0x24>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400b44:	6803      	ldr	r3, [r0, #0]
  400b46:	b11b      	cbz	r3, 400b50 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
  400b48:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400b4a:	3601      	adds	r6, #1
  400b4c:	63a6      	str	r6, [r4, #56]	; 0x38
}
  400b4e:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400b50:	6880      	ldr	r0, [r0, #8]
  400b52:	f001 f861 	bl	401c18 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400b56:	2300      	movs	r3, #0
  400b58:	60a3      	str	r3, [r4, #8]
  400b5a:	e7f6      	b.n	400b4a <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400b5c:	b96d      	cbnz	r5, 400b7a <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400b5e:	6840      	ldr	r0, [r0, #4]
  400b60:	f001 fcd4 	bl	40250c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400b64:	6863      	ldr	r3, [r4, #4]
  400b66:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400b68:	4413      	add	r3, r2
  400b6a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400b6c:	68a2      	ldr	r2, [r4, #8]
  400b6e:	4293      	cmp	r3, r2
  400b70:	d319      	bcc.n	400ba6 <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400b72:	6823      	ldr	r3, [r4, #0]
  400b74:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  400b76:	4628      	mov	r0, r5
  400b78:	e7e7      	b.n	400b4a <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  400b7a:	68c0      	ldr	r0, [r0, #12]
  400b7c:	f001 fcc6 	bl	40250c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  400b80:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400b82:	4251      	negs	r1, r2
  400b84:	68e3      	ldr	r3, [r4, #12]
  400b86:	1a9b      	subs	r3, r3, r2
  400b88:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400b8a:	6822      	ldr	r2, [r4, #0]
  400b8c:	4293      	cmp	r3, r2
  400b8e:	d202      	bcs.n	400b96 <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  400b90:	68a3      	ldr	r3, [r4, #8]
  400b92:	440b      	add	r3, r1
  400b94:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
  400b96:	2d02      	cmp	r5, #2
  400b98:	d001      	beq.n	400b9e <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  400b9a:	2000      	movs	r0, #0
  400b9c:	e7d5      	b.n	400b4a <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400b9e:	b126      	cbz	r6, 400baa <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  400ba0:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
  400ba2:	2000      	movs	r0, #0
  400ba4:	e7d1      	b.n	400b4a <prvCopyDataToQueue+0x12>
  400ba6:	4628      	mov	r0, r5
  400ba8:	e7cf      	b.n	400b4a <prvCopyDataToQueue+0x12>
  400baa:	2000      	movs	r0, #0
  400bac:	e7cd      	b.n	400b4a <prvCopyDataToQueue+0x12>

00400bae <prvCopyDataFromQueue>:
{
  400bae:	b508      	push	{r3, lr}
  400bb0:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400bb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400bb4:	b162      	cbz	r2, 400bd0 <prvCopyDataFromQueue+0x22>
  400bb6:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400bb8:	68d9      	ldr	r1, [r3, #12]
  400bba:	4411      	add	r1, r2
  400bbc:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400bbe:	f8d3 c008 	ldr.w	ip, [r3, #8]
  400bc2:	4561      	cmp	r1, ip
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400bc4:	bf24      	itt	cs
  400bc6:	6819      	ldrcs	r1, [r3, #0]
  400bc8:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400bca:	68d9      	ldr	r1, [r3, #12]
  400bcc:	f001 fc9e 	bl	40250c <memcpy>
}
  400bd0:	bd08      	pop	{r3, pc}

00400bd2 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  400bd2:	b570      	push	{r4, r5, r6, lr}
  400bd4:	b082      	sub	sp, #8
  400bd6:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400bd8:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400bda:	b164      	cbz	r4, 400bf6 <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400bde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400be0:	429a      	cmp	r2, r3
  400be2:	d311      	bcc.n	400c08 <prvNotifyQueueSetContainer+0x36>
  400be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400be8:	f383 8811 	msr	BASEPRI, r3
  400bec:	f3bf 8f6f 	isb	sy
  400bf0:	f3bf 8f4f 	dsb	sy
  400bf4:	e7fe      	b.n	400bf4 <prvNotifyQueueSetContainer+0x22>
  400bf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400bfa:	f383 8811 	msr	BASEPRI, r3
  400bfe:	f3bf 8f6f 	isb	sy
  400c02:	f3bf 8f4f 	dsb	sy
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400c06:	e7fe      	b.n	400c06 <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c0a:	4293      	cmp	r3, r2
  400c0c:	d803      	bhi.n	400c16 <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
  400c0e:	2500      	movs	r5, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  400c10:	4628      	mov	r0, r5
  400c12:	b002      	add	sp, #8
  400c14:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400c16:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
  400c1a:	b276      	sxtb	r6, r6
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400c1c:	2200      	movs	r2, #0
  400c1e:	a901      	add	r1, sp, #4
  400c20:	4620      	mov	r0, r4
  400c22:	f7ff ff89 	bl	400b38 <prvCopyDataToQueue>
  400c26:	4605      	mov	r5, r0
            if( cTxLock == queueUNLOCKED )
  400c28:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
  400c2c:	d10a      	bne.n	400c44 <prvNotifyQueueSetContainer+0x72>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c30:	2b00      	cmp	r3, #0
  400c32:	d0ed      	beq.n	400c10 <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400c34:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c38:	f000 ff12 	bl	401a60 <xTaskRemoveFromEventList>
                        xReturn = pdTRUE;
  400c3c:	2800      	cmp	r0, #0
  400c3e:	bf18      	it	ne
  400c40:	2501      	movne	r5, #1
  400c42:	e7e5      	b.n	400c10 <prvNotifyQueueSetContainer+0x3e>
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
  400c44:	f000 fc7c 	bl	401540 <uxTaskGetNumberOfTasks>
  400c48:	4286      	cmp	r6, r0
  400c4a:	d2e1      	bcs.n	400c10 <prvNotifyQueueSetContainer+0x3e>
  400c4c:	2e7f      	cmp	r6, #127	; 0x7f
  400c4e:	d004      	beq.n	400c5a <prvNotifyQueueSetContainer+0x88>
  400c50:	1c73      	adds	r3, r6, #1
  400c52:	b25b      	sxtb	r3, r3
  400c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400c58:	e7da      	b.n	400c10 <prvNotifyQueueSetContainer+0x3e>
  400c5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400c5e:	f383 8811 	msr	BASEPRI, r3
  400c62:	f3bf 8f6f 	isb	sy
  400c66:	f3bf 8f4f 	dsb	sy
  400c6a:	e7fe      	b.n	400c6a <prvNotifyQueueSetContainer+0x98>

00400c6c <prvUnlockQueue>:
{
  400c6c:	b570      	push	{r4, r5, r6, lr}
  400c6e:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  400c70:	f001 fa20 	bl	4020b4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
  400c74:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  400c78:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400c7a:	2c00      	cmp	r4, #0
  400c7c:	dd19      	ble.n	400cb2 <prvUnlockQueue+0x46>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c7e:	f105 0624 	add.w	r6, r5, #36	; 0x24
  400c82:	e008      	b.n	400c96 <prvUnlockQueue+0x2a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  400c86:	b1a3      	cbz	r3, 400cb2 <prvUnlockQueue+0x46>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c88:	4630      	mov	r0, r6
  400c8a:	f000 fee9 	bl	401a60 <xTaskRemoveFromEventList>
  400c8e:	b968      	cbnz	r0, 400cac <prvUnlockQueue+0x40>
            --cTxLock;
  400c90:	3c01      	subs	r4, #1
  400c92:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400c94:	b16c      	cbz	r4, 400cb2 <prvUnlockQueue+0x46>
                if( pxQueue->pxQueueSetContainer != NULL )
  400c96:	6cab      	ldr	r3, [r5, #72]	; 0x48
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d0f3      	beq.n	400c84 <prvUnlockQueue+0x18>
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400c9c:	4628      	mov	r0, r5
  400c9e:	f7ff ff98 	bl	400bd2 <prvNotifyQueueSetContainer>
  400ca2:	2800      	cmp	r0, #0
  400ca4:	d0f4      	beq.n	400c90 <prvUnlockQueue+0x24>
                        vTaskMissedYield();
  400ca6:	f000 ffa1 	bl	401bec <vTaskMissedYield>
  400caa:	e7f1      	b.n	400c90 <prvUnlockQueue+0x24>
                            vTaskMissedYield();
  400cac:	f000 ff9e 	bl	401bec <vTaskMissedYield>
  400cb0:	e7ee      	b.n	400c90 <prvUnlockQueue+0x24>
        pxQueue->cTxLock = queueUNLOCKED;
  400cb2:	23ff      	movs	r3, #255	; 0xff
  400cb4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  400cb8:	f001 fa1e 	bl	4020f8 <vPortExitCritical>
    taskENTER_CRITICAL();
  400cbc:	f001 f9fa 	bl	4020b4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
  400cc0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400cc4:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400cc6:	2c00      	cmp	r4, #0
  400cc8:	dd0f      	ble.n	400cea <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400cca:	f105 0610 	add.w	r6, r5, #16
  400cce:	e002      	b.n	400cd6 <prvUnlockQueue+0x6a>
                --cRxLock;
  400cd0:	3c01      	subs	r4, #1
  400cd2:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400cd4:	b14c      	cbz	r4, 400cea <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400cd6:	692b      	ldr	r3, [r5, #16]
  400cd8:	b13b      	cbz	r3, 400cea <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400cda:	4630      	mov	r0, r6
  400cdc:	f000 fec0 	bl	401a60 <xTaskRemoveFromEventList>
  400ce0:	2800      	cmp	r0, #0
  400ce2:	d0f5      	beq.n	400cd0 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
  400ce4:	f000 ff82 	bl	401bec <vTaskMissedYield>
  400ce8:	e7f2      	b.n	400cd0 <prvUnlockQueue+0x64>
        pxQueue->cRxLock = queueUNLOCKED;
  400cea:	23ff      	movs	r3, #255	; 0xff
  400cec:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400cf0:	f001 fa02 	bl	4020f8 <vPortExitCritical>
}
  400cf4:	bd70      	pop	{r4, r5, r6, pc}

00400cf6 <xQueueGenericReset>:
{
  400cf6:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400cf8:	b180      	cbz	r0, 400d1c <xQueueGenericReset+0x26>
  400cfa:	460d      	mov	r5, r1
  400cfc:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400cfe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400d00:	b11b      	cbz	r3, 400d0a <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400d02:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d04:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400d08:	b18b      	cbz	r3, 400d2e <xQueueGenericReset+0x38>
  400d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400d0e:	f383 8811 	msr	BASEPRI, r3
  400d12:	f3bf 8f6f 	isb	sy
  400d16:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
  400d1a:	e7fe      	b.n	400d1a <xQueueGenericReset+0x24>
  400d1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400d20:	f383 8811 	msr	BASEPRI, r3
  400d24:	f3bf 8f6f 	isb	sy
  400d28:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
  400d2c:	e7fe      	b.n	400d2c <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
  400d2e:	f001 f9c1 	bl	4020b4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400d32:	6822      	ldr	r2, [r4, #0]
  400d34:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400d36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d38:	fb01 f303 	mul.w	r3, r1, r3
  400d3c:	18d0      	adds	r0, r2, r3
  400d3e:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400d40:	2000      	movs	r0, #0
  400d42:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400d44:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400d46:	1a5b      	subs	r3, r3, r1
  400d48:	441a      	add	r2, r3
  400d4a:	60e2      	str	r2, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400d4c:	23ff      	movs	r3, #255	; 0xff
  400d4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400d56:	b9b5      	cbnz	r5, 400d86 <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d58:	6923      	ldr	r3, [r4, #16]
  400d5a:	b91b      	cbnz	r3, 400d64 <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
  400d5c:	f001 f9cc 	bl	4020f8 <vPortExitCritical>
}
  400d60:	2001      	movs	r0, #1
  400d62:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d64:	f104 0010 	add.w	r0, r4, #16
  400d68:	f000 fe7a 	bl	401a60 <xTaskRemoveFromEventList>
  400d6c:	2800      	cmp	r0, #0
  400d6e:	d0f5      	beq.n	400d5c <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
  400d70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400d7c:	f3bf 8f4f 	dsb	sy
  400d80:	f3bf 8f6f 	isb	sy
  400d84:	e7ea      	b.n	400d5c <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400d86:	f104 0010 	add.w	r0, r4, #16
  400d8a:	f7ff fe91 	bl	400ab0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400d8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d92:	f7ff fe8d 	bl	400ab0 <vListInitialise>
  400d96:	e7e1      	b.n	400d5c <xQueueGenericReset+0x66>

00400d98 <xQueueGenericCreate>:
    {
  400d98:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400d9a:	b148      	cbz	r0, 400db0 <xQueueGenericCreate+0x18>
  400d9c:	460c      	mov	r4, r1
  400d9e:	4605      	mov	r5, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400da0:	fba1 2300 	umull	r2, r3, r1, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400da4:	b923      	cbnz	r3, 400db0 <xQueueGenericCreate+0x18>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400da6:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400daa:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400dae:	d908      	bls.n	400dc2 <xQueueGenericCreate+0x2a>
  400db0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400db4:	f383 8811 	msr	BASEPRI, r3
  400db8:	f3bf 8f6f 	isb	sy
  400dbc:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
  400dc0:	e7fe      	b.n	400dc0 <xQueueGenericCreate+0x28>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400dc2:	304c      	adds	r0, #76	; 0x4c
  400dc4:	f001 fa92 	bl	4022ec <pvPortMalloc>
            if( pxNewQueue != NULL )
  400dc8:	4606      	mov	r6, r0
  400dca:	b158      	cbz	r0, 400de4 <xQueueGenericCreate+0x4c>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400dcc:	b164      	cbz	r4, 400de8 <xQueueGenericCreate+0x50>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400dce:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400dd2:	6033      	str	r3, [r6, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400dd4:	63f5      	str	r5, [r6, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400dd6:	6434      	str	r4, [r6, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400dd8:	2101      	movs	r1, #1
  400dda:	4630      	mov	r0, r6
  400ddc:	f7ff ff8b 	bl	400cf6 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
  400de0:	2300      	movs	r3, #0
  400de2:	64b3      	str	r3, [r6, #72]	; 0x48
    }
  400de4:	4630      	mov	r0, r6
  400de6:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400de8:	4603      	mov	r3, r0
  400dea:	e7f2      	b.n	400dd2 <xQueueGenericCreate+0x3a>

00400dec <xQueueGenericSend>:
{
  400dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400df0:	b085      	sub	sp, #20
  400df2:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
  400df4:	b188      	cbz	r0, 400e1a <xQueueGenericSend+0x2e>
  400df6:	460e      	mov	r6, r1
  400df8:	461d      	mov	r5, r3
  400dfa:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400dfc:	b1b1      	cbz	r1, 400e2c <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400dfe:	2d02      	cmp	r5, #2
  400e00:	d120      	bne.n	400e44 <xQueueGenericSend+0x58>
  400e02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e04:	2b01      	cmp	r3, #1
  400e06:	d01d      	beq.n	400e44 <xQueueGenericSend+0x58>
  400e08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e0c:	f383 8811 	msr	BASEPRI, r3
  400e10:	f3bf 8f6f 	isb	sy
  400e14:	f3bf 8f4f 	dsb	sy
  400e18:	e7fe      	b.n	400e18 <xQueueGenericSend+0x2c>
  400e1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e1e:	f383 8811 	msr	BASEPRI, r3
  400e22:	f3bf 8f6f 	isb	sy
  400e26:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
  400e2a:	e7fe      	b.n	400e2a <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d0e5      	beq.n	400dfe <xQueueGenericSend+0x12>
  400e32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e36:	f383 8811 	msr	BASEPRI, r3
  400e3a:	f3bf 8f6f 	isb	sy
  400e3e:	f3bf 8f4f 	dsb	sy
  400e42:	e7fe      	b.n	400e42 <xQueueGenericSend+0x56>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e44:	f000 fed8 	bl	401bf8 <xTaskGetSchedulerState>
  400e48:	4680      	mov	r8, r0
  400e4a:	b950      	cbnz	r0, 400e62 <xQueueGenericSend+0x76>
  400e4c:	9b01      	ldr	r3, [sp, #4]
  400e4e:	b153      	cbz	r3, 400e66 <xQueueGenericSend+0x7a>
  400e50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e54:	f383 8811 	msr	BASEPRI, r3
  400e58:	f3bf 8f6f 	isb	sy
  400e5c:	f3bf 8f4f 	dsb	sy
  400e60:	e7fe      	b.n	400e60 <xQueueGenericSend+0x74>
  400e62:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
  400e66:	2700      	movs	r7, #0
  400e68:	e04d      	b.n	400f06 <xQueueGenericSend+0x11a>
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400e6a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e6c:	462a      	mov	r2, r5
  400e6e:	4631      	mov	r1, r6
  400e70:	4620      	mov	r0, r4
  400e72:	f7ff fe61 	bl	400b38 <prvCopyDataToQueue>
                    if( pxQueue->pxQueueSetContainer != NULL )
  400e76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e78:	b1b3      	cbz	r3, 400ea8 <xQueueGenericSend+0xbc>
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400e7a:	2d02      	cmp	r5, #2
  400e7c:	f000 80a0 	beq.w	400fc0 <xQueueGenericSend+0x1d4>
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400e80:	4620      	mov	r0, r4
  400e82:	f7ff fea6 	bl	400bd2 <prvNotifyQueueSetContainer>
  400e86:	b148      	cbz	r0, 400e9c <xQueueGenericSend+0xb0>
                            queueYIELD_IF_USING_PREEMPTION();
  400e88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400e94:	f3bf 8f4f 	dsb	sy
  400e98:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
  400e9c:	f001 f92c 	bl	4020f8 <vPortExitCritical>
                return pdPASS;
  400ea0:	2001      	movs	r0, #1
}
  400ea2:	b005      	add	sp, #20
  400ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400eaa:	b963      	cbnz	r3, 400ec6 <xQueueGenericSend+0xda>
                        else if( xYieldRequired != pdFALSE )
  400eac:	2800      	cmp	r0, #0
  400eae:	d0f5      	beq.n	400e9c <xQueueGenericSend+0xb0>
                            queueYIELD_IF_USING_PREEMPTION();
  400eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400eb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400ebc:	f3bf 8f4f 	dsb	sy
  400ec0:	f3bf 8f6f 	isb	sy
  400ec4:	e7ea      	b.n	400e9c <xQueueGenericSend+0xb0>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ec6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400eca:	f000 fdc9 	bl	401a60 <xTaskRemoveFromEventList>
  400ece:	2800      	cmp	r0, #0
  400ed0:	d0e4      	beq.n	400e9c <xQueueGenericSend+0xb0>
                                queueYIELD_IF_USING_PREEMPTION();
  400ed2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400eda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400ede:	f3bf 8f4f 	dsb	sy
  400ee2:	f3bf 8f6f 	isb	sy
  400ee6:	e7d9      	b.n	400e9c <xQueueGenericSend+0xb0>
                    taskEXIT_CRITICAL();
  400ee8:	f001 f906 	bl	4020f8 <vPortExitCritical>
                    return errQUEUE_FULL;
  400eec:	2000      	movs	r0, #0
  400eee:	e7d8      	b.n	400ea2 <xQueueGenericSend+0xb6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400ef0:	a802      	add	r0, sp, #8
  400ef2:	f000 fe2b 	bl	401b4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
  400ef6:	e014      	b.n	400f22 <xQueueGenericSend+0x136>
                prvUnlockQueue( pxQueue );
  400ef8:	4620      	mov	r0, r4
  400efa:	f7ff feb7 	bl	400c6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
  400efe:	f000 fc07 	bl	401710 <xTaskResumeAll>
  400f02:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
  400f06:	f001 f8d5 	bl	4020b4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400f0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f0e:	429a      	cmp	r2, r3
  400f10:	d3ab      	bcc.n	400e6a <xQueueGenericSend+0x7e>
  400f12:	2d02      	cmp	r5, #2
  400f14:	d04a      	beq.n	400fac <xQueueGenericSend+0x1c0>
                if( xTicksToWait == ( TickType_t ) 0 )
  400f16:	9b01      	ldr	r3, [sp, #4]
  400f18:	2b00      	cmp	r3, #0
  400f1a:	d0e5      	beq.n	400ee8 <xQueueGenericSend+0xfc>
                else if( xEntryTimeSet == pdFALSE )
  400f1c:	f1b8 0f00 	cmp.w	r8, #0
  400f20:	d0e6      	beq.n	400ef0 <xQueueGenericSend+0x104>
        taskEXIT_CRITICAL();
  400f22:	f001 f8e9 	bl	4020f8 <vPortExitCritical>
        vTaskSuspendAll();
  400f26:	f000 fafd 	bl	401524 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
  400f2a:	f001 f8c3 	bl	4020b4 <vPortEnterCritical>
  400f2e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
  400f32:	b252      	sxtb	r2, r2
  400f34:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  400f38:	bf08      	it	eq
  400f3a:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
  400f3e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  400f42:	b252      	sxtb	r2, r2
  400f44:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  400f48:	bf08      	it	eq
  400f4a:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
  400f4e:	f001 f8d3 	bl	4020f8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f52:	a901      	add	r1, sp, #4
  400f54:	a802      	add	r0, sp, #8
  400f56:	f000 fe05 	bl	401b64 <xTaskCheckForTimeOut>
  400f5a:	bb00      	cbnz	r0, 400f9e <xQueueGenericSend+0x1b2>
    taskENTER_CRITICAL();
  400f5c:	f001 f8aa 	bl	4020b4 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400f60:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  400f64:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  400f68:	f001 f8c6 	bl	4020f8 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400f6c:	45c1      	cmp	r9, r8
  400f6e:	d1c3      	bne.n	400ef8 <xQueueGenericSend+0x10c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400f70:	9901      	ldr	r1, [sp, #4]
  400f72:	f104 0010 	add.w	r0, r4, #16
  400f76:	f000 fd31 	bl	4019dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
  400f7a:	4620      	mov	r0, r4
  400f7c:	f7ff fe76 	bl	400c6c <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
  400f80:	f000 fbc6 	bl	401710 <xTaskResumeAll>
  400f84:	2800      	cmp	r0, #0
  400f86:	d1bc      	bne.n	400f02 <xQueueGenericSend+0x116>
                    portYIELD_WITHIN_API();
  400f88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400f94:	f3bf 8f4f 	dsb	sy
  400f98:	f3bf 8f6f 	isb	sy
  400f9c:	e7b1      	b.n	400f02 <xQueueGenericSend+0x116>
            prvUnlockQueue( pxQueue );
  400f9e:	4620      	mov	r0, r4
  400fa0:	f7ff fe64 	bl	400c6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
  400fa4:	f000 fbb4 	bl	401710 <xTaskResumeAll>
            return errQUEUE_FULL;
  400fa8:	2000      	movs	r0, #0
  400faa:	e77a      	b.n	400ea2 <xQueueGenericSend+0xb6>
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400fac:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400fae:	462a      	mov	r2, r5
  400fb0:	4631      	mov	r1, r6
  400fb2:	4620      	mov	r0, r4
  400fb4:	f7ff fdc0 	bl	400b38 <prvCopyDataToQueue>
                    if( pxQueue->pxQueueSetContainer != NULL )
  400fb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fba:	2b00      	cmp	r3, #0
  400fbc:	f43f af74 	beq.w	400ea8 <xQueueGenericSend+0xbc>
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400fc0:	2f00      	cmp	r7, #0
  400fc2:	f47f af6b 	bne.w	400e9c <xQueueGenericSend+0xb0>
  400fc6:	e75b      	b.n	400e80 <xQueueGenericSend+0x94>

00400fc8 <xQueueReceive>:
{
  400fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fcc:	b084      	sub	sp, #16
  400fce:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  400fd0:	b188      	cbz	r0, 400ff6 <xQueueReceive+0x2e>
  400fd2:	460e      	mov	r6, r1
  400fd4:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fd6:	b1b9      	cbz	r1, 401008 <xQueueReceive+0x40>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400fd8:	f000 fe0e 	bl	401bf8 <xTaskGetSchedulerState>
  400fdc:	4680      	mov	r8, r0
  400fde:	b9f8      	cbnz	r0, 401020 <xQueueReceive+0x58>
  400fe0:	9b01      	ldr	r3, [sp, #4]
  400fe2:	b1fb      	cbz	r3, 401024 <xQueueReceive+0x5c>
  400fe4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400fe8:	f383 8811 	msr	BASEPRI, r3
  400fec:	f3bf 8f6f 	isb	sy
  400ff0:	f3bf 8f4f 	dsb	sy
  400ff4:	e7fe      	b.n	400ff4 <xQueueReceive+0x2c>
  400ff6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400ffa:	f383 8811 	msr	BASEPRI, r3
  400ffe:	f3bf 8f6f 	isb	sy
  401002:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
  401006:	e7fe      	b.n	401006 <xQueueReceive+0x3e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401008:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40100a:	2b00      	cmp	r3, #0
  40100c:	d0e4      	beq.n	400fd8 <xQueueReceive+0x10>
  40100e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401012:	f383 8811 	msr	BASEPRI, r3
  401016:	f3bf 8f6f 	isb	sy
  40101a:	f3bf 8f4f 	dsb	sy
  40101e:	e7fe      	b.n	40101e <xQueueReceive+0x56>
  401020:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
  401024:	2700      	movs	r7, #0
  401026:	e038      	b.n	40109a <xQueueReceive+0xd2>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  401028:	4631      	mov	r1, r6
  40102a:	4620      	mov	r0, r4
  40102c:	f7ff fdbf 	bl	400bae <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401030:	3d01      	subs	r5, #1
  401032:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401034:	6923      	ldr	r3, [r4, #16]
  401036:	b92b      	cbnz	r3, 401044 <xQueueReceive+0x7c>
                taskEXIT_CRITICAL();
  401038:	f001 f85e 	bl	4020f8 <vPortExitCritical>
                return pdPASS;
  40103c:	2001      	movs	r0, #1
}
  40103e:	b004      	add	sp, #16
  401040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401044:	f104 0010 	add.w	r0, r4, #16
  401048:	f000 fd0a 	bl	401a60 <xTaskRemoveFromEventList>
  40104c:	2800      	cmp	r0, #0
  40104e:	d0f3      	beq.n	401038 <xQueueReceive+0x70>
                        queueYIELD_IF_USING_PREEMPTION();
  401050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401058:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  40105c:	f3bf 8f4f 	dsb	sy
  401060:	f3bf 8f6f 	isb	sy
  401064:	e7e8      	b.n	401038 <xQueueReceive+0x70>
                    taskEXIT_CRITICAL();
  401066:	f001 f847 	bl	4020f8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
  40106a:	2000      	movs	r0, #0
  40106c:	e7e7      	b.n	40103e <xQueueReceive+0x76>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  40106e:	a802      	add	r0, sp, #8
  401070:	f000 fd6c 	bl	401b4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
  401074:	e01c      	b.n	4010b0 <xQueueReceive+0xe8>
                prvUnlockQueue( pxQueue );
  401076:	4620      	mov	r0, r4
  401078:	f7ff fdf8 	bl	400c6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
  40107c:	f000 fb48 	bl	401710 <xTaskResumeAll>
  401080:	e009      	b.n	401096 <xQueueReceive+0xce>
            prvUnlockQueue( pxQueue );
  401082:	4620      	mov	r0, r4
  401084:	f7ff fdf2 	bl	400c6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
  401088:	f000 fb42 	bl	401710 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40108c:	4620      	mov	r0, r4
  40108e:	f7ff fd48 	bl	400b22 <prvIsQueueEmpty>
  401092:	2800      	cmp	r0, #0
  401094:	d146      	bne.n	401124 <xQueueReceive+0x15c>
  401096:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
  40109a:	f001 f80b 	bl	4020b4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40109e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010a0:	2d00      	cmp	r5, #0
  4010a2:	d1c1      	bne.n	401028 <xQueueReceive+0x60>
                if( xTicksToWait == ( TickType_t ) 0 )
  4010a4:	9b01      	ldr	r3, [sp, #4]
  4010a6:	2b00      	cmp	r3, #0
  4010a8:	d0dd      	beq.n	401066 <xQueueReceive+0x9e>
                else if( xEntryTimeSet == pdFALSE )
  4010aa:	f1b8 0f00 	cmp.w	r8, #0
  4010ae:	d0de      	beq.n	40106e <xQueueReceive+0xa6>
        taskEXIT_CRITICAL();
  4010b0:	f001 f822 	bl	4020f8 <vPortExitCritical>
        vTaskSuspendAll();
  4010b4:	f000 fa36 	bl	401524 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
  4010b8:	f000 fffc 	bl	4020b4 <vPortEnterCritical>
  4010bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4010c0:	b25b      	sxtb	r3, r3
  4010c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  4010c6:	bf08      	it	eq
  4010c8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
  4010cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4010d0:	b25b      	sxtb	r3, r3
  4010d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  4010d6:	bf08      	it	eq
  4010d8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
  4010dc:	f001 f80c 	bl	4020f8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4010e0:	a901      	add	r1, sp, #4
  4010e2:	a802      	add	r0, sp, #8
  4010e4:	f000 fd3e 	bl	401b64 <xTaskCheckForTimeOut>
  4010e8:	2800      	cmp	r0, #0
  4010ea:	d1ca      	bne.n	401082 <xQueueReceive+0xba>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4010ec:	4620      	mov	r0, r4
  4010ee:	f7ff fd18 	bl	400b22 <prvIsQueueEmpty>
  4010f2:	2800      	cmp	r0, #0
  4010f4:	d0bf      	beq.n	401076 <xQueueReceive+0xae>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010f6:	9901      	ldr	r1, [sp, #4]
  4010f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010fc:	f000 fc6e 	bl	4019dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
  401100:	4620      	mov	r0, r4
  401102:	f7ff fdb3 	bl	400c6c <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
  401106:	f000 fb03 	bl	401710 <xTaskResumeAll>
  40110a:	2800      	cmp	r0, #0
  40110c:	d1c3      	bne.n	401096 <xQueueReceive+0xce>
                    portYIELD_WITHIN_API();
  40110e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401116:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  40111a:	f3bf 8f4f 	dsb	sy
  40111e:	f3bf 8f6f 	isb	sy
  401122:	e7b8      	b.n	401096 <xQueueReceive+0xce>
                return errQUEUE_EMPTY;
  401124:	2000      	movs	r0, #0
  401126:	e78a      	b.n	40103e <xQueueReceive+0x76>

00401128 <vQueueWaitForMessageRestricted>:
    {
  401128:	b570      	push	{r4, r5, r6, lr}
  40112a:	4604      	mov	r4, r0
  40112c:	460d      	mov	r5, r1
  40112e:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  401130:	f000 ffc0 	bl	4020b4 <vPortEnterCritical>
  401134:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401138:	b25b      	sxtb	r3, r3
  40113a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  40113e:	bf04      	itt	eq
  401140:	2300      	moveq	r3, #0
  401142:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  401146:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40114a:	b25b      	sxtb	r3, r3
  40114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  401150:	bf04      	itt	eq
  401152:	2300      	moveq	r3, #0
  401154:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  401158:	f000 ffce 	bl	4020f8 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40115c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40115e:	b11b      	cbz	r3, 401168 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  401160:	4620      	mov	r0, r4
  401162:	f7ff fd83 	bl	400c6c <prvUnlockQueue>
    }
  401166:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401168:	4632      	mov	r2, r6
  40116a:	4629      	mov	r1, r5
  40116c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401170:	f000 fc4c 	bl	401a0c <vTaskPlaceOnEventListRestricted>
  401174:	e7f4      	b.n	401160 <vQueueWaitForMessageRestricted+0x38>
	...

00401178 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401178:	4b07      	ldr	r3, [pc, #28]	; (401198 <prvResetNextTaskUnblockTime+0x20>)
  40117a:	681b      	ldr	r3, [r3, #0]
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	b923      	cbnz	r3, 40118a <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
  401180:	4b06      	ldr	r3, [pc, #24]	; (40119c <prvResetNextTaskUnblockTime+0x24>)
  401182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401186:	601a      	str	r2, [r3, #0]
  401188:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  40118a:	4b03      	ldr	r3, [pc, #12]	; (401198 <prvResetNextTaskUnblockTime+0x20>)
  40118c:	681b      	ldr	r3, [r3, #0]
  40118e:	68db      	ldr	r3, [r3, #12]
  401190:	681a      	ldr	r2, [r3, #0]
  401192:	4b02      	ldr	r3, [pc, #8]	; (40119c <prvResetNextTaskUnblockTime+0x24>)
  401194:	601a      	str	r2, [r3, #0]
    }
}
  401196:	4770      	bx	lr
  401198:	20000544 	.word	0x20000544
  40119c:	200004dc 	.word	0x200004dc

004011a0 <prvIdleTask>:
{
  4011a0:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4011a2:	4d17      	ldr	r5, [pc, #92]	; (401200 <prvIdleTask+0x60>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4011a4:	4f17      	ldr	r7, [pc, #92]	; (401204 <prvIdleTask+0x64>)
                --uxCurrentNumberOfTasks;
  4011a6:	4e18      	ldr	r6, [pc, #96]	; (401208 <prvIdleTask+0x68>)
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4011a8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40120c <prvIdleTask+0x6c>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4011ac:	682b      	ldr	r3, [r5, #0]
  4011ae:	b1bb      	cbz	r3, 4011e0 <prvIdleTask+0x40>
            taskENTER_CRITICAL();
  4011b0:	f000 ff80 	bl	4020b4 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4011b4:	68fb      	ldr	r3, [r7, #12]
  4011b6:	68dc      	ldr	r4, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4011b8:	1d20      	adds	r0, r4, #4
  4011ba:	f7ff fca0 	bl	400afe <uxListRemove>
                --uxCurrentNumberOfTasks;
  4011be:	6833      	ldr	r3, [r6, #0]
  4011c0:	3b01      	subs	r3, #1
  4011c2:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
  4011c4:	682b      	ldr	r3, [r5, #0]
  4011c6:	3b01      	subs	r3, #1
  4011c8:	602b      	str	r3, [r5, #0]
            taskEXIT_CRITICAL();
  4011ca:	f000 ff95 	bl	4020f8 <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
  4011ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4011d0:	f001 f924 	bl	40241c <vPortFree>
            vPortFree( pxTCB );
  4011d4:	4620      	mov	r0, r4
  4011d6:	f001 f921 	bl	40241c <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4011da:	682b      	ldr	r3, [r5, #0]
  4011dc:	2b00      	cmp	r3, #0
  4011de:	d1e7      	bne.n	4011b0 <prvIdleTask+0x10>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4011e0:	f8d8 3000 	ldr.w	r3, [r8]
  4011e4:	2b01      	cmp	r3, #1
  4011e6:	d9e1      	bls.n	4011ac <prvIdleTask+0xc>
                taskYIELD();
  4011e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  4011ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  4011f4:	f3bf 8f4f 	dsb	sy
  4011f8:	f3bf 8f6f 	isb	sy
  4011fc:	e7d6      	b.n	4011ac <prvIdleTask+0xc>
  4011fe:	bf00      	nop
  401200:	20000514 	.word	0x20000514
  401204:	20000518 	.word	0x20000518
  401208:	200004fc 	.word	0x200004fc
  40120c:	20000570 	.word	0x20000570

00401210 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  401210:	b570      	push	{r4, r5, r6, lr}
  401212:	4604      	mov	r4, r0
  401214:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  401216:	4b23      	ldr	r3, [pc, #140]	; (4012a4 <prvAddCurrentTaskToDelayedList+0x94>)
  401218:	681e      	ldr	r6, [r3, #0]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40121a:	4b23      	ldr	r3, [pc, #140]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  40121c:	6818      	ldr	r0, [r3, #0]
  40121e:	3004      	adds	r0, #4
  401220:	f7ff fc6d 	bl	400afe <uxListRemove>
  401224:	b948      	cbnz	r0, 40123a <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401226:	4b20      	ldr	r3, [pc, #128]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  401228:	681a      	ldr	r2, [r3, #0]
  40122a:	4920      	ldr	r1, [pc, #128]	; (4012ac <prvAddCurrentTaskToDelayedList+0x9c>)
  40122c:	680b      	ldr	r3, [r1, #0]
  40122e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401230:	2201      	movs	r2, #1
  401232:	4082      	lsls	r2, r0
  401234:	ea23 0302 	bic.w	r3, r3, r2
  401238:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40123a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  40123e:	d00d      	beq.n	40125c <prvAddCurrentTaskToDelayedList+0x4c>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
  401240:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401242:	4b19      	ldr	r3, [pc, #100]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  401244:	681b      	ldr	r3, [r3, #0]
  401246:	605c      	str	r4, [r3, #4]

            if( xTimeToWake < xConstTickCount )
  401248:	42a6      	cmp	r6, r4
  40124a:	d91d      	bls.n	401288 <prvAddCurrentTaskToDelayedList+0x78>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40124c:	4b18      	ldr	r3, [pc, #96]	; (4012b0 <prvAddCurrentTaskToDelayedList+0xa0>)
  40124e:	6818      	ldr	r0, [r3, #0]
  401250:	4b15      	ldr	r3, [pc, #84]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  401252:	6819      	ldr	r1, [r3, #0]
  401254:	3104      	adds	r1, #4
  401256:	f7ff fc39 	bl	400acc <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
  40125a:	bd70      	pop	{r4, r5, r6, pc}
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40125c:	2d00      	cmp	r5, #0
  40125e:	d0ef      	beq.n	401240 <prvAddCurrentTaskToDelayedList+0x30>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401260:	4a14      	ldr	r2, [pc, #80]	; (4012b4 <prvAddCurrentTaskToDelayedList+0xa4>)
  401262:	6851      	ldr	r1, [r2, #4]
  401264:	4b10      	ldr	r3, [pc, #64]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  401266:	6818      	ldr	r0, [r3, #0]
  401268:	6081      	str	r1, [r0, #8]
  40126a:	6818      	ldr	r0, [r3, #0]
  40126c:	688c      	ldr	r4, [r1, #8]
  40126e:	60c4      	str	r4, [r0, #12]
  401270:	6818      	ldr	r0, [r3, #0]
  401272:	3004      	adds	r0, #4
  401274:	6060      	str	r0, [r4, #4]
  401276:	6818      	ldr	r0, [r3, #0]
  401278:	3004      	adds	r0, #4
  40127a:	6088      	str	r0, [r1, #8]
  40127c:	681b      	ldr	r3, [r3, #0]
  40127e:	615a      	str	r2, [r3, #20]
  401280:	6813      	ldr	r3, [r2, #0]
  401282:	3301      	adds	r3, #1
  401284:	6013      	str	r3, [r2, #0]
  401286:	e7e8      	b.n	40125a <prvAddCurrentTaskToDelayedList+0x4a>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401288:	4b0b      	ldr	r3, [pc, #44]	; (4012b8 <prvAddCurrentTaskToDelayedList+0xa8>)
  40128a:	6818      	ldr	r0, [r3, #0]
  40128c:	4b06      	ldr	r3, [pc, #24]	; (4012a8 <prvAddCurrentTaskToDelayedList+0x98>)
  40128e:	6819      	ldr	r1, [r3, #0]
  401290:	3104      	adds	r1, #4
  401292:	f7ff fc1b 	bl	400acc <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
  401296:	4b09      	ldr	r3, [pc, #36]	; (4012bc <prvAddCurrentTaskToDelayedList+0xac>)
  401298:	681b      	ldr	r3, [r3, #0]
  40129a:	42a3      	cmp	r3, r4
                    xNextTaskUnblockTime = xTimeToWake;
  40129c:	bf84      	itt	hi
  40129e:	4b07      	ldrhi	r3, [pc, #28]	; (4012bc <prvAddCurrentTaskToDelayedList+0xac>)
  4012a0:	601c      	strhi	r4, [r3, #0]
}
  4012a2:	e7da      	b.n	40125a <prvAddCurrentTaskToDelayedList+0x4a>
  4012a4:	200004f8 	.word	0x200004f8
  4012a8:	200005d4 	.word	0x200005d4
  4012ac:	200004f4 	.word	0x200004f4
  4012b0:	20000540 	.word	0x20000540
  4012b4:	20000500 	.word	0x20000500
  4012b8:	20000544 	.word	0x20000544
  4012bc:	200004dc 	.word	0x200004dc

004012c0 <xTaskCreate>:
    {
  4012c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4012c4:	4607      	mov	r7, r0
  4012c6:	460c      	mov	r4, r1
  4012c8:	4698      	mov	r8, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4012ca:	0095      	lsls	r5, r2, #2
  4012cc:	4628      	mov	r0, r5
  4012ce:	f001 f80d 	bl	4022ec <pvPortMalloc>
            if( pxStack != NULL )
  4012d2:	2800      	cmp	r0, #0
  4012d4:	f000 80bd 	beq.w	401452 <xTaskCreate+0x192>
  4012d8:	4681      	mov	r9, r0
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4012da:	2050      	movs	r0, #80	; 0x50
  4012dc:	f001 f806 	bl	4022ec <pvPortMalloc>
                if( pxNewTCB != NULL )
  4012e0:	4606      	mov	r6, r0
  4012e2:	2800      	cmp	r0, #0
  4012e4:	f000 80af 	beq.w	401446 <xTaskCreate+0x186>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
  4012e8:	2250      	movs	r2, #80	; 0x50
  4012ea:	2100      	movs	r1, #0
  4012ec:	f001 f9a8 	bl	402640 <memset>
                    pxNewTCB->pxStack = pxStack;
  4012f0:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
    if( pcName != NULL )
  4012f4:	b16c      	cbz	r4, 401312 <xTaskCreate+0x52>
  4012f6:	1e61      	subs	r1, r4, #1
  4012f8:	f106 0333 	add.w	r3, r6, #51	; 0x33
  4012fc:	3409      	adds	r4, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4012fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  401302:	f803 2f01 	strb.w	r2, [r3, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  401306:	b10a      	cbz	r2, 40130c <xTaskCreate+0x4c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401308:	42a1      	cmp	r1, r4
  40130a:	d1f8      	bne.n	4012fe <xTaskCreate+0x3e>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40130c:	2300      	movs	r3, #0
  40130e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
  401312:	9b08      	ldr	r3, [sp, #32]
  401314:	2b04      	cmp	r3, #4
  401316:	d908      	bls.n	40132a <xTaskCreate+0x6a>
  401318:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40131c:	f383 8811 	msr	BASEPRI, r3
  401320:	f3bf 8f6f 	isb	sy
  401324:	f3bf 8f4f 	dsb	sy
  401328:	e7fe      	b.n	401328 <xTaskCreate+0x68>
    pxNewTCB->uxPriority = uxPriority;
  40132a:	9b08      	ldr	r3, [sp, #32]
  40132c:	62f3      	str	r3, [r6, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
  40132e:	6433      	str	r3, [r6, #64]	; 0x40
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401330:	1d34      	adds	r4, r6, #4
  401332:	4620      	mov	r0, r4
  401334:	f7ff fbc7 	bl	400ac6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401338:	f106 0018 	add.w	r0, r6, #24
  40133c:	f7ff fbc3 	bl	400ac6 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401340:	6136      	str	r6, [r6, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401342:	9b08      	ldr	r3, [sp, #32]
  401344:	f1c3 0305 	rsb	r3, r3, #5
  401348:	61b3      	str	r3, [r6, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  40134a:	6276      	str	r6, [r6, #36]	; 0x24
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  40134c:	1f28      	subs	r0, r5, #4
  40134e:	4448      	add	r0, r9
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401350:	4642      	mov	r2, r8
  401352:	4639      	mov	r1, r7
  401354:	f020 0007 	bic.w	r0, r0, #7
  401358:	f000 fe84 	bl	402064 <pxPortInitialiseStack>
  40135c:	6030      	str	r0, [r6, #0]
    if( pxCreatedTask != NULL )
  40135e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401360:	b103      	cbz	r3, 401364 <xTaskCreate+0xa4>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401362:	601e      	str	r6, [r3, #0]
    taskENTER_CRITICAL();
  401364:	f000 fea6 	bl	4020b4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
  401368:	4a3e      	ldr	r2, [pc, #248]	; (401464 <xTaskCreate+0x1a4>)
  40136a:	6813      	ldr	r3, [r2, #0]
  40136c:	3301      	adds	r3, #1
  40136e:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  401370:	4b3d      	ldr	r3, [pc, #244]	; (401468 <xTaskCreate+0x1a8>)
  401372:	681b      	ldr	r3, [r3, #0]
  401374:	2b00      	cmp	r3, #0
  401376:	d042      	beq.n	4013fe <xTaskCreate+0x13e>
            if( xSchedulerRunning == pdFALSE )
  401378:	4b3c      	ldr	r3, [pc, #240]	; (40146c <xTaskCreate+0x1ac>)
  40137a:	681b      	ldr	r3, [r3, #0]
  40137c:	b93b      	cbnz	r3, 40138e <xTaskCreate+0xce>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40137e:	4b3a      	ldr	r3, [pc, #232]	; (401468 <xTaskCreate+0x1a8>)
  401380:	681b      	ldr	r3, [r3, #0]
  401382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401384:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  401386:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  401388:	bf9c      	itt	ls
  40138a:	4b37      	ldrls	r3, [pc, #220]	; (401468 <xTaskCreate+0x1a8>)
  40138c:	601e      	strls	r6, [r3, #0]
        uxTaskNumber++;
  40138e:	4a38      	ldr	r2, [pc, #224]	; (401470 <xTaskCreate+0x1b0>)
  401390:	6813      	ldr	r3, [r2, #0]
  401392:	3301      	adds	r3, #1
  401394:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  401396:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  401398:	4936      	ldr	r1, [pc, #216]	; (401474 <xTaskCreate+0x1b4>)
  40139a:	6808      	ldr	r0, [r1, #0]
  40139c:	2201      	movs	r2, #1
  40139e:	409a      	lsls	r2, r3
  4013a0:	4302      	orrs	r2, r0
  4013a2:	600a      	str	r2, [r1, #0]
  4013a4:	4a34      	ldr	r2, [pc, #208]	; (401478 <xTaskCreate+0x1b8>)
  4013a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4013aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4013ae:	685b      	ldr	r3, [r3, #4]
  4013b0:	60b3      	str	r3, [r6, #8]
  4013b2:	6899      	ldr	r1, [r3, #8]
  4013b4:	60f1      	str	r1, [r6, #12]
  4013b6:	604c      	str	r4, [r1, #4]
  4013b8:	609c      	str	r4, [r3, #8]
  4013ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  4013bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4013c0:	0088      	lsls	r0, r1, #2
  4013c2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4013c6:	6171      	str	r1, [r6, #20]
  4013c8:	5811      	ldr	r1, [r2, r0]
  4013ca:	3101      	adds	r1, #1
  4013cc:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
  4013ce:	f000 fe93 	bl	4020f8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
  4013d2:	4b26      	ldr	r3, [pc, #152]	; (40146c <xTaskCreate+0x1ac>)
  4013d4:	681b      	ldr	r3, [r3, #0]
  4013d6:	2b00      	cmp	r3, #0
  4013d8:	d03f      	beq.n	40145a <xTaskCreate+0x19a>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4013da:	4b23      	ldr	r3, [pc, #140]	; (401468 <xTaskCreate+0x1a8>)
  4013dc:	681b      	ldr	r3, [r3, #0]
  4013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4013e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  4013e2:	429a      	cmp	r2, r3
  4013e4:	d23b      	bcs.n	40145e <xTaskCreate+0x19e>
            taskYIELD_IF_USING_PREEMPTION();
  4013e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  4013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  4013f2:	f3bf 8f4f 	dsb	sy
  4013f6:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  4013fa:	2001      	movs	r0, #1
  4013fc:	e02b      	b.n	401456 <xTaskCreate+0x196>
            pxCurrentTCB = pxNewTCB;
  4013fe:	4b1a      	ldr	r3, [pc, #104]	; (401468 <xTaskCreate+0x1a8>)
  401400:	601e      	str	r6, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401402:	6813      	ldr	r3, [r2, #0]
  401404:	2b01      	cmp	r3, #1
  401406:	d1c2      	bne.n	40138e <xTaskCreate+0xce>
  401408:	4d1b      	ldr	r5, [pc, #108]	; (401478 <xTaskCreate+0x1b8>)
  40140a:	f105 0764 	add.w	r7, r5, #100	; 0x64
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40140e:	4628      	mov	r0, r5
  401410:	f7ff fb4e 	bl	400ab0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401414:	3514      	adds	r5, #20
  401416:	42bd      	cmp	r5, r7
  401418:	d1f9      	bne.n	40140e <xTaskCreate+0x14e>
    vListInitialise( &xDelayedTaskList1 );
  40141a:	4f18      	ldr	r7, [pc, #96]	; (40147c <xTaskCreate+0x1bc>)
  40141c:	4638      	mov	r0, r7
  40141e:	f7ff fb47 	bl	400ab0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
  401422:	4d17      	ldr	r5, [pc, #92]	; (401480 <xTaskCreate+0x1c0>)
  401424:	4628      	mov	r0, r5
  401426:	f7ff fb43 	bl	400ab0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
  40142a:	4816      	ldr	r0, [pc, #88]	; (401484 <xTaskCreate+0x1c4>)
  40142c:	f7ff fb40 	bl	400ab0 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
  401430:	4815      	ldr	r0, [pc, #84]	; (401488 <xTaskCreate+0x1c8>)
  401432:	f7ff fb3d 	bl	400ab0 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
  401436:	4815      	ldr	r0, [pc, #84]	; (40148c <xTaskCreate+0x1cc>)
  401438:	f7ff fb3a 	bl	400ab0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
  40143c:	4b14      	ldr	r3, [pc, #80]	; (401490 <xTaskCreate+0x1d0>)
  40143e:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401440:	4b14      	ldr	r3, [pc, #80]	; (401494 <xTaskCreate+0x1d4>)
  401442:	601d      	str	r5, [r3, #0]
}
  401444:	e7a3      	b.n	40138e <xTaskCreate+0xce>
                    vPortFreeStack( pxStack );
  401446:	4648      	mov	r0, r9
  401448:	f000 ffe8 	bl	40241c <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401450:	e001      	b.n	401456 <xTaskCreate+0x196>
  401452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  401456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            xReturn = pdPASS;
  40145a:	2001      	movs	r0, #1
  40145c:	e7fb      	b.n	401456 <xTaskCreate+0x196>
  40145e:	2001      	movs	r0, #1
        return xReturn;
  401460:	e7f9      	b.n	401456 <xTaskCreate+0x196>
  401462:	bf00      	nop
  401464:	200004fc 	.word	0x200004fc
  401468:	200005d4 	.word	0x200005d4
  40146c:	200004f0 	.word	0x200004f0
  401470:	200004e0 	.word	0x200004e0
  401474:	200004f4 	.word	0x200004f4
  401478:	20000570 	.word	0x20000570
  40147c:	2000055c 	.word	0x2000055c
  401480:	20000548 	.word	0x20000548
  401484:	2000052c 	.word	0x2000052c
  401488:	20000518 	.word	0x20000518
  40148c:	20000500 	.word	0x20000500
  401490:	20000544 	.word	0x20000544
  401494:	20000540 	.word	0x20000540

00401498 <vTaskStartScheduler>:
{
  401498:	b500      	push	{lr}
  40149a:	b083      	sub	sp, #12
        xReturn = xTaskCreate( prvIdleTask,
  40149c:	4b1a      	ldr	r3, [pc, #104]	; (401508 <vTaskStartScheduler+0x70>)
  40149e:	9301      	str	r3, [sp, #4]
  4014a0:	2300      	movs	r3, #0
  4014a2:	9300      	str	r3, [sp, #0]
  4014a4:	2282      	movs	r2, #130	; 0x82
  4014a6:	4919      	ldr	r1, [pc, #100]	; (40150c <vTaskStartScheduler+0x74>)
  4014a8:	4819      	ldr	r0, [pc, #100]	; (401510 <vTaskStartScheduler+0x78>)
  4014aa:	f7ff ff09 	bl	4012c0 <xTaskCreate>
        if( xReturn == pdPASS )
  4014ae:	2801      	cmp	r0, #1
  4014b0:	d007      	beq.n	4014c2 <vTaskStartScheduler+0x2a>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4014b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  4014b6:	d01d      	beq.n	4014f4 <vTaskStartScheduler+0x5c>
    ( void ) uxTopUsedPriority;
  4014b8:	4b16      	ldr	r3, [pc, #88]	; (401514 <vTaskStartScheduler+0x7c>)
  4014ba:	681b      	ldr	r3, [r3, #0]
}
  4014bc:	b003      	add	sp, #12
  4014be:	f85d fb04 	ldr.w	pc, [sp], #4
            xReturn = xTimerCreateTimerTask();
  4014c2:	f000 fd77 	bl	401fb4 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
  4014c6:	2801      	cmp	r0, #1
  4014c8:	d1f3      	bne.n	4014b2 <vTaskStartScheduler+0x1a>
  4014ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4014ce:	f383 8811 	msr	BASEPRI, r3
  4014d2:	f3bf 8f6f 	isb	sy
  4014d6:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  4014da:	4b0f      	ldr	r3, [pc, #60]	; (401518 <vTaskStartScheduler+0x80>)
  4014dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4014e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  4014e2:	4b0e      	ldr	r3, [pc, #56]	; (40151c <vTaskStartScheduler+0x84>)
  4014e4:	2201      	movs	r2, #1
  4014e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  4014e8:	4b0d      	ldr	r3, [pc, #52]	; (401520 <vTaskStartScheduler+0x88>)
  4014ea:	2200      	movs	r2, #0
  4014ec:	601a      	str	r2, [r3, #0]
        xPortStartScheduler();
  4014ee:	f000 fe6b 	bl	4021c8 <xPortStartScheduler>
  4014f2:	e7e1      	b.n	4014b8 <vTaskStartScheduler+0x20>
  4014f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4014f8:	f383 8811 	msr	BASEPRI, r3
  4014fc:	f3bf 8f6f 	isb	sy
  401500:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401504:	e7fe      	b.n	401504 <vTaskStartScheduler+0x6c>
  401506:	bf00      	nop
  401508:	200004d8 	.word	0x200004d8
  40150c:	0040278c 	.word	0x0040278c
  401510:	004011a1 	.word	0x004011a1
  401514:	20000004 	.word	0x20000004
  401518:	200004dc 	.word	0x200004dc
  40151c:	200004f0 	.word	0x200004f0
  401520:	200004f8 	.word	0x200004f8

00401524 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  401524:	4a02      	ldr	r2, [pc, #8]	; (401530 <vTaskSuspendAll+0xc>)
  401526:	6813      	ldr	r3, [r2, #0]
  401528:	3301      	adds	r3, #1
  40152a:	6013      	str	r3, [r2, #0]
}
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop
  401530:	200004d4 	.word	0x200004d4

00401534 <xTaskGetTickCount>:
        xTicks = xTickCount;
  401534:	4b01      	ldr	r3, [pc, #4]	; (40153c <xTaskGetTickCount+0x8>)
  401536:	6818      	ldr	r0, [r3, #0]
}
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	200004f8 	.word	0x200004f8

00401540 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
  401540:	4b01      	ldr	r3, [pc, #4]	; (401548 <uxTaskGetNumberOfTasks+0x8>)
  401542:	6818      	ldr	r0, [r3, #0]
}
  401544:	4770      	bx	lr
  401546:	bf00      	nop
  401548:	200004fc 	.word	0x200004fc

0040154c <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40154c:	4b65      	ldr	r3, [pc, #404]	; (4016e4 <xTaskIncrementTick+0x198>)
  40154e:	681b      	ldr	r3, [r3, #0]
  401550:	2b00      	cmp	r3, #0
  401552:	f040 80c1 	bne.w	4016d8 <xTaskIncrementTick+0x18c>
{
  401556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40155a:	4b63      	ldr	r3, [pc, #396]	; (4016e8 <xTaskIncrementTick+0x19c>)
  40155c:	681c      	ldr	r4, [r3, #0]
  40155e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
  401560:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401562:	b9c4      	cbnz	r4, 401596 <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
  401564:	4b61      	ldr	r3, [pc, #388]	; (4016ec <xTaskIncrementTick+0x1a0>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	681b      	ldr	r3, [r3, #0]
  40156a:	b143      	cbz	r3, 40157e <xTaskIncrementTick+0x32>
  40156c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401570:	f383 8811 	msr	BASEPRI, r3
  401574:	f3bf 8f6f 	isb	sy
  401578:	f3bf 8f4f 	dsb	sy
  40157c:	e7fe      	b.n	40157c <xTaskIncrementTick+0x30>
  40157e:	4a5b      	ldr	r2, [pc, #364]	; (4016ec <xTaskIncrementTick+0x1a0>)
  401580:	6811      	ldr	r1, [r2, #0]
  401582:	4b5b      	ldr	r3, [pc, #364]	; (4016f0 <xTaskIncrementTick+0x1a4>)
  401584:	6818      	ldr	r0, [r3, #0]
  401586:	6010      	str	r0, [r2, #0]
  401588:	6019      	str	r1, [r3, #0]
  40158a:	4a5a      	ldr	r2, [pc, #360]	; (4016f4 <xTaskIncrementTick+0x1a8>)
  40158c:	6813      	ldr	r3, [r2, #0]
  40158e:	3301      	adds	r3, #1
  401590:	6013      	str	r3, [r2, #0]
  401592:	f7ff fdf1 	bl	401178 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
  401596:	4b58      	ldr	r3, [pc, #352]	; (4016f8 <xTaskIncrementTick+0x1ac>)
  401598:	681b      	ldr	r3, [r3, #0]
  40159a:	42a3      	cmp	r3, r4
  40159c:	f200 8089 	bhi.w	4016b2 <xTaskIncrementTick+0x166>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015a0:	4b52      	ldr	r3, [pc, #328]	; (4016ec <xTaskIncrementTick+0x1a0>)
  4015a2:	681b      	ldr	r3, [r3, #0]
  4015a4:	681b      	ldr	r3, [r3, #0]
  4015a6:	b14b      	cbz	r3, 4015bc <xTaskIncrementTick+0x70>
    BaseType_t xSwitchRequired = pdFALSE;
  4015a8:	2000      	movs	r0, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4015aa:	4950      	ldr	r1, [pc, #320]	; (4016ec <xTaskIncrementTick+0x1a0>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4015ac:	4605      	mov	r5, r0
                    prvAddTaskToReadyList( pxTCB );
  4015ae:	f8df c14c 	ldr.w	ip, [pc, #332]	; 4016fc <xTaskIncrementTick+0x1b0>
  4015b2:	2601      	movs	r6, #1
  4015b4:	4a52      	ldr	r2, [pc, #328]	; (401700 <xTaskIncrementTick+0x1b4>)
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  4015b6:	f8df e14c 	ldr.w	lr, [pc, #332]	; 401704 <xTaskIncrementTick+0x1b8>
  4015ba:	e03a      	b.n	401632 <xTaskIncrementTick+0xe6>
    BaseType_t xSwitchRequired = pdFALSE;
  4015bc:	2000      	movs	r0, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015be:	4b4e      	ldr	r3, [pc, #312]	; (4016f8 <xTaskIncrementTick+0x1ac>)
  4015c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4015c4:	601a      	str	r2, [r3, #0]
                    break;
  4015c6:	e075      	b.n	4016b4 <xTaskIncrementTick+0x168>
                        xNextTaskUnblockTime = xItemValue;
  4015c8:	4b4b      	ldr	r3, [pc, #300]	; (4016f8 <xTaskIncrementTick+0x1ac>)
  4015ca:	601f      	str	r7, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  4015cc:	e072      	b.n	4016b4 <xTaskIncrementTick+0x168>
                    prvAddTaskToReadyList( pxTCB );
  4015ce:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  4015d0:	f8dc a000 	ldr.w	sl, [ip]
  4015d4:	fa06 f907 	lsl.w	r9, r6, r7
  4015d8:	ea49 090a 	orr.w	r9, r9, sl
  4015dc:	f8cc 9000 	str.w	r9, [ip]
  4015e0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4015e4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  4015e8:	687f      	ldr	r7, [r7, #4]
  4015ea:	609f      	str	r7, [r3, #8]
  4015ec:	f8d7 9008 	ldr.w	r9, [r7, #8]
  4015f0:	f8c3 900c 	str.w	r9, [r3, #12]
  4015f4:	f8c9 8004 	str.w	r8, [r9, #4]
  4015f8:	f8c7 8008 	str.w	r8, [r7, #8]
  4015fc:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  4015fe:	eb07 0887 	add.w	r8, r7, r7, lsl #2
  401602:	eb02 0988 	add.w	r9, r2, r8, lsl #2
  401606:	f8c3 9014 	str.w	r9, [r3, #20]
  40160a:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
  40160e:	f108 0801 	add.w	r8, r8, #1
  401612:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401616:	f842 8027 	str.w	r8, [r2, r7, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40161a:	f8de 8000 	ldr.w	r8, [lr]
  40161e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  401620:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
                            xSwitchRequired = pdTRUE;
  401624:	429f      	cmp	r7, r3
  401626:	bf88      	it	hi
  401628:	2001      	movhi	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40162a:	680b      	ldr	r3, [r1, #0]
  40162c:	681b      	ldr	r3, [r3, #0]
  40162e:	2b00      	cmp	r3, #0
  401630:	d0c5      	beq.n	4015be <xTaskIncrementTick+0x72>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401632:	680b      	ldr	r3, [r1, #0]
  401634:	68db      	ldr	r3, [r3, #12]
  401636:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401638:	685f      	ldr	r7, [r3, #4]
                    if( xConstTickCount < xItemValue )
  40163a:	42bc      	cmp	r4, r7
  40163c:	d3c4      	bcc.n	4015c8 <xTaskIncrementTick+0x7c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  40163e:	695f      	ldr	r7, [r3, #20]
  401640:	f8d3 800c 	ldr.w	r8, [r3, #12]
  401644:	f8d3 9008 	ldr.w	r9, [r3, #8]
  401648:	f8c9 8008 	str.w	r8, [r9, #8]
  40164c:	f8d3 9008 	ldr.w	r9, [r3, #8]
  401650:	f8c8 9004 	str.w	r9, [r8, #4]
  401654:	f103 0804 	add.w	r8, r3, #4
  401658:	f8d7 9004 	ldr.w	r9, [r7, #4]
  40165c:	45c1      	cmp	r9, r8
  40165e:	bf04      	itt	eq
  401660:	f8d3 900c 	ldreq.w	r9, [r3, #12]
  401664:	f8c7 9004 	streq.w	r9, [r7, #4]
  401668:	615d      	str	r5, [r3, #20]
  40166a:	f8d7 9000 	ldr.w	r9, [r7]
  40166e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  401672:	f8c7 9000 	str.w	r9, [r7]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401676:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  40167a:	f1b9 0f00 	cmp.w	r9, #0
  40167e:	d0a6      	beq.n	4015ce <xTaskIncrementTick+0x82>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401680:	6a1f      	ldr	r7, [r3, #32]
  401682:	f8d3 a01c 	ldr.w	sl, [r3, #28]
  401686:	f8ca 7008 	str.w	r7, [sl, #8]
  40168a:	f8d3 a01c 	ldr.w	sl, [r3, #28]
  40168e:	f8c7 a004 	str.w	sl, [r7, #4]
  401692:	f103 0718 	add.w	r7, r3, #24
  401696:	f8d9 a004 	ldr.w	sl, [r9, #4]
  40169a:	45ba      	cmp	sl, r7
  40169c:	bf04      	itt	eq
  40169e:	6a1f      	ldreq	r7, [r3, #32]
  4016a0:	f8c9 7004 	streq.w	r7, [r9, #4]
  4016a4:	629d      	str	r5, [r3, #40]	; 0x28
  4016a6:	f8d9 7000 	ldr.w	r7, [r9]
  4016aa:	3f01      	subs	r7, #1
  4016ac:	f8c9 7000 	str.w	r7, [r9]
  4016b0:	e78d      	b.n	4015ce <xTaskIncrementTick+0x82>
    BaseType_t xSwitchRequired = pdFALSE;
  4016b2:	2000      	movs	r0, #0
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4016b4:	4b13      	ldr	r3, [pc, #76]	; (401704 <xTaskIncrementTick+0x1b8>)
  4016b6:	681b      	ldr	r3, [r3, #0]
  4016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4016be:	009b      	lsls	r3, r3, #2
  4016c0:	4a0f      	ldr	r2, [pc, #60]	; (401700 <xTaskIncrementTick+0x1b4>)
  4016c2:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
  4016c4:	2b02      	cmp	r3, #2
  4016c6:	bf28      	it	cs
  4016c8:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
  4016ca:	4b0f      	ldr	r3, [pc, #60]	; (401708 <xTaskIncrementTick+0x1bc>)
  4016cc:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
  4016ce:	2b00      	cmp	r3, #0
  4016d0:	bf18      	it	ne
  4016d2:	2001      	movne	r0, #1
}
  4016d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++xPendedTicks;
  4016d8:	4a0c      	ldr	r2, [pc, #48]	; (40170c <xTaskIncrementTick+0x1c0>)
  4016da:	6813      	ldr	r3, [r2, #0]
  4016dc:	3301      	adds	r3, #1
  4016de:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
  4016e0:	2000      	movs	r0, #0
}
  4016e2:	4770      	bx	lr
  4016e4:	200004d4 	.word	0x200004d4
  4016e8:	200004f8 	.word	0x200004f8
  4016ec:	20000544 	.word	0x20000544
  4016f0:	20000540 	.word	0x20000540
  4016f4:	200004e4 	.word	0x200004e4
  4016f8:	200004dc 	.word	0x200004dc
  4016fc:	200004f4 	.word	0x200004f4
  401700:	20000570 	.word	0x20000570
  401704:	200005d4 	.word	0x200005d4
  401708:	200004e8 	.word	0x200004e8
  40170c:	200004ec 	.word	0x200004ec

00401710 <xTaskResumeAll>:
{
  401710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( uxSchedulerSuspended );
  401714:	4b59      	ldr	r3, [pc, #356]	; (40187c <xTaskResumeAll+0x16c>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	b943      	cbnz	r3, 40172c <xTaskResumeAll+0x1c>
  40171a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40171e:	f383 8811 	msr	BASEPRI, r3
  401722:	f3bf 8f6f 	isb	sy
  401726:	f3bf 8f4f 	dsb	sy
  40172a:	e7fe      	b.n	40172a <xTaskResumeAll+0x1a>
    taskENTER_CRITICAL();
  40172c:	f000 fcc2 	bl	4020b4 <vPortEnterCritical>
        --uxSchedulerSuspended;
  401730:	4b52      	ldr	r3, [pc, #328]	; (40187c <xTaskResumeAll+0x16c>)
  401732:	681a      	ldr	r2, [r3, #0]
  401734:	3a01      	subs	r2, #1
  401736:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401738:	681b      	ldr	r3, [r3, #0]
  40173a:	2b00      	cmp	r3, #0
  40173c:	f040 8096 	bne.w	40186c <xTaskResumeAll+0x15c>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401740:	4b4f      	ldr	r3, [pc, #316]	; (401880 <xTaskResumeAll+0x170>)
  401742:	681b      	ldr	r3, [r3, #0]
  401744:	2b00      	cmp	r3, #0
  401746:	f000 8097 	beq.w	401878 <xTaskResumeAll+0x168>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40174a:	4b4e      	ldr	r3, [pc, #312]	; (401884 <xTaskResumeAll+0x174>)
  40174c:	681b      	ldr	r3, [r3, #0]
  40174e:	2b00      	cmp	r3, #0
  401750:	d06c      	beq.n	40182c <xTaskResumeAll+0x11c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401752:	f8df c130 	ldr.w	ip, [pc, #304]	; 401884 <xTaskResumeAll+0x174>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401756:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
  401758:	494b      	ldr	r1, [pc, #300]	; (401888 <xTaskResumeAll+0x178>)
  40175a:	f04f 0e01 	mov.w	lr, #1
  40175e:	4a4b      	ldr	r2, [pc, #300]	; (40188c <xTaskResumeAll+0x17c>)
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  401760:	4c4b      	ldr	r4, [pc, #300]	; (401890 <xTaskResumeAll+0x180>)
                        xYieldPending = pdTRUE;
  401762:	4d4c      	ldr	r5, [pc, #304]	; (401894 <xTaskResumeAll+0x184>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401764:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401768:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40176a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  40176c:	6a1f      	ldr	r7, [r3, #32]
  40176e:	f8d3 801c 	ldr.w	r8, [r3, #28]
  401772:	f8c8 7008 	str.w	r7, [r8, #8]
  401776:	f8d3 801c 	ldr.w	r8, [r3, #28]
  40177a:	f8c7 8004 	str.w	r8, [r7, #4]
  40177e:	f103 0718 	add.w	r7, r3, #24
  401782:	f8d6 8004 	ldr.w	r8, [r6, #4]
  401786:	45b8      	cmp	r8, r7
  401788:	bf04      	itt	eq
  40178a:	6a1f      	ldreq	r7, [r3, #32]
  40178c:	6077      	streq	r7, [r6, #4]
  40178e:	6298      	str	r0, [r3, #40]	; 0x28
  401790:	6837      	ldr	r7, [r6, #0]
  401792:	3f01      	subs	r7, #1
  401794:	6037      	str	r7, [r6, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401796:	695e      	ldr	r6, [r3, #20]
  401798:	68df      	ldr	r7, [r3, #12]
  40179a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40179e:	f8c8 7008 	str.w	r7, [r8, #8]
  4017a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4017a6:	f8c7 8004 	str.w	r8, [r7, #4]
  4017aa:	1d1f      	adds	r7, r3, #4
  4017ac:	f8d6 8004 	ldr.w	r8, [r6, #4]
  4017b0:	45b8      	cmp	r8, r7
  4017b2:	bf04      	itt	eq
  4017b4:	f8d3 800c 	ldreq.w	r8, [r3, #12]
  4017b8:	f8c6 8004 	streq.w	r8, [r6, #4]
  4017bc:	6158      	str	r0, [r3, #20]
  4017be:	f8d6 8000 	ldr.w	r8, [r6]
  4017c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  4017c6:	f8c6 8000 	str.w	r8, [r6]
                    prvAddTaskToReadyList( pxTCB );
  4017ca:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4017cc:	f8d1 9000 	ldr.w	r9, [r1]
  4017d0:	fa0e f806 	lsl.w	r8, lr, r6
  4017d4:	ea48 0809 	orr.w	r8, r8, r9
  4017d8:	f8c1 8000 	str.w	r8, [r1]
  4017dc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4017e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4017e4:	6876      	ldr	r6, [r6, #4]
  4017e6:	609e      	str	r6, [r3, #8]
  4017e8:	f8d6 8008 	ldr.w	r8, [r6, #8]
  4017ec:	f8c3 800c 	str.w	r8, [r3, #12]
  4017f0:	f8c8 7004 	str.w	r7, [r8, #4]
  4017f4:	60b7      	str	r7, [r6, #8]
  4017f6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4017f8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4017fc:	eb02 0887 	add.w	r8, r2, r7, lsl #2
  401800:	f8c3 8014 	str.w	r8, [r3, #20]
  401804:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
  401808:	3701      	adds	r7, #1
  40180a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40180e:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  401812:	6827      	ldr	r7, [r4, #0]
  401814:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401818:	429e      	cmp	r6, r3
                        xYieldPending = pdTRUE;
  40181a:	bf88      	it	hi
  40181c:	f8c5 e000 	strhi.w	lr, [r5]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401820:	f8dc 3000 	ldr.w	r3, [ip]
  401824:	2b00      	cmp	r3, #0
  401826:	d19d      	bne.n	401764 <xTaskResumeAll+0x54>
                    prvResetNextTaskUnblockTime();
  401828:	f7ff fca6 	bl	401178 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  40182c:	4b1a      	ldr	r3, [pc, #104]	; (401898 <xTaskResumeAll+0x188>)
  40182e:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  401830:	b16c      	cbz	r4, 40184e <xTaskResumeAll+0x13e>
                                xYieldPending = pdTRUE;
  401832:	4e18      	ldr	r6, [pc, #96]	; (401894 <xTaskResumeAll+0x184>)
  401834:	2501      	movs	r5, #1
  401836:	e001      	b.n	40183c <xTaskResumeAll+0x12c>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  401838:	3c01      	subs	r4, #1
  40183a:	d005      	beq.n	401848 <xTaskResumeAll+0x138>
                            if( xTaskIncrementTick() != pdFALSE )
  40183c:	f7ff fe86 	bl	40154c <xTaskIncrementTick>
  401840:	2800      	cmp	r0, #0
  401842:	d0f9      	beq.n	401838 <xTaskResumeAll+0x128>
                                xYieldPending = pdTRUE;
  401844:	6035      	str	r5, [r6, #0]
  401846:	e7f7      	b.n	401838 <xTaskResumeAll+0x128>
                        xPendedTicks = 0;
  401848:	4b13      	ldr	r3, [pc, #76]	; (401898 <xTaskResumeAll+0x188>)
  40184a:	2200      	movs	r2, #0
  40184c:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  40184e:	4b11      	ldr	r3, [pc, #68]	; (401894 <xTaskResumeAll+0x184>)
  401850:	681c      	ldr	r4, [r3, #0]
  401852:	b164      	cbz	r4, 40186e <xTaskResumeAll+0x15e>
                    taskYIELD_IF_USING_PREEMPTION();
  401854:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40185c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401860:	f3bf 8f4f 	dsb	sy
  401864:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
  401868:	2401      	movs	r4, #1
  40186a:	e000      	b.n	40186e <xTaskResumeAll+0x15e>
    BaseType_t xAlreadyYielded = pdFALSE;
  40186c:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  40186e:	f000 fc43 	bl	4020f8 <vPortExitCritical>
}
  401872:	4620      	mov	r0, r4
  401874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  401878:	2400      	movs	r4, #0
  40187a:	e7f8      	b.n	40186e <xTaskResumeAll+0x15e>
  40187c:	200004d4 	.word	0x200004d4
  401880:	200004fc 	.word	0x200004fc
  401884:	2000052c 	.word	0x2000052c
  401888:	200004f4 	.word	0x200004f4
  40188c:	20000570 	.word	0x20000570
  401890:	200005d4 	.word	0x200005d4
  401894:	200004e8 	.word	0x200004e8
  401898:	200004ec 	.word	0x200004ec

0040189c <xTaskDelayUntil>:
    {
  40189c:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxPreviousWakeTime );
  40189e:	b158      	cbz	r0, 4018b8 <xTaskDelayUntil+0x1c>
  4018a0:	460c      	mov	r4, r1
  4018a2:	4605      	mov	r5, r0
        configASSERT( ( xTimeIncrement > 0U ) );
  4018a4:	b989      	cbnz	r1, 4018ca <xTaskDelayUntil+0x2e>
  4018a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4018aa:	f383 8811 	msr	BASEPRI, r3
  4018ae:	f3bf 8f6f 	isb	sy
  4018b2:	f3bf 8f4f 	dsb	sy
  4018b6:	e7fe      	b.n	4018b6 <xTaskDelayUntil+0x1a>
  4018b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4018bc:	f383 8811 	msr	BASEPRI, r3
  4018c0:	f3bf 8f6f 	isb	sy
  4018c4:	f3bf 8f4f 	dsb	sy
        configASSERT( pxPreviousWakeTime );
  4018c8:	e7fe      	b.n	4018c8 <xTaskDelayUntil+0x2c>
        configASSERT( uxSchedulerSuspended == 0 );
  4018ca:	4b1d      	ldr	r3, [pc, #116]	; (401940 <xTaskDelayUntil+0xa4>)
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	b143      	cbz	r3, 4018e2 <xTaskDelayUntil+0x46>
  4018d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4018d4:	f383 8811 	msr	BASEPRI, r3
  4018d8:	f3bf 8f6f 	isb	sy
  4018dc:	f3bf 8f4f 	dsb	sy
  4018e0:	e7fe      	b.n	4018e0 <xTaskDelayUntil+0x44>
        vTaskSuspendAll();
  4018e2:	f7ff fe1f 	bl	401524 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
  4018e6:	4b17      	ldr	r3, [pc, #92]	; (401944 <xTaskDelayUntil+0xa8>)
  4018e8:	6818      	ldr	r0, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
  4018ea:	682b      	ldr	r3, [r5, #0]
  4018ec:	441c      	add	r4, r3
            if( xConstTickCount < *pxPreviousWakeTime )
  4018ee:	4283      	cmp	r3, r0
  4018f0:	d909      	bls.n	401906 <xTaskDelayUntil+0x6a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  4018f2:	42a3      	cmp	r3, r4
  4018f4:	d802      	bhi.n	4018fc <xTaskDelayUntil+0x60>
            *pxPreviousWakeTime = xTimeToWake;
  4018f6:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  4018f8:	2400      	movs	r4, #0
  4018fa:	e011      	b.n	401920 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  4018fc:	42a0      	cmp	r0, r4
  4018fe:	d309      	bcc.n	401914 <xTaskDelayUntil+0x78>
            *pxPreviousWakeTime = xTimeToWake;
  401900:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401902:	2400      	movs	r4, #0
  401904:	e00c      	b.n	401920 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
  401906:	42a3      	cmp	r3, r4
  401908:	d804      	bhi.n	401914 <xTaskDelayUntil+0x78>
  40190a:	42a0      	cmp	r0, r4
  40190c:	d302      	bcc.n	401914 <xTaskDelayUntil+0x78>
            *pxPreviousWakeTime = xTimeToWake;
  40190e:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401910:	2400      	movs	r4, #0
  401912:	e005      	b.n	401920 <xTaskDelayUntil+0x84>
            *pxPreviousWakeTime = xTimeToWake;
  401914:	602c      	str	r4, [r5, #0]
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
  401916:	2100      	movs	r1, #0
  401918:	1a20      	subs	r0, r4, r0
  40191a:	f7ff fc79 	bl	401210 <prvAddCurrentTaskToDelayedList>
  40191e:	2401      	movs	r4, #1
        xAlreadyYielded = xTaskResumeAll();
  401920:	f7ff fef6 	bl	401710 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
  401924:	b948      	cbnz	r0, 40193a <xTaskDelayUntil+0x9e>
            portYIELD_WITHIN_API();
  401926:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  40192a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40192e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401932:	f3bf 8f4f 	dsb	sy
  401936:	f3bf 8f6f 	isb	sy
    }
  40193a:	4620      	mov	r0, r4
  40193c:	bd38      	pop	{r3, r4, r5, pc}
  40193e:	bf00      	nop
  401940:	200004d4 	.word	0x200004d4
  401944:	200004f8 	.word	0x200004f8

00401948 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401948:	4b1f      	ldr	r3, [pc, #124]	; (4019c8 <vTaskSwitchContext+0x80>)
  40194a:	681b      	ldr	r3, [r3, #0]
  40194c:	b11b      	cbz	r3, 401956 <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
  40194e:	4b1f      	ldr	r3, [pc, #124]	; (4019cc <vTaskSwitchContext+0x84>)
  401950:	2201      	movs	r2, #1
  401952:	601a      	str	r2, [r3, #0]
  401954:	4770      	bx	lr
        xYieldPending = pdFALSE;
  401956:	4b1d      	ldr	r3, [pc, #116]	; (4019cc <vTaskSwitchContext+0x84>)
  401958:	2200      	movs	r2, #0
  40195a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40195c:	4b1c      	ldr	r3, [pc, #112]	; (4019d0 <vTaskSwitchContext+0x88>)
  40195e:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401960:	fab3 f383 	clz	r3, r3
  401964:	b2db      	uxtb	r3, r3
  401966:	f1c3 031f 	rsb	r3, r3, #31
  40196a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40196e:	0092      	lsls	r2, r2, #2
  401970:	4918      	ldr	r1, [pc, #96]	; (4019d4 <vTaskSwitchContext+0x8c>)
  401972:	588a      	ldr	r2, [r1, r2]
  401974:	b942      	cbnz	r2, 401988 <vTaskSwitchContext+0x40>
        __asm volatile
  401976:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40197a:	f383 8811 	msr	BASEPRI, r3
  40197e:	f3bf 8f6f 	isb	sy
  401982:	f3bf 8f4f 	dsb	sy
  401986:	e7fe      	b.n	401986 <vTaskSwitchContext+0x3e>
  401988:	4a12      	ldr	r2, [pc, #72]	; (4019d4 <vTaskSwitchContext+0x8c>)
  40198a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40198e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  401992:	6848      	ldr	r0, [r1, #4]
  401994:	6840      	ldr	r0, [r0, #4]
  401996:	6048      	str	r0, [r1, #4]
  401998:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40199c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4019a0:	3208      	adds	r2, #8
  4019a2:	4290      	cmp	r0, r2
  4019a4:	d009      	beq.n	4019ba <vTaskSwitchContext+0x72>
  4019a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4019aa:	4a0a      	ldr	r2, [pc, #40]	; (4019d4 <vTaskSwitchContext+0x8c>)
  4019ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4019b0:	685b      	ldr	r3, [r3, #4]
  4019b2:	68da      	ldr	r2, [r3, #12]
  4019b4:	4b08      	ldr	r3, [pc, #32]	; (4019d8 <vTaskSwitchContext+0x90>)
  4019b6:	601a      	str	r2, [r3, #0]
}
  4019b8:	4770      	bx	lr
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4019ba:	4a06      	ldr	r2, [pc, #24]	; (4019d4 <vTaskSwitchContext+0x8c>)
  4019bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4019c0:	68d1      	ldr	r1, [r2, #12]
  4019c2:	6051      	str	r1, [r2, #4]
  4019c4:	e7ef      	b.n	4019a6 <vTaskSwitchContext+0x5e>
  4019c6:	bf00      	nop
  4019c8:	200004d4 	.word	0x200004d4
  4019cc:	200004e8 	.word	0x200004e8
  4019d0:	200004f4 	.word	0x200004f4
  4019d4:	20000570 	.word	0x20000570
  4019d8:	200005d4 	.word	0x200005d4

004019dc <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
  4019dc:	b158      	cbz	r0, 4019f6 <vTaskPlaceOnEventList+0x1a>
{
  4019de:	b510      	push	{r4, lr}
  4019e0:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019e2:	4a09      	ldr	r2, [pc, #36]	; (401a08 <vTaskPlaceOnEventList+0x2c>)
  4019e4:	6811      	ldr	r1, [r2, #0]
  4019e6:	3118      	adds	r1, #24
  4019e8:	f7ff f870 	bl	400acc <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4019ec:	2101      	movs	r1, #1
  4019ee:	4620      	mov	r0, r4
  4019f0:	f7ff fc0e 	bl	401210 <prvAddCurrentTaskToDelayedList>
}
  4019f4:	bd10      	pop	{r4, pc}
  4019f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4019fa:	f383 8811 	msr	BASEPRI, r3
  4019fe:	f3bf 8f6f 	isb	sy
  401a02:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
  401a06:	e7fe      	b.n	401a06 <vTaskPlaceOnEventList+0x2a>
  401a08:	200005d4 	.word	0x200005d4

00401a0c <vTaskPlaceOnEventListRestricted>:
    {
  401a0c:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
  401a0e:	b1e0      	cbz	r0, 401a4a <vTaskPlaceOnEventListRestricted+0x3e>
  401a10:	468c      	mov	ip, r1
  401a12:	4611      	mov	r1, r2
  401a14:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a16:	6842      	ldr	r2, [r0, #4]
  401a18:	4b10      	ldr	r3, [pc, #64]	; (401a5c <vTaskPlaceOnEventListRestricted+0x50>)
  401a1a:	6818      	ldr	r0, [r3, #0]
  401a1c:	61c2      	str	r2, [r0, #28]
  401a1e:	6818      	ldr	r0, [r3, #0]
  401a20:	6894      	ldr	r4, [r2, #8]
  401a22:	6204      	str	r4, [r0, #32]
  401a24:	6818      	ldr	r0, [r3, #0]
  401a26:	3018      	adds	r0, #24
  401a28:	6060      	str	r0, [r4, #4]
  401a2a:	6818      	ldr	r0, [r3, #0]
  401a2c:	3018      	adds	r0, #24
  401a2e:	6090      	str	r0, [r2, #8]
  401a30:	681b      	ldr	r3, [r3, #0]
  401a32:	629d      	str	r5, [r3, #40]	; 0x28
  401a34:	682b      	ldr	r3, [r5, #0]
  401a36:	3301      	adds	r3, #1
  401a38:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
  401a3a:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401a3c:	bf0c      	ite	eq
  401a3e:	4660      	moveq	r0, ip
  401a40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  401a44:	f7ff fbe4 	bl	401210 <prvAddCurrentTaskToDelayedList>
    }
  401a48:	bd38      	pop	{r3, r4, r5, pc}
  401a4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401a4e:	f383 8811 	msr	BASEPRI, r3
  401a52:	f3bf 8f6f 	isb	sy
  401a56:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
  401a5a:	e7fe      	b.n	401a5a <vTaskPlaceOnEventListRestricted+0x4e>
  401a5c:	200005d4 	.word	0x200005d4

00401a60 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a60:	68c3      	ldr	r3, [r0, #12]
  401a62:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
  401a64:	2b00      	cmp	r3, #0
  401a66:	d04f      	beq.n	401b08 <xTaskRemoveFromEventList+0xa8>
{
  401a68:	b430      	push	{r4, r5}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401a6c:	69d8      	ldr	r0, [r3, #28]
  401a6e:	6a19      	ldr	r1, [r3, #32]
  401a70:	6081      	str	r1, [r0, #8]
  401a72:	69d8      	ldr	r0, [r3, #28]
  401a74:	6048      	str	r0, [r1, #4]
  401a76:	f103 0018 	add.w	r0, r3, #24
  401a7a:	6851      	ldr	r1, [r2, #4]
  401a7c:	4281      	cmp	r1, r0
  401a7e:	bf04      	itt	eq
  401a80:	6a19      	ldreq	r1, [r3, #32]
  401a82:	6051      	streq	r1, [r2, #4]
  401a84:	2100      	movs	r1, #0
  401a86:	6299      	str	r1, [r3, #40]	; 0x28
  401a88:	6811      	ldr	r1, [r2, #0]
  401a8a:	3901      	subs	r1, #1
  401a8c:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a8e:	4a29      	ldr	r2, [pc, #164]	; (401b34 <xTaskRemoveFromEventList+0xd4>)
  401a90:	6812      	ldr	r2, [r2, #0]
  401a92:	2a00      	cmp	r2, #0
  401a94:	d141      	bne.n	401b1a <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401a96:	695a      	ldr	r2, [r3, #20]
  401a98:	6898      	ldr	r0, [r3, #8]
  401a9a:	68d9      	ldr	r1, [r3, #12]
  401a9c:	6081      	str	r1, [r0, #8]
  401a9e:	6898      	ldr	r0, [r3, #8]
  401aa0:	6048      	str	r0, [r1, #4]
  401aa2:	1d18      	adds	r0, r3, #4
  401aa4:	6851      	ldr	r1, [r2, #4]
  401aa6:	4281      	cmp	r1, r0
  401aa8:	bf04      	itt	eq
  401aaa:	68d9      	ldreq	r1, [r3, #12]
  401aac:	6051      	streq	r1, [r2, #4]
  401aae:	2100      	movs	r1, #0
  401ab0:	6159      	str	r1, [r3, #20]
  401ab2:	6811      	ldr	r1, [r2, #0]
  401ab4:	3901      	subs	r1, #1
  401ab6:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401aba:	4c1f      	ldr	r4, [pc, #124]	; (401b38 <xTaskRemoveFromEventList+0xd8>)
  401abc:	6825      	ldr	r5, [r4, #0]
  401abe:	2101      	movs	r1, #1
  401ac0:	4091      	lsls	r1, r2
  401ac2:	4329      	orrs	r1, r5
  401ac4:	6021      	str	r1, [r4, #0]
  401ac6:	491d      	ldr	r1, [pc, #116]	; (401b3c <xTaskRemoveFromEventList+0xdc>)
  401ac8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401acc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401ad0:	6852      	ldr	r2, [r2, #4]
  401ad2:	609a      	str	r2, [r3, #8]
  401ad4:	6894      	ldr	r4, [r2, #8]
  401ad6:	60dc      	str	r4, [r3, #12]
  401ad8:	6060      	str	r0, [r4, #4]
  401ada:	6090      	str	r0, [r2, #8]
  401adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ade:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  401ae2:	0084      	lsls	r4, r0, #2
  401ae4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401ae8:	6158      	str	r0, [r3, #20]
  401aea:	5908      	ldr	r0, [r1, r4]
  401aec:	3001      	adds	r0, #1
  401aee:	5108      	str	r0, [r1, r4]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401af0:	4a13      	ldr	r2, [pc, #76]	; (401b40 <xTaskRemoveFromEventList+0xe0>)
  401af2:	6811      	ldr	r1, [r2, #0]
  401af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401af6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  401af8:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  401afa:	bf83      	ittte	hi
  401afc:	2001      	movhi	r0, #1
  401afe:	4b11      	ldrhi	r3, [pc, #68]	; (401b44 <xTaskRemoveFromEventList+0xe4>)
  401b00:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  401b02:	2000      	movls	r0, #0
}
  401b04:	bc30      	pop	{r4, r5}
  401b06:	4770      	bx	lr
  401b08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401b0c:	f383 8811 	msr	BASEPRI, r3
  401b10:	f3bf 8f6f 	isb	sy
  401b14:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
  401b18:	e7fe      	b.n	401b18 <xTaskRemoveFromEventList+0xb8>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b1a:	4a0b      	ldr	r2, [pc, #44]	; (401b48 <xTaskRemoveFromEventList+0xe8>)
  401b1c:	6851      	ldr	r1, [r2, #4]
  401b1e:	61d9      	str	r1, [r3, #28]
  401b20:	688c      	ldr	r4, [r1, #8]
  401b22:	621c      	str	r4, [r3, #32]
  401b24:	6060      	str	r0, [r4, #4]
  401b26:	6088      	str	r0, [r1, #8]
  401b28:	629a      	str	r2, [r3, #40]	; 0x28
  401b2a:	6811      	ldr	r1, [r2, #0]
  401b2c:	3101      	adds	r1, #1
  401b2e:	6011      	str	r1, [r2, #0]
  401b30:	e7de      	b.n	401af0 <xTaskRemoveFromEventList+0x90>
  401b32:	bf00      	nop
  401b34:	200004d4 	.word	0x200004d4
  401b38:	200004f4 	.word	0x200004f4
  401b3c:	20000570 	.word	0x20000570
  401b40:	200005d4 	.word	0x200005d4
  401b44:	200004e8 	.word	0x200004e8
  401b48:	2000052c 	.word	0x2000052c

00401b4c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b4c:	4b03      	ldr	r3, [pc, #12]	; (401b5c <vTaskInternalSetTimeOutState+0x10>)
  401b4e:	681b      	ldr	r3, [r3, #0]
  401b50:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401b52:	4b03      	ldr	r3, [pc, #12]	; (401b60 <vTaskInternalSetTimeOutState+0x14>)
  401b54:	681b      	ldr	r3, [r3, #0]
  401b56:	6043      	str	r3, [r0, #4]
}
  401b58:	4770      	bx	lr
  401b5a:	bf00      	nop
  401b5c:	200004e4 	.word	0x200004e4
  401b60:	200004f8 	.word	0x200004f8

00401b64 <xTaskCheckForTimeOut>:
{
  401b64:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxTimeOut );
  401b66:	b1b8      	cbz	r0, 401b98 <xTaskCheckForTimeOut+0x34>
  401b68:	460c      	mov	r4, r1
  401b6a:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
  401b6c:	b1e9      	cbz	r1, 401baa <xTaskCheckForTimeOut+0x46>
    taskENTER_CRITICAL();
  401b6e:	f000 faa1 	bl	4020b4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
  401b72:	4b1c      	ldr	r3, [pc, #112]	; (401be4 <xTaskCheckForTimeOut+0x80>)
  401b74:	681a      	ldr	r2, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401b76:	6823      	ldr	r3, [r4, #0]
  401b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  401b7c:	d02d      	beq.n	401bda <xTaskCheckForTimeOut+0x76>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401b7e:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401b80:	4819      	ldr	r0, [pc, #100]	; (401be8 <xTaskCheckForTimeOut+0x84>)
  401b82:	6800      	ldr	r0, [r0, #0]
  401b84:	f8d5 c000 	ldr.w	ip, [r5]
  401b88:	4584      	cmp	ip, r0
  401b8a:	d017      	beq.n	401bbc <xTaskCheckForTimeOut+0x58>
  401b8c:	4291      	cmp	r1, r2
  401b8e:	d815      	bhi.n	401bbc <xTaskCheckForTimeOut+0x58>
            *pxTicksToWait = ( TickType_t ) 0;
  401b90:	2300      	movs	r3, #0
  401b92:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401b94:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  401b96:	e021      	b.n	401bdc <xTaskCheckForTimeOut+0x78>
  401b98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401b9c:	f383 8811 	msr	BASEPRI, r3
  401ba0:	f3bf 8f6f 	isb	sy
  401ba4:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
  401ba8:	e7fe      	b.n	401ba8 <xTaskCheckForTimeOut+0x44>
  401baa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401bae:	f383 8811 	msr	BASEPRI, r3
  401bb2:	f3bf 8f6f 	isb	sy
  401bb6:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
  401bba:	e7fe      	b.n	401bba <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401bbc:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401bbe:	4283      	cmp	r3, r0
  401bc0:	d803      	bhi.n	401bca <xTaskCheckForTimeOut+0x66>
            *pxTicksToWait = ( TickType_t ) 0;
  401bc2:	2300      	movs	r3, #0
  401bc4:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401bc6:	2401      	movs	r4, #1
  401bc8:	e008      	b.n	401bdc <xTaskCheckForTimeOut+0x78>
            *pxTicksToWait -= xElapsedTime;
  401bca:	1a9b      	subs	r3, r3, r2
  401bcc:	440b      	add	r3, r1
  401bce:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  401bd0:	4628      	mov	r0, r5
  401bd2:	f7ff ffbb 	bl	401b4c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
  401bd6:	2400      	movs	r4, #0
  401bd8:	e000      	b.n	401bdc <xTaskCheckForTimeOut+0x78>
                xReturn = pdFALSE;
  401bda:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  401bdc:	f000 fa8c 	bl	4020f8 <vPortExitCritical>
}
  401be0:	4620      	mov	r0, r4
  401be2:	bd38      	pop	{r3, r4, r5, pc}
  401be4:	200004f8 	.word	0x200004f8
  401be8:	200004e4 	.word	0x200004e4

00401bec <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  401bec:	4b01      	ldr	r3, [pc, #4]	; (401bf4 <vTaskMissedYield+0x8>)
  401bee:	2201      	movs	r2, #1
  401bf0:	601a      	str	r2, [r3, #0]
}
  401bf2:	4770      	bx	lr
  401bf4:	200004e8 	.word	0x200004e8

00401bf8 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  401bf8:	4b05      	ldr	r3, [pc, #20]	; (401c10 <xTaskGetSchedulerState+0x18>)
  401bfa:	681b      	ldr	r3, [r3, #0]
  401bfc:	b133      	cbz	r3, 401c0c <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bfe:	4b05      	ldr	r3, [pc, #20]	; (401c14 <xTaskGetSchedulerState+0x1c>)
  401c00:	6818      	ldr	r0, [r3, #0]
  401c02:	fab0 f080 	clz	r0, r0
  401c06:	0940      	lsrs	r0, r0, #5
  401c08:	0040      	lsls	r0, r0, #1
  401c0a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  401c0c:	2001      	movs	r0, #1
    }
  401c0e:	4770      	bx	lr
  401c10:	200004f0 	.word	0x200004f0
  401c14:	200004d4 	.word	0x200004d4

00401c18 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  401c18:	2800      	cmp	r0, #0
  401c1a:	d051      	beq.n	401cc0 <xTaskPriorityDisinherit+0xa8>
    {
  401c1c:	b570      	push	{r4, r5, r6, lr}
  401c1e:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401c20:	4b29      	ldr	r3, [pc, #164]	; (401cc8 <xTaskPriorityDisinherit+0xb0>)
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	4283      	cmp	r3, r0
  401c26:	d008      	beq.n	401c3a <xTaskPriorityDisinherit+0x22>
  401c28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401c2c:	f383 8811 	msr	BASEPRI, r3
  401c30:	f3bf 8f6f 	isb	sy
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	e7fe      	b.n	401c38 <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
  401c3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  401c3c:	b943      	cbnz	r3, 401c50 <xTaskPriorityDisinherit+0x38>
  401c3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401c42:	f383 8811 	msr	BASEPRI, r3
  401c46:	f3bf 8f6f 	isb	sy
  401c4a:	f3bf 8f4f 	dsb	sy
  401c4e:	e7fe      	b.n	401c4e <xTaskPriorityDisinherit+0x36>
            ( pxTCB->uxMutexesHeld )--;
  401c50:	3b01      	subs	r3, #1
  401c52:	6443      	str	r3, [r0, #68]	; 0x44
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c54:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401c56:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c58:	4291      	cmp	r1, r2
  401c5a:	d033      	beq.n	401cc4 <xTaskPriorityDisinherit+0xac>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401c5c:	b10b      	cbz	r3, 401c62 <xTaskPriorityDisinherit+0x4a>
        BaseType_t xReturn = pdFALSE;
  401c5e:	2000      	movs	r0, #0
    }
  401c60:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401c62:	1d05      	adds	r5, r0, #4
  401c64:	4628      	mov	r0, r5
  401c66:	f7fe ff4a 	bl	400afe <uxListRemove>
  401c6a:	b938      	cbnz	r0, 401c7c <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401c6c:	4917      	ldr	r1, [pc, #92]	; (401ccc <xTaskPriorityDisinherit+0xb4>)
  401c6e:	680b      	ldr	r3, [r1, #0]
  401c70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c72:	2201      	movs	r2, #1
  401c74:	4082      	lsls	r2, r0
  401c76:	ea23 0302 	bic.w	r3, r3, r2
  401c7a:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c80:	f1c3 0205 	rsb	r2, r3, #5
  401c84:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401c86:	4911      	ldr	r1, [pc, #68]	; (401ccc <xTaskPriorityDisinherit+0xb4>)
  401c88:	680e      	ldr	r6, [r1, #0]
  401c8a:	2001      	movs	r0, #1
  401c8c:	fa00 f203 	lsl.w	r2, r0, r3
  401c90:	4332      	orrs	r2, r6
  401c92:	600a      	str	r2, [r1, #0]
  401c94:	4a0e      	ldr	r2, [pc, #56]	; (401cd0 <xTaskPriorityDisinherit+0xb8>)
  401c96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401c9e:	685b      	ldr	r3, [r3, #4]
  401ca0:	60a3      	str	r3, [r4, #8]
  401ca2:	6899      	ldr	r1, [r3, #8]
  401ca4:	60e1      	str	r1, [r4, #12]
  401ca6:	604d      	str	r5, [r1, #4]
  401ca8:	609d      	str	r5, [r3, #8]
  401caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401cac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401cb0:	008d      	lsls	r5, r1, #2
  401cb2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  401cb6:	6161      	str	r1, [r4, #20]
  401cb8:	5951      	ldr	r1, [r2, r5]
  401cba:	4401      	add	r1, r0
  401cbc:	5151      	str	r1, [r2, r5]
                    xReturn = pdTRUE;
  401cbe:	e7cf      	b.n	401c60 <xTaskPriorityDisinherit+0x48>
        BaseType_t xReturn = pdFALSE;
  401cc0:	2000      	movs	r0, #0
    }
  401cc2:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
  401cc4:	2000      	movs	r0, #0
  401cc6:	e7cb      	b.n	401c60 <xTaskPriorityDisinherit+0x48>
  401cc8:	200005d4 	.word	0x200005d4
  401ccc:	200004f4 	.word	0x200004f4
  401cd0:	20000570 	.word	0x20000570

00401cd4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401cd4:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401cd6:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401cd8:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401cda:	4291      	cmp	r1, r2
  401cdc:	d80c      	bhi.n	401cf8 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cde:	1ad2      	subs	r2, r2, r3
  401ce0:	6983      	ldr	r3, [r0, #24]
  401ce2:	429a      	cmp	r2, r3
  401ce4:	d301      	bcc.n	401cea <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401ce6:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
  401ce8:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401cea:	1d01      	adds	r1, r0, #4
  401cec:	4b09      	ldr	r3, [pc, #36]	; (401d14 <prvInsertTimerInActiveList+0x40>)
  401cee:	6818      	ldr	r0, [r3, #0]
  401cf0:	f7fe feec 	bl	400acc <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
  401cf4:	2000      	movs	r0, #0
  401cf6:	e7f7      	b.n	401ce8 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401cf8:	429a      	cmp	r2, r3
  401cfa:	d201      	bcs.n	401d00 <prvInsertTimerInActiveList+0x2c>
  401cfc:	4299      	cmp	r1, r3
  401cfe:	d206      	bcs.n	401d0e <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d00:	1d01      	adds	r1, r0, #4
  401d02:	4b05      	ldr	r3, [pc, #20]	; (401d18 <prvInsertTimerInActiveList+0x44>)
  401d04:	6818      	ldr	r0, [r3, #0]
  401d06:	f7fe fee1 	bl	400acc <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
  401d0a:	2000      	movs	r0, #0
  401d0c:	e7ec      	b.n	401ce8 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
  401d0e:	2001      	movs	r0, #1
        return xProcessTimerNow;
  401d10:	e7ea      	b.n	401ce8 <prvInsertTimerInActiveList+0x14>
  401d12:	bf00      	nop
  401d14:	200005e4 	.word	0x200005e4
  401d18:	200005e8 	.word	0x200005e8

00401d1c <prvReloadTimer>:
    {
  401d1c:	b570      	push	{r4, r5, r6, lr}
  401d1e:	4604      	mov	r4, r0
  401d20:	460d      	mov	r5, r1
  401d22:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d24:	e004      	b.n	401d30 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401d26:	69a3      	ldr	r3, [r4, #24]
  401d28:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d2a:	6a23      	ldr	r3, [r4, #32]
  401d2c:	4620      	mov	r0, r4
  401d2e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d30:	69a1      	ldr	r1, [r4, #24]
  401d32:	462b      	mov	r3, r5
  401d34:	4632      	mov	r2, r6
  401d36:	4429      	add	r1, r5
  401d38:	4620      	mov	r0, r4
  401d3a:	f7ff ffcb 	bl	401cd4 <prvInsertTimerInActiveList>
  401d3e:	2800      	cmp	r0, #0
  401d40:	d1f1      	bne.n	401d26 <prvReloadTimer+0xa>
    }
  401d42:	bd70      	pop	{r4, r5, r6, pc}

00401d44 <prvProcessExpiredTimer>:
    {
  401d44:	b570      	push	{r4, r5, r6, lr}
  401d46:	4605      	mov	r5, r0
  401d48:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401d4a:	4b0d      	ldr	r3, [pc, #52]	; (401d80 <prvProcessExpiredTimer+0x3c>)
  401d4c:	681b      	ldr	r3, [r3, #0]
  401d4e:	68db      	ldr	r3, [r3, #12]
  401d50:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d52:	1d20      	adds	r0, r4, #4
  401d54:	f7fe fed3 	bl	400afe <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401d58:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401d5c:	f013 0f04 	tst.w	r3, #4
  401d60:	d107      	bne.n	401d72 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401d62:	f023 0301 	bic.w	r3, r3, #1
  401d66:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d6a:	6a23      	ldr	r3, [r4, #32]
  401d6c:	4620      	mov	r0, r4
  401d6e:	4798      	blx	r3
    }
  401d70:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401d72:	4632      	mov	r2, r6
  401d74:	4629      	mov	r1, r5
  401d76:	4620      	mov	r0, r4
  401d78:	f7ff ffd0 	bl	401d1c <prvReloadTimer>
  401d7c:	e7f5      	b.n	401d6a <prvProcessExpiredTimer+0x26>
  401d7e:	bf00      	nop
  401d80:	200005e8 	.word	0x200005e8

00401d84 <prvSampleTimeNow>:
    {
  401d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d86:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
  401d88:	f7ff fbd4 	bl	401534 <xTaskGetTickCount>
  401d8c:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401d8e:	4b10      	ldr	r3, [pc, #64]	; (401dd0 <prvSampleTimeNow+0x4c>)
  401d90:	681b      	ldr	r3, [r3, #0]
  401d92:	4283      	cmp	r3, r0
  401d94:	d805      	bhi.n	401da2 <prvSampleTimeNow+0x1e>
  401d96:	2300      	movs	r3, #0
            *pxTimerListsWereSwitched = pdTRUE;
  401d98:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
  401d9a:	4b0d      	ldr	r3, [pc, #52]	; (401dd0 <prvSampleTimeNow+0x4c>)
  401d9c:	601c      	str	r4, [r3, #0]
    }
  401d9e:	4620      	mov	r0, r4
  401da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401da2:	4b0c      	ldr	r3, [pc, #48]	; (401dd4 <prvSampleTimeNow+0x50>)
  401da4:	681b      	ldr	r3, [r3, #0]
  401da6:	681a      	ldr	r2, [r3, #0]
  401da8:	b15a      	cbz	r2, 401dc2 <prvSampleTimeNow+0x3e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401daa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401dae:	4e09      	ldr	r6, [pc, #36]	; (401dd4 <prvSampleTimeNow+0x50>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401db0:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401db2:	4639      	mov	r1, r7
  401db4:	6818      	ldr	r0, [r3, #0]
  401db6:	f7ff ffc5 	bl	401d44 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401dba:	6833      	ldr	r3, [r6, #0]
  401dbc:	681a      	ldr	r2, [r3, #0]
  401dbe:	2a00      	cmp	r2, #0
  401dc0:	d1f6      	bne.n	401db0 <prvSampleTimeNow+0x2c>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401dc2:	4a05      	ldr	r2, [pc, #20]	; (401dd8 <prvSampleTimeNow+0x54>)
  401dc4:	6810      	ldr	r0, [r2, #0]
  401dc6:	4903      	ldr	r1, [pc, #12]	; (401dd4 <prvSampleTimeNow+0x50>)
  401dc8:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401dca:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401dcc:	2301      	movs	r3, #1
  401dce:	e7e3      	b.n	401d98 <prvSampleTimeNow+0x14>
  401dd0:	200005d8 	.word	0x200005d8
  401dd4:	200005e8 	.word	0x200005e8
  401dd8:	200005e4 	.word	0x200005e4

00401ddc <prvTimerTask>:
    {
  401ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401de0:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401de2:	4f5d      	ldr	r7, [pc, #372]	; (401f58 <prvTimerTask+0x17c>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401de4:	4d5d      	ldr	r5, [pc, #372]	; (401f5c <prvTimerTask+0x180>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401de6:	683b      	ldr	r3, [r7, #0]
  401de8:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401dea:	2e00      	cmp	r6, #0
  401dec:	f000 8090 	beq.w	401f10 <prvTimerTask+0x134>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401df0:	68db      	ldr	r3, [r3, #12]
  401df2:	681e      	ldr	r6, [r3, #0]
        vTaskSuspendAll();
  401df4:	f7ff fb96 	bl	401524 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401df8:	a802      	add	r0, sp, #8
  401dfa:	f7ff ffc3 	bl	401d84 <prvSampleTimeNow>
  401dfe:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e00:	9a02      	ldr	r2, [sp, #8]
  401e02:	b94a      	cbnz	r2, 401e18 <prvTimerTask+0x3c>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401e04:	4286      	cmp	r6, r0
  401e06:	f200 8093 	bhi.w	401f30 <prvTimerTask+0x154>
                    ( void ) xTaskResumeAll();
  401e0a:	f7ff fc81 	bl	401710 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e0e:	4621      	mov	r1, r4
  401e10:	4630      	mov	r0, r6
  401e12:	f7ff ff97 	bl	401d44 <prvProcessExpiredTimer>
  401e16:	e001      	b.n	401e1c <prvTimerTask+0x40>
                ( void ) xTaskResumeAll();
  401e18:	f7ff fc7a 	bl	401710 <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e1c:	2400      	movs	r4, #0
    }
  401e1e:	e006      	b.n	401e2e <prvTimerTask+0x52>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401e20:	9905      	ldr	r1, [sp, #20]
  401e22:	9804      	ldr	r0, [sp, #16]
  401e24:	9b03      	ldr	r3, [sp, #12]
  401e26:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401e28:	9b02      	ldr	r3, [sp, #8]
  401e2a:	2b00      	cmp	r3, #0
  401e2c:	da09      	bge.n	401e42 <prvTimerTask+0x66>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e2e:	4622      	mov	r2, r4
  401e30:	a902      	add	r1, sp, #8
  401e32:	6828      	ldr	r0, [r5, #0]
  401e34:	f7ff f8c8 	bl	400fc8 <xQueueReceive>
  401e38:	2800      	cmp	r0, #0
  401e3a:	d0d4      	beq.n	401de6 <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401e3c:	9b02      	ldr	r3, [sp, #8]
  401e3e:	2b00      	cmp	r3, #0
  401e40:	dbee      	blt.n	401e20 <prvTimerTask+0x44>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401e42:	9e04      	ldr	r6, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401e44:	6973      	ldr	r3, [r6, #20]
  401e46:	b113      	cbz	r3, 401e4e <prvTimerTask+0x72>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e48:	1d30      	adds	r0, r6, #4
  401e4a:	f7fe fe58 	bl	400afe <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e4e:	a801      	add	r0, sp, #4
  401e50:	f7ff ff98 	bl	401d84 <prvSampleTimeNow>
  401e54:	4680      	mov	r8, r0
                switch( xMessage.xMessageID )
  401e56:	9b02      	ldr	r3, [sp, #8]
  401e58:	3b01      	subs	r3, #1
  401e5a:	2b08      	cmp	r3, #8
  401e5c:	d8e7      	bhi.n	401e2e <prvTimerTask+0x52>
  401e5e:	e8df f003 	tbb	[pc, r3]
  401e62:	0505      	.short	0x0505
  401e64:	05493029 	.word	0x05493029
  401e68:	2905      	.short	0x2905
  401e6a:	30          	.byte	0x30
  401e6b:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401e6c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401e70:	f043 0301 	orr.w	r3, r3, #1
  401e74:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401e78:	9b03      	ldr	r3, [sp, #12]
  401e7a:	69b1      	ldr	r1, [r6, #24]
  401e7c:	4602      	mov	r2, r0
  401e7e:	4419      	add	r1, r3
  401e80:	4630      	mov	r0, r6
  401e82:	f7ff ff27 	bl	401cd4 <prvInsertTimerInActiveList>
  401e86:	2800      	cmp	r0, #0
  401e88:	d0d1      	beq.n	401e2e <prvTimerTask+0x52>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401e8a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401e8e:	f013 0f04 	tst.w	r3, #4
  401e92:	d107      	bne.n	401ea4 <prvTimerTask+0xc8>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401e94:	f023 0301 	bic.w	r3, r3, #1
  401e98:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e9c:	6a33      	ldr	r3, [r6, #32]
  401e9e:	4630      	mov	r0, r6
  401ea0:	4798      	blx	r3
  401ea2:	e7c4      	b.n	401e2e <prvTimerTask+0x52>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  401ea4:	69b3      	ldr	r3, [r6, #24]
  401ea6:	4642      	mov	r2, r8
  401ea8:	9903      	ldr	r1, [sp, #12]
  401eaa:	4419      	add	r1, r3
  401eac:	4630      	mov	r0, r6
  401eae:	f7ff ff35 	bl	401d1c <prvReloadTimer>
  401eb2:	e7f3      	b.n	401e9c <prvTimerTask+0xc0>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401eb4:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401eb8:	f023 0301 	bic.w	r3, r3, #1
  401ebc:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        break;
  401ec0:	e7b5      	b.n	401e2e <prvTimerTask+0x52>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401ec2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401ec6:	f043 0301 	orr.w	r3, r3, #1
  401eca:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401ece:	9903      	ldr	r1, [sp, #12]
  401ed0:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401ed2:	b131      	cbz	r1, 401ee2 <prvTimerTask+0x106>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401ed4:	4603      	mov	r3, r0
  401ed6:	4602      	mov	r2, r0
  401ed8:	4401      	add	r1, r0
  401eda:	4630      	mov	r0, r6
  401edc:	f7ff fefa 	bl	401cd4 <prvInsertTimerInActiveList>
                        break;
  401ee0:	e7a5      	b.n	401e2e <prvTimerTask+0x52>
  401ee2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401ee6:	f383 8811 	msr	BASEPRI, r3
  401eea:	f3bf 8f6f 	isb	sy
  401eee:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401ef2:	e7fe      	b.n	401ef2 <prvTimerTask+0x116>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401ef4:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401ef8:	f013 0f02 	tst.w	r3, #2
  401efc:	d004      	beq.n	401f08 <prvTimerTask+0x12c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401efe:	f023 0301 	bic.w	r3, r3, #1
  401f02:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  401f06:	e792      	b.n	401e2e <prvTimerTask+0x52>
                                vPortFree( pxTimer );
  401f08:	4630      	mov	r0, r6
  401f0a:	f000 fa87 	bl	40241c <vPortFree>
  401f0e:	e78e      	b.n	401e2e <prvTimerTask+0x52>
        vTaskSuspendAll();
  401f10:	f7ff fb08 	bl	401524 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f14:	a802      	add	r0, sp, #8
  401f16:	f7ff ff35 	bl	401d84 <prvSampleTimeNow>
  401f1a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401f1c:	9b02      	ldr	r3, [sp, #8]
  401f1e:	2b00      	cmp	r3, #0
  401f20:	f47f af7a 	bne.w	401e18 <prvTimerTask+0x3c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401f24:	4b0e      	ldr	r3, [pc, #56]	; (401f60 <prvTimerTask+0x184>)
  401f26:	681b      	ldr	r3, [r3, #0]
  401f28:	681a      	ldr	r2, [r3, #0]
  401f2a:	fab2 f282 	clz	r2, r2
  401f2e:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401f30:	1b31      	subs	r1, r6, r4
  401f32:	6828      	ldr	r0, [r5, #0]
  401f34:	f7ff f8f8 	bl	401128 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
  401f38:	f7ff fbea 	bl	401710 <xTaskResumeAll>
  401f3c:	2800      	cmp	r0, #0
  401f3e:	f47f af6d 	bne.w	401e1c <prvTimerTask+0x40>
                        portYIELD_WITHIN_API();
  401f42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401f4e:	f3bf 8f4f 	dsb	sy
  401f52:	f3bf 8f6f 	isb	sy
  401f56:	e761      	b.n	401e1c <prvTimerTask+0x40>
  401f58:	200005e8 	.word	0x200005e8
  401f5c:	200005e0 	.word	0x200005e0
  401f60:	200005e4 	.word	0x200005e4

00401f64 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  401f64:	b538      	push	{r3, r4, r5, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  401f66:	f000 f8a5 	bl	4020b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
  401f6a:	4b0d      	ldr	r3, [pc, #52]	; (401fa0 <prvCheckForValidListAndQueue+0x3c>)
  401f6c:	681b      	ldr	r3, [r3, #0]
  401f6e:	b113      	cbz	r3, 401f76 <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  401f70:	f000 f8c2 	bl	4020f8 <vPortExitCritical>
    }
  401f74:	bd38      	pop	{r3, r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
  401f76:	4d0b      	ldr	r5, [pc, #44]	; (401fa4 <prvCheckForValidListAndQueue+0x40>)
  401f78:	4628      	mov	r0, r5
  401f7a:	f7fe fd99 	bl	400ab0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
  401f7e:	4c0a      	ldr	r4, [pc, #40]	; (401fa8 <prvCheckForValidListAndQueue+0x44>)
  401f80:	4620      	mov	r0, r4
  401f82:	f7fe fd95 	bl	400ab0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
  401f86:	4b09      	ldr	r3, [pc, #36]	; (401fac <prvCheckForValidListAndQueue+0x48>)
  401f88:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  401f8a:	4b09      	ldr	r3, [pc, #36]	; (401fb0 <prvCheckForValidListAndQueue+0x4c>)
  401f8c:	601c      	str	r4, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401f8e:	2200      	movs	r2, #0
  401f90:	2110      	movs	r1, #16
  401f92:	2005      	movs	r0, #5
  401f94:	f7fe ff00 	bl	400d98 <xQueueGenericCreate>
  401f98:	4b01      	ldr	r3, [pc, #4]	; (401fa0 <prvCheckForValidListAndQueue+0x3c>)
  401f9a:	6018      	str	r0, [r3, #0]
  401f9c:	e7e8      	b.n	401f70 <prvCheckForValidListAndQueue+0xc>
  401f9e:	bf00      	nop
  401fa0:	200005e0 	.word	0x200005e0
  401fa4:	20000600 	.word	0x20000600
  401fa8:	200005ec 	.word	0x200005ec
  401fac:	200005e8 	.word	0x200005e8
  401fb0:	200005e4 	.word	0x200005e4

00401fb4 <xTimerCreateTimerTask>:
    {
  401fb4:	b500      	push	{lr}
  401fb6:	b083      	sub	sp, #12
        prvCheckForValidListAndQueue();
  401fb8:	f7ff ffd4 	bl	401f64 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
  401fbc:	4b0d      	ldr	r3, [pc, #52]	; (401ff4 <xTimerCreateTimerTask+0x40>)
  401fbe:	681b      	ldr	r3, [r3, #0]
  401fc0:	b15b      	cbz	r3, 401fda <xTimerCreateTimerTask+0x26>
                xReturn = xTaskCreate( prvTimerTask,
  401fc2:	4b0d      	ldr	r3, [pc, #52]	; (401ff8 <xTimerCreateTimerTask+0x44>)
  401fc4:	9301      	str	r3, [sp, #4]
  401fc6:	2302      	movs	r3, #2
  401fc8:	9300      	str	r3, [sp, #0]
  401fca:	2300      	movs	r3, #0
  401fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
  401fd0:	490a      	ldr	r1, [pc, #40]	; (401ffc <xTimerCreateTimerTask+0x48>)
  401fd2:	480b      	ldr	r0, [pc, #44]	; (402000 <xTimerCreateTimerTask+0x4c>)
  401fd4:	f7ff f974 	bl	4012c0 <xTaskCreate>
        configASSERT( xReturn );
  401fd8:	b940      	cbnz	r0, 401fec <xTimerCreateTimerTask+0x38>
  401fda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401fde:	f383 8811 	msr	BASEPRI, r3
  401fe2:	f3bf 8f6f 	isb	sy
  401fe6:	f3bf 8f4f 	dsb	sy
  401fea:	e7fe      	b.n	401fea <xTimerCreateTimerTask+0x36>
    }
  401fec:	b003      	add	sp, #12
  401fee:	f85d fb04 	ldr.w	pc, [sp], #4
  401ff2:	bf00      	nop
  401ff4:	200005e0 	.word	0x200005e0
  401ff8:	200005dc 	.word	0x200005dc
  401ffc:	00402794 	.word	0x00402794
  402000:	00401ddd 	.word	0x00401ddd

00402004 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  402004:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
  402006:	2300      	movs	r3, #0
  402008:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
  40200a:	4b0d      	ldr	r3, [pc, #52]	; (402040 <prvTaskExitError+0x3c>)
  40200c:	681b      	ldr	r3, [r3, #0]
  40200e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  402012:	d008      	beq.n	402026 <prvTaskExitError+0x22>
  402014:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402018:	f383 8811 	msr	BASEPRI, r3
  40201c:	f3bf 8f6f 	isb	sy
  402020:	f3bf 8f4f 	dsb	sy
  402024:	e7fe      	b.n	402024 <prvTaskExitError+0x20>
  402026:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40202a:	f383 8811 	msr	BASEPRI, r3
  40202e:	f3bf 8f6f 	isb	sy
  402032:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
  402036:	9b01      	ldr	r3, [sp, #4]
  402038:	2b00      	cmp	r3, #0
  40203a:	d0fc      	beq.n	402036 <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
  40203c:	b002      	add	sp, #8
  40203e:	4770      	bx	lr
  402040:	20000008 	.word	0x20000008

00402044 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
  402044:	4806      	ldr	r0, [pc, #24]	; (402060 <prvPortStartFirstTask+0x1c>)
  402046:	6800      	ldr	r0, [r0, #0]
  402048:	6800      	ldr	r0, [r0, #0]
  40204a:	f380 8808 	msr	MSP, r0
  40204e:	b662      	cpsie	i
  402050:	b661      	cpsie	f
  402052:	f3bf 8f4f 	dsb	sy
  402056:	f3bf 8f6f 	isb	sy
  40205a:	df00      	svc	0
  40205c:	bf00      	nop
  40205e:	0000      	.short	0x0000
  402060:	e000ed08 	.word	0xe000ed08

00402064 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  402064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402068:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  40206c:	f021 0101 	bic.w	r1, r1, #1
  402070:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  402074:	4b03      	ldr	r3, [pc, #12]	; (402084 <pxPortInitialiseStack+0x20>)
  402076:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
  40207a:	f840 2c20 	str.w	r2, [r0, #-32]
}
  40207e:	3840      	subs	r0, #64	; 0x40
  402080:	4770      	bx	lr
  402082:	bf00      	nop
  402084:	00402005 	.word	0x00402005
	...

00402090 <SVC_Handler>:
    __asm volatile (
  402090:	4b07      	ldr	r3, [pc, #28]	; (4020b0 <pxCurrentTCBConst2>)
  402092:	6819      	ldr	r1, [r3, #0]
  402094:	6808      	ldr	r0, [r1, #0]
  402096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40209a:	f380 8809 	msr	PSP, r0
  40209e:	f3bf 8f6f 	isb	sy
  4020a2:	f04f 0000 	mov.w	r0, #0
  4020a6:	f380 8811 	msr	BASEPRI, r0
  4020aa:	f04e 0e0d 	orr.w	lr, lr, #13
  4020ae:	4770      	bx	lr

004020b0 <pxCurrentTCBConst2>:
  4020b0:	200005d4 	.word	0x200005d4

004020b4 <vPortEnterCritical>:
  4020b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4020b8:	f383 8811 	msr	BASEPRI, r3
  4020bc:	f3bf 8f6f 	isb	sy
  4020c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
  4020c4:	4a0b      	ldr	r2, [pc, #44]	; (4020f4 <vPortEnterCritical+0x40>)
  4020c6:	6813      	ldr	r3, [r2, #0]
  4020c8:	3301      	adds	r3, #1
  4020ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
  4020cc:	2b01      	cmp	r3, #1
  4020ce:	d000      	beq.n	4020d2 <vPortEnterCritical+0x1e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
  4020d0:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4020d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  4020d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
  4020da:	f013 0fff 	tst.w	r3, #255	; 0xff
  4020de:	d0f7      	beq.n	4020d0 <vPortEnterCritical+0x1c>
  4020e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4020e4:	f383 8811 	msr	BASEPRI, r3
  4020e8:	f3bf 8f6f 	isb	sy
  4020ec:	f3bf 8f4f 	dsb	sy
  4020f0:	e7fe      	b.n	4020f0 <vPortEnterCritical+0x3c>
  4020f2:	bf00      	nop
  4020f4:	20000008 	.word	0x20000008

004020f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
  4020f8:	4b09      	ldr	r3, [pc, #36]	; (402120 <vPortExitCritical+0x28>)
  4020fa:	681b      	ldr	r3, [r3, #0]
  4020fc:	b943      	cbnz	r3, 402110 <vPortExitCritical+0x18>
  4020fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402102:	f383 8811 	msr	BASEPRI, r3
  402106:	f3bf 8f6f 	isb	sy
  40210a:	f3bf 8f4f 	dsb	sy
  40210e:	e7fe      	b.n	40210e <vPortExitCritical+0x16>
    uxCriticalNesting--;
  402110:	3b01      	subs	r3, #1
  402112:	4a03      	ldr	r2, [pc, #12]	; (402120 <vPortExitCritical+0x28>)
  402114:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
  402116:	b90b      	cbnz	r3, 40211c <vPortExitCritical+0x24>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  402118:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
  40211c:	4770      	bx	lr
  40211e:	bf00      	nop
  402120:	20000008 	.word	0x20000008
	...

00402130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
  402130:	f3ef 8009 	mrs	r0, PSP
  402134:	f3bf 8f6f 	isb	sy
  402138:	4b0d      	ldr	r3, [pc, #52]	; (402170 <pxCurrentTCBConst>)
  40213a:	681a      	ldr	r2, [r3, #0]
  40213c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  402140:	6010      	str	r0, [r2, #0]
  402142:	e92d 4008 	stmdb	sp!, {r3, lr}
  402146:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40214a:	f380 8811 	msr	BASEPRI, r0
  40214e:	f7ff fbfb 	bl	401948 <vTaskSwitchContext>
  402152:	f04f 0000 	mov.w	r0, #0
  402156:	f380 8811 	msr	BASEPRI, r0
  40215a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40215e:	6819      	ldr	r1, [r3, #0]
  402160:	6808      	ldr	r0, [r1, #0]
  402162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  402166:	f380 8809 	msr	PSP, r0
  40216a:	f3bf 8f6f 	isb	sy
  40216e:	4770      	bx	lr

00402170 <pxCurrentTCBConst>:
  402170:	200005d4 	.word	0x200005d4

00402174 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  402174:	b508      	push	{r3, lr}
        __asm volatile
  402176:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40217a:	f383 8811 	msr	BASEPRI, r3
  40217e:	f3bf 8f6f 	isb	sy
  402182:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
  402186:	f7ff f9e1 	bl	40154c <xTaskIncrementTick>
  40218a:	b128      	cbz	r0, 402198 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40218c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  402190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
  402198:	2300      	movs	r3, #0
  40219a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
  40219e:	bd08      	pop	{r3, pc}

004021a0 <vPortSetupTimerInterrupt>:
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  4021a0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  4021a4:	2300      	movs	r3, #0
  4021a6:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4021a8:	6193      	str	r3, [r2, #24]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4021aa:	4b05      	ldr	r3, [pc, #20]	; (4021c0 <vPortSetupTimerInterrupt+0x20>)
  4021ac:	681b      	ldr	r3, [r3, #0]
  4021ae:	4905      	ldr	r1, [pc, #20]	; (4021c4 <vPortSetupTimerInterrupt+0x24>)
  4021b0:	fba1 1303 	umull	r1, r3, r1, r3
  4021b4:	099b      	lsrs	r3, r3, #6
  4021b6:	3b01      	subs	r3, #1
  4021b8:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4021ba:	2307      	movs	r3, #7
  4021bc:	6113      	str	r3, [r2, #16]
}
  4021be:	4770      	bx	lr
  4021c0:	20000000 	.word	0x20000000
  4021c4:	10624dd3 	.word	0x10624dd3

004021c8 <xPortStartScheduler>:
{
  4021c8:	b510      	push	{r4, lr}
  4021ca:	b082      	sub	sp, #8
        ulOriginalPriority = *pucFirstUserPriorityRegister;
  4021cc:	4b2c      	ldr	r3, [pc, #176]	; (402280 <xPortStartScheduler+0xb8>)
  4021ce:	781a      	ldrb	r2, [r3, #0]
  4021d0:	b2d2      	uxtb	r2, r2
  4021d2:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4021d4:	22ff      	movs	r2, #255	; 0xff
  4021d6:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4021d8:	781b      	ldrb	r3, [r3, #0]
  4021da:	b2db      	uxtb	r3, r3
  4021dc:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4021e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4021e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  4021e8:	4a26      	ldr	r2, [pc, #152]	; (402284 <xPortStartScheduler+0xbc>)
  4021ea:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4021ec:	4b26      	ldr	r3, [pc, #152]	; (402288 <xPortStartScheduler+0xc0>)
  4021ee:	2207      	movs	r2, #7
  4021f0:	601a      	str	r2, [r3, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4021f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4021f6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4021fa:	d013      	beq.n	402224 <xPortStartScheduler+0x5c>
  4021fc:	2206      	movs	r2, #6
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4021fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402202:	005b      	lsls	r3, r3, #1
  402204:	b2db      	uxtb	r3, r3
  402206:	f88d 3003 	strb.w	r3, [sp, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40220a:	f89d 1003 	ldrb.w	r1, [sp, #3]
  40220e:	4610      	mov	r0, r2
  402210:	3a01      	subs	r2, #1
  402212:	f011 0f80 	tst.w	r1, #128	; 0x80
  402216:	d1f2      	bne.n	4021fe <xPortStartScheduler+0x36>
  402218:	4a1b      	ldr	r2, [pc, #108]	; (402288 <xPortStartScheduler+0xc0>)
  40221a:	6010      	str	r0, [r2, #0]
  40221c:	f88d 3003 	strb.w	r3, [sp, #3]
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  402220:	2803      	cmp	r0, #3
  402222:	d008      	beq.n	402236 <xPortStartScheduler+0x6e>
        __asm volatile
  402224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402228:	f383 8811 	msr	BASEPRI, r3
  40222c:	f3bf 8f6f 	isb	sy
  402230:	f3bf 8f4f 	dsb	sy
  402234:	e7fe      	b.n	402234 <xPortStartScheduler+0x6c>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402236:	4b14      	ldr	r3, [pc, #80]	; (402288 <xPortStartScheduler+0xc0>)
  402238:	f44f 7240 	mov.w	r2, #768	; 0x300
  40223c:	601a      	str	r2, [r3, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
  40223e:	9b01      	ldr	r3, [sp, #4]
  402240:	b2db      	uxtb	r3, r3
  402242:	4a0f      	ldr	r2, [pc, #60]	; (402280 <xPortStartScheduler+0xb8>)
  402244:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  402246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  40224a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
  40224e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  402252:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  402256:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
  40225a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40225e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
  402262:	f7ff ff9d 	bl	4021a0 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
  402266:	2400      	movs	r4, #0
  402268:	4b08      	ldr	r3, [pc, #32]	; (40228c <xPortStartScheduler+0xc4>)
  40226a:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
  40226c:	f7ff feea 	bl	402044 <prvPortStartFirstTask>
    vTaskSwitchContext();
  402270:	f7ff fb6a 	bl	401948 <vTaskSwitchContext>
    prvTaskExitError();
  402274:	f7ff fec6 	bl	402004 <prvTaskExitError>
}
  402278:	4620      	mov	r0, r4
  40227a:	b002      	add	sp, #8
  40227c:	bd10      	pop	{r4, pc}
  40227e:	bf00      	nop
  402280:	e000e400 	.word	0xe000e400
  402284:	20000618 	.word	0x20000618
  402288:	20000614 	.word	0x20000614
  40228c:	20000008 	.word	0x20000008

00402290 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
  402290:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  402292:	4b14      	ldr	r3, [pc, #80]	; (4022e4 <prvInsertBlockIntoFreeList+0x54>)
  402294:	461a      	mov	r2, r3
  402296:	681b      	ldr	r3, [r3, #0]
  402298:	4283      	cmp	r3, r0
  40229a:	d3fb      	bcc.n	402294 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40229c:	6854      	ldr	r4, [r2, #4]
  40229e:	1911      	adds	r1, r2, r4
  4022a0:	4288      	cmp	r0, r1
  4022a2:	d009      	beq.n	4022b8 <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  4022a4:	6844      	ldr	r4, [r0, #4]
  4022a6:	1901      	adds	r1, r0, r4
  4022a8:	428b      	cmp	r3, r1
  4022aa:	d00f      	beq.n	4022cc <prvInsertBlockIntoFreeList+0x3c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4022ac:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  4022ae:	4282      	cmp	r2, r0
  4022b0:	d000      	beq.n	4022b4 <prvInsertBlockIntoFreeList+0x24>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4022b2:	6010      	str	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  4022b4:	bc10      	pop	{r4}
  4022b6:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4022b8:	6841      	ldr	r1, [r0, #4]
  4022ba:	4421      	add	r1, r4
  4022bc:	6051      	str	r1, [r2, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  4022be:	460c      	mov	r4, r1
  4022c0:	4411      	add	r1, r2
  4022c2:	428b      	cmp	r3, r1
  4022c4:	d001      	beq.n	4022ca <prvInsertBlockIntoFreeList+0x3a>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4022c6:	6013      	str	r3, [r2, #0]
    if( pxIterator != pxBlockToInsert )
  4022c8:	e7f4      	b.n	4022b4 <prvInsertBlockIntoFreeList+0x24>
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  4022ca:	4610      	mov	r0, r2
        if( pxIterator->pxNextFreeBlock != pxEnd )
  4022cc:	4906      	ldr	r1, [pc, #24]	; (4022e8 <prvInsertBlockIntoFreeList+0x58>)
  4022ce:	6809      	ldr	r1, [r1, #0]
  4022d0:	428b      	cmp	r3, r1
  4022d2:	d005      	beq.n	4022e0 <prvInsertBlockIntoFreeList+0x50>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4022d4:	685b      	ldr	r3, [r3, #4]
  4022d6:	4423      	add	r3, r4
  4022d8:	6043      	str	r3, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4022da:	6813      	ldr	r3, [r2, #0]
  4022dc:	681b      	ldr	r3, [r3, #0]
  4022de:	e7e5      	b.n	4022ac <prvInsertBlockIntoFreeList+0x1c>
  4022e0:	460b      	mov	r3, r1
  4022e2:	e7e3      	b.n	4022ac <prvInsertBlockIntoFreeList+0x1c>
  4022e4:	20000630 	.word	0x20000630
  4022e8:	2000062c 	.word	0x2000062c

004022ec <pvPortMalloc>:
{
  4022ec:	b570      	push	{r4, r5, r6, lr}
  4022ee:	4604      	mov	r4, r0
    vTaskSuspendAll();
  4022f0:	f7ff f918 	bl	401524 <vTaskSuspendAll>
        if( pxEnd == NULL )
  4022f4:	4b43      	ldr	r3, [pc, #268]	; (402404 <pvPortMalloc+0x118>)
  4022f6:	681b      	ldr	r3, [r3, #0]
  4022f8:	b1a3      	cbz	r3, 402324 <pvPortMalloc+0x38>
        if( xWantedSize > 0 )
  4022fa:	2c00      	cmp	r4, #0
  4022fc:	d07c      	beq.n	4023f8 <pvPortMalloc+0x10c>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
  4022fe:	f004 0007 	and.w	r0, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
  402302:	f1a0 0311 	sub.w	r3, r0, #17
  402306:	42a3      	cmp	r3, r4
  402308:	d376      	bcc.n	4023f8 <pvPortMalloc+0x10c>
  40230a:	f104 0c10 	add.w	ip, r4, #16
                xWantedSize += xAdditionalRequiredSize;
  40230e:	ebac 0100 	sub.w	r1, ip, r0
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
  402312:	2900      	cmp	r1, #0
  402314:	dd70      	ble.n	4023f8 <pvPortMalloc+0x10c>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  402316:	4b3c      	ldr	r3, [pc, #240]	; (402408 <pvPortMalloc+0x11c>)
  402318:	681d      	ldr	r5, [r3, #0]
  40231a:	428d      	cmp	r5, r1
  40231c:	d36c      	bcc.n	4023f8 <pvPortMalloc+0x10c>
                pxBlock = xStart.pxNextFreeBlock;
  40231e:	4a3b      	ldr	r2, [pc, #236]	; (40240c <pvPortMalloc+0x120>)
  402320:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  402322:	e023      	b.n	40236c <pvPortMalloc+0x80>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
  402324:	4a3a      	ldr	r2, [pc, #232]	; (402410 <pvPortMalloc+0x124>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  402326:	f012 0f07 	tst.w	r2, #7
  40232a:	d01a      	beq.n	402362 <pvPortMalloc+0x76>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
  40232c:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  40232e:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
  402332:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
  402336:	1a53      	subs	r3, r2, r1
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  402338:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  40233a:	4834      	ldr	r0, [pc, #208]	; (40240c <pvPortMalloc+0x120>)
  40233c:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
  40233e:	2100      	movs	r1, #0
  402340:	6041      	str	r1, [r0, #4]
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
  402342:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
  402344:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  402346:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( BlockLink_t * ) uxAddress;
  40234a:	482e      	ldr	r0, [pc, #184]	; (402404 <pvPortMalloc+0x118>)
  40234c:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
  40234e:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
  402350:	6019      	str	r1, [r3, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
  402352:	1a99      	subs	r1, r3, r2
  402354:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  402356:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  402358:	4b2e      	ldr	r3, [pc, #184]	; (402414 <pvPortMalloc+0x128>)
  40235a:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  40235c:	4b2a      	ldr	r3, [pc, #168]	; (402408 <pvPortMalloc+0x11c>)
  40235e:	6019      	str	r1, [r3, #0]
}
  402360:	e7cb      	b.n	4022fa <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  402362:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  402366:	e7e8      	b.n	40233a <pvPortMalloc+0x4e>
  402368:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  40236a:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40236c:	6863      	ldr	r3, [r4, #4]
  40236e:	428b      	cmp	r3, r1
  402370:	d202      	bcs.n	402378 <pvPortMalloc+0x8c>
  402372:	6823      	ldr	r3, [r4, #0]
  402374:	2b00      	cmp	r3, #0
  402376:	d1f7      	bne.n	402368 <pvPortMalloc+0x7c>
                if( pxBlock != pxEnd )
  402378:	4b22      	ldr	r3, [pc, #136]	; (402404 <pvPortMalloc+0x118>)
  40237a:	681b      	ldr	r3, [r3, #0]
  40237c:	42a3      	cmp	r3, r4
  40237e:	d03b      	beq.n	4023f8 <pvPortMalloc+0x10c>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  402380:	6816      	ldr	r6, [r2, #0]
  402382:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  402384:	6823      	ldr	r3, [r4, #0]
  402386:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  402388:	eba0 030c 	sub.w	r3, r0, ip
  40238c:	6862      	ldr	r2, [r4, #4]
  40238e:	4413      	add	r3, r2
  402390:	2b10      	cmp	r3, #16
  402392:	d910      	bls.n	4023b6 <pvPortMalloc+0xca>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  402394:	1860      	adds	r0, r4, r1
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  402396:	f010 0f07 	tst.w	r0, #7
  40239a:	d008      	beq.n	4023ae <pvPortMalloc+0xc2>
  40239c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4023a0:	f383 8811 	msr	BASEPRI, r3
  4023a4:	f3bf 8f6f 	isb	sy
  4023a8:	f3bf 8f4f 	dsb	sy
  4023ac:	e7fe      	b.n	4023ac <pvPortMalloc+0xc0>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4023ae:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  4023b0:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
  4023b2:	f7ff ff6d 	bl	402290 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  4023b6:	6863      	ldr	r3, [r4, #4]
  4023b8:	1aed      	subs	r5, r5, r3
  4023ba:	4a13      	ldr	r2, [pc, #76]	; (402408 <pvPortMalloc+0x11c>)
  4023bc:	6015      	str	r5, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  4023be:	4a15      	ldr	r2, [pc, #84]	; (402414 <pvPortMalloc+0x128>)
  4023c0:	6812      	ldr	r2, [r2, #0]
  4023c2:	4295      	cmp	r5, r2
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  4023c4:	bf3c      	itt	cc
  4023c6:	4a13      	ldrcc	r2, [pc, #76]	; (402414 <pvPortMalloc+0x128>)
  4023c8:	6015      	strcc	r5, [r2, #0]
                    heapALLOCATE_BLOCK( pxBlock );
  4023ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4023ce:	6063      	str	r3, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  4023d0:	2300      	movs	r3, #0
  4023d2:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  4023d4:	4a10      	ldr	r2, [pc, #64]	; (402418 <pvPortMalloc+0x12c>)
  4023d6:	6813      	ldr	r3, [r2, #0]
  4023d8:	3301      	adds	r3, #1
  4023da:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  4023dc:	f7ff f998 	bl	401710 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
  4023e0:	f016 0f07 	tst.w	r6, #7
  4023e4:	d00b      	beq.n	4023fe <pvPortMalloc+0x112>
  4023e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4023ea:	f383 8811 	msr	BASEPRI, r3
  4023ee:	f3bf 8f6f 	isb	sy
  4023f2:	f3bf 8f4f 	dsb	sy
  4023f6:	e7fe      	b.n	4023f6 <pvPortMalloc+0x10a>
    ( void ) xTaskResumeAll();
  4023f8:	f7ff f98a 	bl	401710 <xTaskResumeAll>
  4023fc:	2600      	movs	r6, #0
}
  4023fe:	4630      	mov	r0, r6
  402400:	bd70      	pop	{r4, r5, r6, pc}
  402402:	bf00      	nop
  402404:	2000062c 	.word	0x2000062c
  402408:	20000628 	.word	0x20000628
  40240c:	20000630 	.word	0x20000630
  402410:	20000638 	.word	0x20000638
  402414:	20000624 	.word	0x20000624
  402418:	20000620 	.word	0x20000620

0040241c <vPortFree>:
    if( pv != NULL )
  40241c:	b388      	cbz	r0, 402482 <vPortFree+0x66>
{
  40241e:	b510      	push	{r4, lr}
  402420:	4604      	mov	r4, r0
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
  402422:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402426:	2b00      	cmp	r3, #0
  402428:	db08      	blt.n	40243c <vPortFree+0x20>
  40242a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40242e:	f383 8811 	msr	BASEPRI, r3
  402432:	f3bf 8f6f 	isb	sy
  402436:	f3bf 8f4f 	dsb	sy
  40243a:	e7fe      	b.n	40243a <vPortFree+0x1e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  40243c:	f850 2c08 	ldr.w	r2, [r0, #-8]
  402440:	b142      	cbz	r2, 402454 <vPortFree+0x38>
  402442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402446:	f383 8811 	msr	BASEPRI, r3
  40244a:	f3bf 8f6f 	isb	sy
  40244e:	f3bf 8f4f 	dsb	sy
  402452:	e7fe      	b.n	402452 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
  402454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  402458:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
  40245c:	f7ff f862 	bl	401524 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
  402460:	4a08      	ldr	r2, [pc, #32]	; (402484 <vPortFree+0x68>)
  402462:	f854 3c04 	ldr.w	r3, [r4, #-4]
  402466:	6811      	ldr	r1, [r2, #0]
  402468:	440b      	add	r3, r1
  40246a:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  40246c:	f1a4 0008 	sub.w	r0, r4, #8
  402470:	f7ff ff0e 	bl	402290 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
  402474:	4a04      	ldr	r2, [pc, #16]	; (402488 <vPortFree+0x6c>)
  402476:	6813      	ldr	r3, [r2, #0]
  402478:	3301      	adds	r3, #1
  40247a:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  40247c:	f7ff f948 	bl	401710 <xTaskResumeAll>
}
  402480:	bd10      	pop	{r4, pc}
  402482:	4770      	bx	lr
  402484:	20000628 	.word	0x20000628
  402488:	2000061c 	.word	0x2000061c

0040248c <atexit>:
  40248c:	2300      	movs	r3, #0
  40248e:	4601      	mov	r1, r0
  402490:	461a      	mov	r2, r3
  402492:	4618      	mov	r0, r3
  402494:	f000 b926 	b.w	4026e4 <__register_exitproc>

00402498 <__libc_fini_array>:
  402498:	b538      	push	{r3, r4, r5, lr}
  40249a:	4d08      	ldr	r5, [pc, #32]	; (4024bc <__libc_fini_array+0x24>)
  40249c:	4b08      	ldr	r3, [pc, #32]	; (4024c0 <__libc_fini_array+0x28>)
  40249e:	1aed      	subs	r5, r5, r3
  4024a0:	10ac      	asrs	r4, r5, #2
  4024a2:	d007      	beq.n	4024b4 <__libc_fini_array+0x1c>
  4024a4:	3d04      	subs	r5, #4
  4024a6:	441d      	add	r5, r3
  4024a8:	3c01      	subs	r4, #1
  4024aa:	f855 3904 	ldr.w	r3, [r5], #-4
  4024ae:	4798      	blx	r3
  4024b0:	2c00      	cmp	r4, #0
  4024b2:	d1f9      	bne.n	4024a8 <__libc_fini_array+0x10>
  4024b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4024b8:	f000 b97c 	b.w	4027b4 <_fini>
  4024bc:	004027c4 	.word	0x004027c4
  4024c0:	004027c0 	.word	0x004027c0

004024c4 <__libc_init_array>:
  4024c4:	b570      	push	{r4, r5, r6, lr}
  4024c6:	4e0d      	ldr	r6, [pc, #52]	; (4024fc <__libc_init_array+0x38>)
  4024c8:	4d0d      	ldr	r5, [pc, #52]	; (402500 <__libc_init_array+0x3c>)
  4024ca:	1b76      	subs	r6, r6, r5
  4024cc:	10b6      	asrs	r6, r6, #2
  4024ce:	d006      	beq.n	4024de <__libc_init_array+0x1a>
  4024d0:	2400      	movs	r4, #0
  4024d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4024d6:	3401      	adds	r4, #1
  4024d8:	4798      	blx	r3
  4024da:	42a6      	cmp	r6, r4
  4024dc:	d1f9      	bne.n	4024d2 <__libc_init_array+0xe>
  4024de:	4e09      	ldr	r6, [pc, #36]	; (402504 <__libc_init_array+0x40>)
  4024e0:	4d09      	ldr	r5, [pc, #36]	; (402508 <__libc_init_array+0x44>)
  4024e2:	1b76      	subs	r6, r6, r5
  4024e4:	f000 f95c 	bl	4027a0 <_init>
  4024e8:	10b6      	asrs	r6, r6, #2
  4024ea:	d006      	beq.n	4024fa <__libc_init_array+0x36>
  4024ec:	2400      	movs	r4, #0
  4024ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4024f2:	3401      	adds	r4, #1
  4024f4:	4798      	blx	r3
  4024f6:	42a6      	cmp	r6, r4
  4024f8:	d1f9      	bne.n	4024ee <__libc_init_array+0x2a>
  4024fa:	bd70      	pop	{r4, r5, r6, pc}
  4024fc:	004027ac 	.word	0x004027ac
  402500:	004027ac 	.word	0x004027ac
  402504:	004027b4 	.word	0x004027b4
  402508:	004027ac 	.word	0x004027ac

0040250c <memcpy>:
  40250c:	4684      	mov	ip, r0
  40250e:	ea41 0300 	orr.w	r3, r1, r0
  402512:	f013 0303 	ands.w	r3, r3, #3
  402516:	d16d      	bne.n	4025f4 <memcpy+0xe8>
  402518:	3a40      	subs	r2, #64	; 0x40
  40251a:	d341      	bcc.n	4025a0 <memcpy+0x94>
  40251c:	f851 3b04 	ldr.w	r3, [r1], #4
  402520:	f840 3b04 	str.w	r3, [r0], #4
  402524:	f851 3b04 	ldr.w	r3, [r1], #4
  402528:	f840 3b04 	str.w	r3, [r0], #4
  40252c:	f851 3b04 	ldr.w	r3, [r1], #4
  402530:	f840 3b04 	str.w	r3, [r0], #4
  402534:	f851 3b04 	ldr.w	r3, [r1], #4
  402538:	f840 3b04 	str.w	r3, [r0], #4
  40253c:	f851 3b04 	ldr.w	r3, [r1], #4
  402540:	f840 3b04 	str.w	r3, [r0], #4
  402544:	f851 3b04 	ldr.w	r3, [r1], #4
  402548:	f840 3b04 	str.w	r3, [r0], #4
  40254c:	f851 3b04 	ldr.w	r3, [r1], #4
  402550:	f840 3b04 	str.w	r3, [r0], #4
  402554:	f851 3b04 	ldr.w	r3, [r1], #4
  402558:	f840 3b04 	str.w	r3, [r0], #4
  40255c:	f851 3b04 	ldr.w	r3, [r1], #4
  402560:	f840 3b04 	str.w	r3, [r0], #4
  402564:	f851 3b04 	ldr.w	r3, [r1], #4
  402568:	f840 3b04 	str.w	r3, [r0], #4
  40256c:	f851 3b04 	ldr.w	r3, [r1], #4
  402570:	f840 3b04 	str.w	r3, [r0], #4
  402574:	f851 3b04 	ldr.w	r3, [r1], #4
  402578:	f840 3b04 	str.w	r3, [r0], #4
  40257c:	f851 3b04 	ldr.w	r3, [r1], #4
  402580:	f840 3b04 	str.w	r3, [r0], #4
  402584:	f851 3b04 	ldr.w	r3, [r1], #4
  402588:	f840 3b04 	str.w	r3, [r0], #4
  40258c:	f851 3b04 	ldr.w	r3, [r1], #4
  402590:	f840 3b04 	str.w	r3, [r0], #4
  402594:	f851 3b04 	ldr.w	r3, [r1], #4
  402598:	f840 3b04 	str.w	r3, [r0], #4
  40259c:	3a40      	subs	r2, #64	; 0x40
  40259e:	d2bd      	bcs.n	40251c <memcpy+0x10>
  4025a0:	3230      	adds	r2, #48	; 0x30
  4025a2:	d311      	bcc.n	4025c8 <memcpy+0xbc>
  4025a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4025a8:	f840 3b04 	str.w	r3, [r0], #4
  4025ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4025b0:	f840 3b04 	str.w	r3, [r0], #4
  4025b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4025b8:	f840 3b04 	str.w	r3, [r0], #4
  4025bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4025c0:	f840 3b04 	str.w	r3, [r0], #4
  4025c4:	3a10      	subs	r2, #16
  4025c6:	d2ed      	bcs.n	4025a4 <memcpy+0x98>
  4025c8:	320c      	adds	r2, #12
  4025ca:	d305      	bcc.n	4025d8 <memcpy+0xcc>
  4025cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4025d0:	f840 3b04 	str.w	r3, [r0], #4
  4025d4:	3a04      	subs	r2, #4
  4025d6:	d2f9      	bcs.n	4025cc <memcpy+0xc0>
  4025d8:	3204      	adds	r2, #4
  4025da:	d008      	beq.n	4025ee <memcpy+0xe2>
  4025dc:	07d2      	lsls	r2, r2, #31
  4025de:	bf1c      	itt	ne
  4025e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4025e4:	f800 3b01 	strbne.w	r3, [r0], #1
  4025e8:	d301      	bcc.n	4025ee <memcpy+0xe2>
  4025ea:	880b      	ldrh	r3, [r1, #0]
  4025ec:	8003      	strh	r3, [r0, #0]
  4025ee:	4660      	mov	r0, ip
  4025f0:	4770      	bx	lr
  4025f2:	bf00      	nop
  4025f4:	2a08      	cmp	r2, #8
  4025f6:	d313      	bcc.n	402620 <memcpy+0x114>
  4025f8:	078b      	lsls	r3, r1, #30
  4025fa:	d08d      	beq.n	402518 <memcpy+0xc>
  4025fc:	f010 0303 	ands.w	r3, r0, #3
  402600:	d08a      	beq.n	402518 <memcpy+0xc>
  402602:	f1c3 0304 	rsb	r3, r3, #4
  402606:	1ad2      	subs	r2, r2, r3
  402608:	07db      	lsls	r3, r3, #31
  40260a:	bf1c      	itt	ne
  40260c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402610:	f800 3b01 	strbne.w	r3, [r0], #1
  402614:	d380      	bcc.n	402518 <memcpy+0xc>
  402616:	f831 3b02 	ldrh.w	r3, [r1], #2
  40261a:	f820 3b02 	strh.w	r3, [r0], #2
  40261e:	e77b      	b.n	402518 <memcpy+0xc>
  402620:	3a04      	subs	r2, #4
  402622:	d3d9      	bcc.n	4025d8 <memcpy+0xcc>
  402624:	3a01      	subs	r2, #1
  402626:	f811 3b01 	ldrb.w	r3, [r1], #1
  40262a:	f800 3b01 	strb.w	r3, [r0], #1
  40262e:	d2f9      	bcs.n	402624 <memcpy+0x118>
  402630:	780b      	ldrb	r3, [r1, #0]
  402632:	7003      	strb	r3, [r0, #0]
  402634:	784b      	ldrb	r3, [r1, #1]
  402636:	7043      	strb	r3, [r0, #1]
  402638:	788b      	ldrb	r3, [r1, #2]
  40263a:	7083      	strb	r3, [r0, #2]
  40263c:	4660      	mov	r0, ip
  40263e:	4770      	bx	lr

00402640 <memset>:
  402640:	0783      	lsls	r3, r0, #30
  402642:	b530      	push	{r4, r5, lr}
  402644:	d048      	beq.n	4026d8 <memset+0x98>
  402646:	1e54      	subs	r4, r2, #1
  402648:	2a00      	cmp	r2, #0
  40264a:	d03f      	beq.n	4026cc <memset+0x8c>
  40264c:	b2ca      	uxtb	r2, r1
  40264e:	4603      	mov	r3, r0
  402650:	e001      	b.n	402656 <memset+0x16>
  402652:	3c01      	subs	r4, #1
  402654:	d33a      	bcc.n	4026cc <memset+0x8c>
  402656:	f803 2b01 	strb.w	r2, [r3], #1
  40265a:	079d      	lsls	r5, r3, #30
  40265c:	d1f9      	bne.n	402652 <memset+0x12>
  40265e:	2c03      	cmp	r4, #3
  402660:	d92d      	bls.n	4026be <memset+0x7e>
  402662:	b2cd      	uxtb	r5, r1
  402664:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402668:	2c0f      	cmp	r4, #15
  40266a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40266e:	d936      	bls.n	4026de <memset+0x9e>
  402670:	f1a4 0210 	sub.w	r2, r4, #16
  402674:	f022 0c0f 	bic.w	ip, r2, #15
  402678:	f103 0e20 	add.w	lr, r3, #32
  40267c:	44e6      	add	lr, ip
  40267e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
  402682:	f103 0210 	add.w	r2, r3, #16
  402686:	e942 5504 	strd	r5, r5, [r2, #-16]
  40268a:	e942 5502 	strd	r5, r5, [r2, #-8]
  40268e:	3210      	adds	r2, #16
  402690:	4572      	cmp	r2, lr
  402692:	d1f8      	bne.n	402686 <memset+0x46>
  402694:	f10c 0201 	add.w	r2, ip, #1
  402698:	f014 0f0c 	tst.w	r4, #12
  40269c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  4026a0:	f004 0c0f 	and.w	ip, r4, #15
  4026a4:	d013      	beq.n	4026ce <memset+0x8e>
  4026a6:	f1ac 0304 	sub.w	r3, ip, #4
  4026aa:	f023 0303 	bic.w	r3, r3, #3
  4026ae:	3304      	adds	r3, #4
  4026b0:	4413      	add	r3, r2
  4026b2:	f842 5b04 	str.w	r5, [r2], #4
  4026b6:	4293      	cmp	r3, r2
  4026b8:	d1fb      	bne.n	4026b2 <memset+0x72>
  4026ba:	f00c 0403 	and.w	r4, ip, #3
  4026be:	b12c      	cbz	r4, 4026cc <memset+0x8c>
  4026c0:	b2c9      	uxtb	r1, r1
  4026c2:	441c      	add	r4, r3
  4026c4:	f803 1b01 	strb.w	r1, [r3], #1
  4026c8:	429c      	cmp	r4, r3
  4026ca:	d1fb      	bne.n	4026c4 <memset+0x84>
  4026cc:	bd30      	pop	{r4, r5, pc}
  4026ce:	4664      	mov	r4, ip
  4026d0:	4613      	mov	r3, r2
  4026d2:	2c00      	cmp	r4, #0
  4026d4:	d1f4      	bne.n	4026c0 <memset+0x80>
  4026d6:	e7f9      	b.n	4026cc <memset+0x8c>
  4026d8:	4603      	mov	r3, r0
  4026da:	4614      	mov	r4, r2
  4026dc:	e7bf      	b.n	40265e <memset+0x1e>
  4026de:	461a      	mov	r2, r3
  4026e0:	46a4      	mov	ip, r4
  4026e2:	e7e0      	b.n	4026a6 <memset+0x66>

004026e4 <__register_exitproc>:
  4026e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4026e8:	4d1d      	ldr	r5, [pc, #116]	; (402760 <__register_exitproc+0x7c>)
  4026ea:	4606      	mov	r6, r0
  4026ec:	6828      	ldr	r0, [r5, #0]
  4026ee:	4698      	mov	r8, r3
  4026f0:	460f      	mov	r7, r1
  4026f2:	4691      	mov	r9, r2
  4026f4:	f000 f842 	bl	40277c <__retarget_lock_acquire_recursive>
  4026f8:	4b1a      	ldr	r3, [pc, #104]	; (402764 <__register_exitproc+0x80>)
  4026fa:	681b      	ldr	r3, [r3, #0]
  4026fc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
  402700:	b31c      	cbz	r4, 40274a <__register_exitproc+0x66>
  402702:	6828      	ldr	r0, [r5, #0]
  402704:	6865      	ldr	r5, [r4, #4]
  402706:	2d1f      	cmp	r5, #31
  402708:	dc24      	bgt.n	402754 <__register_exitproc+0x70>
  40270a:	b94e      	cbnz	r6, 402720 <__register_exitproc+0x3c>
  40270c:	1c6b      	adds	r3, r5, #1
  40270e:	3502      	adds	r5, #2
  402710:	6063      	str	r3, [r4, #4]
  402712:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
  402716:	f000 f833 	bl	402780 <__retarget_lock_release_recursive>
  40271a:	2000      	movs	r0, #0
  40271c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402720:	eb04 0185 	add.w	r1, r4, r5, lsl #2
  402724:	2301      	movs	r3, #1
  402726:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40272a:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
  40272e:	40ab      	lsls	r3, r5
  402730:	431a      	orrs	r2, r3
  402732:	2e02      	cmp	r6, #2
  402734:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
  402738:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40273c:	d1e6      	bne.n	40270c <__register_exitproc+0x28>
  40273e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
  402742:	431a      	orrs	r2, r3
  402744:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402748:	e7e0      	b.n	40270c <__register_exitproc+0x28>
  40274a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
  40274e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
  402752:	e7d6      	b.n	402702 <__register_exitproc+0x1e>
  402754:	f000 f814 	bl	402780 <__retarget_lock_release_recursive>
  402758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40275c:	e7de      	b.n	40271c <__register_exitproc+0x38>
  40275e:	bf00      	nop
  402760:	20000438 	.word	0x20000438
  402764:	0040279c 	.word	0x0040279c

00402768 <register_fini>:
  402768:	4b02      	ldr	r3, [pc, #8]	; (402774 <register_fini+0xc>)
  40276a:	b113      	cbz	r3, 402772 <register_fini+0xa>
  40276c:	4802      	ldr	r0, [pc, #8]	; (402778 <register_fini+0x10>)
  40276e:	f7ff be8d 	b.w	40248c <atexit>
  402772:	4770      	bx	lr
  402774:	00000000 	.word	0x00000000
  402778:	00402499 	.word	0x00402499

0040277c <__retarget_lock_acquire_recursive>:
  40277c:	4770      	bx	lr
  40277e:	bf00      	nop

00402780 <__retarget_lock_release_recursive>:
  402780:	4770      	bx	lr
  402782:	bf00      	nop
  402784:	00007852 	.word	0x00007852
  402788:	00005854 	.word	0x00005854
  40278c:	454c4449 	.word	0x454c4449
  402790:	00000000 	.word	0x00000000
  402794:	20726d54 	.word	0x20726d54
  402798:	00637653 	.word	0x00637653

0040279c <_global_impure_ptr>:
  40279c:	20000010                                ... 

004027a0 <_init>:
  4027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027a2:	bf00      	nop
  4027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4027a6:	bc08      	pop	{r3}
  4027a8:	469e      	mov	lr, r3
  4027aa:	4770      	bx	lr

004027ac <__init_array_start>:
  4027ac:	00402769 	.word	0x00402769

004027b0 <__frame_dummy_init_array_entry>:
  4027b0:	004000f1                                ..@.

004027b4 <_fini>:
  4027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027b6:	bf00      	nop
  4027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4027ba:	bc08      	pop	{r3}
  4027bc:	469e      	mov	lr, r3
  4027be:	4770      	bx	lr

004027c0 <__do_global_dtors_aux_fini_array_entry>:
  4027c0:	00cd 0040                                   ..@.
