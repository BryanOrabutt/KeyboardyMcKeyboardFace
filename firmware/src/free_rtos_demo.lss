
free_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002868  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00402868  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a200  2000043c  00402ca4  0002043c  2**2
                  ALLOC
  3 .stack        00003004  2000a63c  0040cea4  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      0000003c  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ffd2  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00003565  00000000  00000000  00030474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 000050fb  00000000  00000000  000339d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000b50  00000000  00000000  00038ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 000009c3  00000000  00000000  00039628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00014425  00000000  00000000  00039feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00010a8b  00000000  00000000  0004e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0005a9e3  00000000  00000000  0005ee9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001ac0  00000000  00000000  000b9880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000059  00000000  00000000  000bb340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 d6 00 20 95 08 40 00 91 08 40 00 91 08 40 00     @.. ..@...@...@.
  400010:	91 08 40 00 91 08 40 00 91 08 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	21 21 40 00 91 08 40 00 00 00 00 00 c1 21 40 00     !!@...@......!@.
  40003c:	05 22 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ."@...@...@...@.
  40004c:	91 08 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ..@...@...@...@.
  40005c:	91 08 40 00 91 08 40 00 91 08 40 00 00 00 00 00     ..@...@...@.....
  40006c:	25 07 40 00 35 07 40 00 45 07 40 00 91 08 40 00     %.@.5.@.E.@...@.
  40007c:	91 08 40 00 00 00 00 00 00 00 00 00 91 08 40 00     ..@...........@.
  40008c:	91 08 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ..@...@...@...@.
  40009c:	91 08 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ..@...@...@...@.
  4000ac:	91 08 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ..@...@...@...@.
  4000bc:	91 08 40 00 91 08 40 00 91 08 40 00 91 08 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402868 	.word	0x00402868

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b03      	ldr	r3, [pc, #12]	; (400100 <frame_dummy+0x10>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4903      	ldr	r1, [pc, #12]	; (400104 <frame_dummy+0x14>)
  4000f8:	4803      	ldr	r0, [pc, #12]	; (400108 <frame_dummy+0x18>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	bd08      	pop	{r3, pc}
  400100:	00000000 	.word	0x00000000
  400104:	20000440 	.word	0x20000440
  400108:	00402868 	.word	0x00402868

0040010c <main>:

/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
  40010c:	b508      	push	{r3, lr}
static void prvSetupHardware( void )
{
extern void SystemCoreClockUpdate( void );

	/* ASF function to setup clocking. */
	sysclk_init();
  40010e:	f000 f8c3 	bl	400298 <sysclk_init>
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  400112:	4a09      	ldr	r2, [pc, #36]	; (400138 <main+0x2c>)
  400114:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  400116:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  40011a:	041b      	lsls	r3, r3, #16
  40011c:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  40011e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  400122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  400126:	60d3      	str	r3, [r2, #12]

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping( 0 );

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
  400128:	f000 f8da 	bl	4002e0 <board_init>

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
  40012c:	f000 f89e 	bl	40026c <vParTestInitialise>
		main_blinky();
  400130:	f000 f85c 	bl	4001ec <main_blinky>
}
  400134:	2000      	movs	r0, #0
  400136:	bd08      	pop	{r3, pc}
  400138:	e000ed00 	.word	0xe000ed00

0040013c <vApplicationMallocFailedHook>:

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  40013c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400140:	f383 8811 	msr	BASEPRI, r3
  400144:	f3bf 8f6f 	isb	sy
  400148:	f3bf 8f4f 	dsb	sy
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
  40014c:	e7fe      	b.n	40014c <vApplicationMallocFailedHook+0x10>

0040014e <vApplicationIdleHook>:
	extern void vFullDemoIdleHook( void );

		vFullDemoIdleHook();
	}
	#endif /* mainCREATE_SIMPLE_BLINKY_DEMO_ONLY */
}
  40014e:	4770      	bx	lr

00400150 <vApplicationStackOverflowHook>:
  400150:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400154:	f383 8811 	msr	BASEPRI, r3
  400158:	f3bf 8f6f 	isb	sy
  40015c:	f3bf 8f4f 	dsb	sy

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
  400160:	e7fe      	b.n	400160 <vApplicationStackOverflowHook+0x10>

00400162 <vApplicationTickHook>:
	extern void vFullDemoTickHook( void );

		vFullDemoTickHook();
	}
	#endif /* mainCREATE_SIMPLE_BLINKY_DEMO_ONLY */
}
  400162:	4770      	bx	lr

00400164 <prvQueueSendTask>:
	for( ;; );
}
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
  400164:	b500      	push	{lr}
  400166:	b083      	sub	sp, #12
TickType_t xNextWakeTime;
const unsigned long ulValueToSend = 100UL;
  400168:	2364      	movs	r3, #100	; 0x64
  40016a:	9300      	str	r3, [sp, #0]

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_SEND_PARAMETER );
  40016c:	f241 1311 	movw	r3, #4369	; 0x1111
  400170:	4298      	cmp	r0, r3
  400172:	d008      	beq.n	400186 <prvQueueSendTask+0x22>
  400174:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400178:	f383 8811 	msr	BASEPRI, r3
  40017c:	f3bf 8f6f 	isb	sy
  400180:	f3bf 8f4f 	dsb	sy
  400184:	e7fe      	b.n	400184 <prvQueueSendTask+0x20>

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
  400186:	f001 f9f7 	bl	401578 <xTaskGetTickCount>
  40018a:	9001      	str	r0, [sp, #4]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  40018c:	25c8      	movs	r5, #200	; 0xc8

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
  40018e:	4c06      	ldr	r4, [pc, #24]	; (4001a8 <prvQueueSendTask+0x44>)
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  400190:	4629      	mov	r1, r5
  400192:	a801      	add	r0, sp, #4
  400194:	f001 fbae 	bl	4018f4 <xTaskDelayUntil>
		xQueueSend( xQueue, &ulValueToSend, 0U );
  400198:	2300      	movs	r3, #0
  40019a:	461a      	mov	r2, r3
  40019c:	4669      	mov	r1, sp
  40019e:	6820      	ldr	r0, [r4, #0]
  4001a0:	f000 fe3e 	bl	400e20 <xQueueGenericSend>
	for( ;; )
  4001a4:	e7f4      	b.n	400190 <prvQueueSendTask+0x2c>
  4001a6:	bf00      	nop
  4001a8:	20000458 	.word	0x20000458

004001ac <prvQueueReceiveTask>:
static void prvQueueReceiveTask( void *pvParameters )
{
unsigned long ulReceivedValue;

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_RECEIVE_PARAMETER );
  4001ac:	2822      	cmp	r0, #34	; 0x22
  4001ae:	d008      	beq.n	4001c2 <prvQueueReceiveTask+0x16>
  4001b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4001b4:	f383 8811 	msr	BASEPRI, r3
  4001b8:	f3bf 8f6f 	isb	sy
  4001bc:	f3bf 8f4f 	dsb	sy
  4001c0:	e7fe      	b.n	4001c0 <prvQueueReceiveTask+0x14>
{
  4001c2:	b500      	push	{lr}
  4001c4:	b083      	sub	sp, #12
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  4001c6:	4d08      	ldr	r5, [pc, #32]	; (4001e8 <prvQueueReceiveTask+0x3c>)

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == 100UL )
		{
			vParTestToggleLED( 0 );
  4001c8:	2600      	movs	r6, #0
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  4001ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  4001ce:	4622      	mov	r2, r4
  4001d0:	a901      	add	r1, sp, #4
  4001d2:	6828      	ldr	r0, [r5, #0]
  4001d4:	f000 ff12 	bl	400ffc <xQueueReceive>
		if( ulReceivedValue == 100UL )
  4001d8:	9b01      	ldr	r3, [sp, #4]
  4001da:	2b64      	cmp	r3, #100	; 0x64
  4001dc:	d1f7      	bne.n	4001ce <prvQueueReceiveTask+0x22>
			vParTestToggleLED( 0 );
  4001de:	4630      	mov	r0, r6
  4001e0:	f000 f84f 	bl	400282 <vParTestToggleLED>
			ulReceivedValue = 0U;
  4001e4:	9601      	str	r6, [sp, #4]
  4001e6:	e7f0      	b.n	4001ca <prvQueueReceiveTask+0x1e>
  4001e8:	20000458 	.word	0x20000458

004001ec <main_blinky>:
{
  4001ec:	b500      	push	{lr}
  4001ee:	b083      	sub	sp, #12
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
  4001f0:	2200      	movs	r2, #0
  4001f2:	2104      	movs	r1, #4
  4001f4:	2001      	movs	r0, #1
  4001f6:	f000 fde9 	bl	400dcc <xQueueGenericCreate>
  4001fa:	4b0d      	ldr	r3, [pc, #52]	; (400230 <main_blinky+0x44>)
  4001fc:	6018      	str	r0, [r3, #0]
	if( xQueue != NULL )
  4001fe:	b1a8      	cbz	r0, 40022c <main_blinky+0x40>
		xTaskCreate( prvQueueReceiveTask,					/* The function that implements the task. */
  400200:	2400      	movs	r4, #0
  400202:	9401      	str	r4, [sp, #4]
  400204:	2302      	movs	r3, #2
  400206:	9300      	str	r3, [sp, #0]
  400208:	2322      	movs	r3, #34	; 0x22
  40020a:	2282      	movs	r2, #130	; 0x82
  40020c:	4909      	ldr	r1, [pc, #36]	; (400234 <main_blinky+0x48>)
  40020e:	480a      	ldr	r0, [pc, #40]	; (400238 <main_blinky+0x4c>)
  400210:	f001 f870 	bl	4012f4 <xTaskCreate>
		xTaskCreate( prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, ( void * ) mainQUEUE_SEND_PARAMETER, mainQUEUE_SEND_TASK_PRIORITY, NULL );
  400214:	9401      	str	r4, [sp, #4]
  400216:	2301      	movs	r3, #1
  400218:	9300      	str	r3, [sp, #0]
  40021a:	f241 1311 	movw	r3, #4369	; 0x1111
  40021e:	2282      	movs	r2, #130	; 0x82
  400220:	4906      	ldr	r1, [pc, #24]	; (40023c <main_blinky+0x50>)
  400222:	4807      	ldr	r0, [pc, #28]	; (400240 <main_blinky+0x54>)
  400224:	f001 f866 	bl	4012f4 <xTaskCreate>
		vTaskStartScheduler();
  400228:	f001 f958 	bl	4014dc <vTaskStartScheduler>
	for( ;; );
  40022c:	e7fe      	b.n	40022c <main_blinky+0x40>
  40022e:	bf00      	nop
  400230:	20000458 	.word	0x20000458
  400234:	00402828 	.word	0x00402828
  400238:	004001ad 	.word	0x004001ad
  40023c:	0040282c 	.word	0x0040282c
  400240:	00400165 	.word	0x00400165

00400244 <vParTestSetLED>:
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
	if( uxLED < partestNUM_LEDS )
  400244:	b988      	cbnz	r0, 40026a <vParTestSetLED+0x26>
{
  400246:	b508      	push	{r3, lr}
		if( uxLED == partstsINVERTED_LED )
		{
			xValue = !xValue;
		}

		if( xValue != pdFALSE )
  400248:	b939      	cbnz	r1, 40025a <vParTestSetLED+0x16>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
  40024a:	f001 ff7b 	bl	402144 <vPortEnterCritical>
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
  40024e:	2057      	movs	r0, #87	; 0x57
  400250:	f000 f92a 	bl	4004a8 <pio_set_pin_low>
			}
			taskEXIT_CRITICAL();
  400254:	f001 ff98 	bl	402188 <vPortExitCritical>
				gpio_set_pin_high( ulLED[ uxLED ]);
			}
			taskEXIT_CRITICAL();
		}
	}
}
  400258:	bd08      	pop	{r3, pc}
			taskENTER_CRITICAL();
  40025a:	f001 ff73 	bl	402144 <vPortEnterCritical>
				gpio_set_pin_high( ulLED[ uxLED ]);
  40025e:	2057      	movs	r0, #87	; 0x57
  400260:	f000 f916 	bl	400490 <pio_set_pin_high>
			taskEXIT_CRITICAL();
  400264:	f001 ff90 	bl	402188 <vPortExitCritical>
}
  400268:	e7f6      	b.n	400258 <vParTestSetLED+0x14>
  40026a:	4770      	bx	lr

0040026c <vParTestInitialise>:
{
  40026c:	b508      	push	{r3, lr}
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
  40026e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400272:	2057      	movs	r0, #87	; 0x57
  400274:	f000 f934 	bl	4004e0 <pio_configure_pin>
		vParTestSetLED( ul, pdFALSE );
  400278:	2100      	movs	r1, #0
  40027a:	4608      	mov	r0, r1
  40027c:	f7ff ffe2 	bl	400244 <vParTestSetLED>
}
  400280:	bd08      	pop	{r3, pc}

00400282 <vParTestToggleLED>:
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
	if( uxLED < partestNUM_LEDS )
  400282:	b100      	cbz	r0, 400286 <vParTestToggleLED+0x4>
  400284:	4770      	bx	lr
{
  400286:	b508      	push	{r3, lr}
	{
		taskENTER_CRITICAL();
  400288:	f001 ff5c 	bl	402144 <vPortEnterCritical>
		{
			gpio_toggle_pin( ulLED[ uxLED ] );
  40028c:	2057      	movs	r0, #87	; 0x57
  40028e:	f000 f917 	bl	4004c0 <pio_toggle_pin>
		}
		taskEXIT_CRITICAL();
  400292:	f001 ff79 	bl	402188 <vPortExitCritical>
	}
}
  400296:	bd08      	pop	{r3, pc}

00400298 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400298:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40029a:	480e      	ldr	r0, [pc, #56]	; (4002d4 <sysclk_init+0x3c>)
  40029c:	f000 fbd8 	bl	400a50 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4002a0:	213e      	movs	r1, #62	; 0x3e
  4002a2:	2000      	movs	r0, #0
  4002a4:	f000 fa86 	bl	4007b4 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a8:	f000 faae 	bl	400808 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4002ac:	2800      	cmp	r0, #0
  4002ae:	d0fb      	beq.n	4002a8 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4002b0:	f000 fab2 	bl	400818 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4002b4:	4b08      	ldr	r3, [pc, #32]	; (4002d8 <sysclk_init+0x40>)
  4002b6:	4a09      	ldr	r2, [pc, #36]	; (4002dc <sysclk_init+0x44>)
  4002b8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4002ba:	f000 fab5 	bl	400828 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4002be:	2800      	cmp	r0, #0
  4002c0:	d0fb      	beq.n	4002ba <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4002c2:	2010      	movs	r0, #16
  4002c4:	f000 fa46 	bl	400754 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4002c8:	f000 fb3a 	bl	400940 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4002cc:	4801      	ldr	r0, [pc, #4]	; (4002d4 <sysclk_init+0x3c>)
  4002ce:	f000 fbbf 	bl	400a50 <system_init_flash>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4002d2:	bd08      	pop	{r3, pc}
  4002d4:	07270e00 	.word	0x07270e00
  4002d8:	400e0400 	.word	0x400e0400
  4002dc:	20133f01 	.word	0x20133f01

004002e0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4002e0:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4002e2:	482c      	ldr	r0, [pc, #176]	; (400394 <board_init+0xb4>)
  4002e4:	f000 fad0 	bl	400888 <wdt_disable>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e8:	200b      	movs	r0, #11
  4002ea:	f000 faa5 	bl	400838 <pmc_enable_periph_clk>
  4002ee:	200c      	movs	r0, #12
  4002f0:	f000 faa2 	bl	400838 <pmc_enable_periph_clk>
  4002f4:	200d      	movs	r0, #13
  4002f6:	f000 fa9f 	bl	400838 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002fa:	4b27      	ldr	r3, [pc, #156]	; (400398 <board_init+0xb8>)
  4002fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400300:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400302:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400308:	4c24      	ldr	r4, [pc, #144]	; (40039c <board_init+0xbc>)
  40030a:	2504      	movs	r5, #4
  40030c:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40030e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400312:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400314:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400318:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40031a:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40031c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400320:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400322:	f022 0204 	bic.w	r2, r2, #4
  400326:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400328:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40032a:	f022 0204 	bic.w	r2, r2, #4
  40032e:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400330:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400334:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400336:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400338:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40033c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400340:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400342:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400344:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400348:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40034c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40034e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400350:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400358:	210c      	movs	r1, #12
  40035a:	4811      	ldr	r0, [pc, #68]	; (4003a0 <board_init+0xc0>)
  40035c:	f000 f94a 	bl	4005f4 <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400360:	4e10      	ldr	r6, [pc, #64]	; (4003a4 <board_init+0xc4>)
  400362:	4631      	mov	r1, r6
  400364:	2003      	movs	r0, #3
  400366:	f000 f8bb 	bl	4004e0 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40036a:	4631      	mov	r1, r6
  40036c:	4628      	mov	r0, r5
  40036e:	f000 f8b7 	bl	4004e0 <pio_configure_pin>
		base->PIO_PUER = mask;
  400372:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400374:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400378:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40037a:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40037c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400380:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400382:	f023 0304 	bic.w	r3, r3, #4
  400386:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400388:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40038a:	f023 0304 	bic.w	r3, r3, #4
  40038e:	6763      	str	r3, [r4, #116]	; 0x74

#endif



}
  400390:	bd70      	pop	{r4, r5, r6, pc}
  400392:	bf00      	nop
  400394:	400e1450 	.word	0x400e1450
  400398:	400e1200 	.word	0x400e1200
  40039c:	400e0e00 	.word	0x400e0e00
  4003a0:	400e1000 	.word	0x400e1000
  4003a4:	08000001 	.word	0x08000001

004003a8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4003a8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4003aa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4003ae:	d02e      	beq.n	40040e <pio_set_peripheral+0x66>
  4003b0:	d813      	bhi.n	4003da <pio_set_peripheral+0x32>
  4003b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4003b6:	d01d      	beq.n	4003f4 <pio_set_peripheral+0x4c>
  4003b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4003bc:	d109      	bne.n	4003d2 <pio_set_peripheral+0x2a>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003c0:	4313      	orrs	r3, r2
  4003c2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003c4:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4003c8:	400b      	ands	r3, r1
  4003ca:	ea23 0302 	bic.w	r3, r3, r2
  4003ce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003d0:	e000      	b.n	4003d4 <pio_set_peripheral+0x2c>
	switch (ul_type) {
  4003d2:	b109      	cbz	r1, 4003d8 <pio_set_peripheral+0x30>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003d4:	6042      	str	r2, [r0, #4]
  4003d6:	e00c      	b.n	4003f2 <pio_set_peripheral+0x4a>
  4003d8:	4770      	bx	lr
	switch (ul_type) {
  4003da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4003de:	d020      	beq.n	400422 <pio_set_peripheral+0x7a>
  4003e0:	d3f8      	bcc.n	4003d4 <pio_set_peripheral+0x2c>
  4003e2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4003e6:	d004      	beq.n	4003f2 <pio_set_peripheral+0x4a>
  4003e8:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4003ec:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4003f0:	d1f0      	bne.n	4003d4 <pio_set_peripheral+0x2c>
}
  4003f2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4003f8:	400b      	ands	r3, r1
  4003fa:	ea23 0302 	bic.w	r3, r3, r2
  4003fe:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400400:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400402:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400404:	400b      	ands	r3, r1
  400406:	ea23 0302 	bic.w	r3, r3, r2
  40040a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40040c:	e7e2      	b.n	4003d4 <pio_set_peripheral+0x2c>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40040e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400410:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400412:	400b      	ands	r3, r1
  400414:	ea23 0302 	bic.w	r3, r3, r2
  400418:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40041a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40041c:	4313      	orrs	r3, r2
  40041e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400420:	e7d8      	b.n	4003d4 <pio_set_peripheral+0x2c>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400422:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400424:	4313      	orrs	r3, r2
  400426:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400428:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40042a:	4313      	orrs	r3, r2
  40042c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40042e:	e7d1      	b.n	4003d4 <pio_set_peripheral+0x2c>

00400430 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400430:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400432:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400436:	bf14      	ite	ne
  400438:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40043a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40043c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400440:	bf14      	ite	ne
  400442:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400444:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400446:	f012 0f02 	tst.w	r2, #2
  40044a:	d004      	beq.n	400456 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  40044c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400450:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400452:	6001      	str	r1, [r0, #0]
}
  400454:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
  400456:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40045a:	bf18      	it	ne
  40045c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
  400460:	e7f6      	b.n	400450 <pio_set_input+0x20>

00400462 <pio_set_output>:
{
  400462:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;
  400464:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400466:	9c01      	ldr	r4, [sp, #4]
  400468:	b144      	cbz	r4, 40047c <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40046a:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  40046c:	b143      	cbz	r3, 400480 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40046e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400470:	b142      	cbz	r2, 400484 <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
  400472:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
  400474:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400476:	6001      	str	r1, [r0, #0]
}
  400478:	bc10      	pop	{r4}
  40047a:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  40047c:	6601      	str	r1, [r0, #96]	; 0x60
  40047e:	e7f5      	b.n	40046c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400480:	6541      	str	r1, [r0, #84]	; 0x54
  400482:	e7f5      	b.n	400470 <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
  400484:	6341      	str	r1, [r0, #52]	; 0x34
  400486:	e7f5      	b.n	400474 <pio_set_output+0x12>

00400488 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400488:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40048a:	4770      	bx	lr

0040048c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40048c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40048e:	4770      	bx	lr

00400490 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400490:	0943      	lsrs	r3, r0, #5
  400492:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400496:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40049a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40049c:	f000 001f 	and.w	r0, r0, #31
  4004a0:	2201      	movs	r2, #1
  4004a2:	4082      	lsls	r2, r0
  4004a4:	631a      	str	r2, [r3, #48]	; 0x30
}
  4004a6:	4770      	bx	lr

004004a8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004a8:	0943      	lsrs	r3, r0, #5
  4004aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004ae:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004b2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004b4:	f000 001f 	and.w	r0, r0, #31
  4004b8:	2201      	movs	r2, #1
  4004ba:	4082      	lsls	r2, r0
  4004bc:	635a      	str	r2, [r3, #52]	; 0x34
}
  4004be:	4770      	bx	lr

004004c0 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004c0:	0943      	lsrs	r3, r0, #5
  4004c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004ca:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  4004cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
  4004ce:	f000 001f 	and.w	r0, r0, #31
  4004d2:	2201      	movs	r2, #1
  4004d4:	4082      	lsls	r2, r0
  4004d6:	4211      	tst	r1, r2
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004d8:	bf14      	ite	ne
  4004da:	635a      	strne	r2, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4004dc:	631a      	streq	r2, [r3, #48]	; 0x30
}
  4004de:	4770      	bx	lr

004004e0 <pio_configure_pin>:
{
  4004e0:	b570      	push	{r4, r5, r6, lr}
  4004e2:	b082      	sub	sp, #8
  4004e4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004e6:	0944      	lsrs	r4, r0, #5
  4004e8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  4004ec:	f204 7407 	addw	r4, r4, #1799	; 0x707
  4004f0:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4004f2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4004f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004fa:	d054      	beq.n	4005a6 <pio_configure_pin+0xc6>
  4004fc:	d82d      	bhi.n	40055a <pio_configure_pin+0x7a>
  4004fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400502:	d03f      	beq.n	400584 <pio_configure_pin+0xa4>
  400504:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400508:	d110      	bne.n	40052c <pio_configure_pin+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40050a:	f000 001f 	and.w	r0, r0, #31
  40050e:	2601      	movs	r6, #1
  400510:	4086      	lsls	r6, r0
  400512:	4632      	mov	r2, r6
  400514:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400518:	4620      	mov	r0, r4
  40051a:	f7ff ff45 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  40051e:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  400522:	bf12      	itee	ne
  400524:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400526:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400528:	2001      	moveq	r0, #1
  40052a:	e014      	b.n	400556 <pio_configure_pin+0x76>
	switch (ul_flags & PIO_TYPE_Msk) {
  40052c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400530:	d110      	bne.n	400554 <pio_configure_pin+0x74>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400532:	f000 001f 	and.w	r0, r0, #31
  400536:	2601      	movs	r6, #1
  400538:	4086      	lsls	r6, r0
  40053a:	4632      	mov	r2, r6
  40053c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400540:	4620      	mov	r0, r4
  400542:	f7ff ff31 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400546:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  40054a:	bf12      	itee	ne
  40054c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40054e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400550:	2001      	moveq	r0, #1
  400552:	e000      	b.n	400556 <pio_configure_pin+0x76>
	switch (ul_flags & PIO_TYPE_Msk) {
  400554:	2000      	movs	r0, #0
}
  400556:	b002      	add	sp, #8
  400558:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_flags & PIO_TYPE_Msk) {
  40055a:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
  40055e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  400562:	d031      	beq.n	4005c8 <pio_configure_pin+0xe8>
  400564:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400568:	bf18      	it	ne
  40056a:	2000      	movne	r0, #0
  40056c:	d1f3      	bne.n	400556 <pio_configure_pin+0x76>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40056e:	f000 011f 	and.w	r1, r0, #31
  400572:	2601      	movs	r6, #1
  400574:	462a      	mov	r2, r5
  400576:	fa06 f101 	lsl.w	r1, r6, r1
  40057a:	4620      	mov	r0, r4
  40057c:	f7ff ff58 	bl	400430 <pio_set_input>
	return 1;
  400580:	4630      	mov	r0, r6
		break;
  400582:	e7e8      	b.n	400556 <pio_configure_pin+0x76>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400584:	f000 001f 	and.w	r0, r0, #31
  400588:	2601      	movs	r6, #1
  40058a:	4086      	lsls	r6, r0
  40058c:	4632      	mov	r2, r6
  40058e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400592:	4620      	mov	r0, r4
  400594:	f7ff ff08 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400598:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  40059c:	bf12      	itee	ne
  40059e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005a0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4005a2:	2001      	moveq	r0, #1
  4005a4:	e7d7      	b.n	400556 <pio_configure_pin+0x76>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4005a6:	f000 001f 	and.w	r0, r0, #31
  4005aa:	2601      	movs	r6, #1
  4005ac:	4086      	lsls	r6, r0
  4005ae:	4632      	mov	r2, r6
  4005b0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005b4:	4620      	mov	r0, r4
  4005b6:	f7ff fef7 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  4005ba:	f015 0001 	ands.w	r0, r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005be:	bf12      	itee	ne
  4005c0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005c2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4005c4:	2001      	moveq	r0, #1
  4005c6:	e7c6      	b.n	400556 <pio_configure_pin+0x76>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005c8:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005cc:	f000 011f 	and.w	r1, r0, #31
  4005d0:	2601      	movs	r6, #1
  4005d2:	ea05 0306 	and.w	r3, r5, r6
  4005d6:	9300      	str	r3, [sp, #0]
  4005d8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005dc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005e0:	bf14      	ite	ne
  4005e2:	2200      	movne	r2, #0
  4005e4:	2201      	moveq	r2, #1
  4005e6:	fa06 f101 	lsl.w	r1, r6, r1
  4005ea:	4620      	mov	r0, r4
  4005ec:	f7ff ff39 	bl	400462 <pio_set_output>
	return 1;
  4005f0:	4630      	mov	r0, r6
		break;
  4005f2:	e7b0      	b.n	400556 <pio_configure_pin+0x76>

004005f4 <pio_configure_pin_group>:
{
  4005f4:	b570      	push	{r4, r5, r6, lr}
  4005f6:	b082      	sub	sp, #8
  4005f8:	4605      	mov	r5, r0
  4005fa:	460e      	mov	r6, r1
  4005fc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4005fe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400606:	d040      	beq.n	40068a <pio_configure_pin_group+0x96>
  400608:	d823      	bhi.n	400652 <pio_configure_pin_group+0x5e>
  40060a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40060e:	d030      	beq.n	400672 <pio_configure_pin_group+0x7e>
  400610:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400614:	d10b      	bne.n	40062e <pio_configure_pin_group+0x3a>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400616:	460a      	mov	r2, r1
  400618:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40061c:	f7ff fec4 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400620:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  400624:	bf12      	itee	ne
  400626:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400628:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40062a:	2001      	moveq	r0, #1
  40062c:	e00f      	b.n	40064e <pio_configure_pin_group+0x5a>
	switch (ul_flags & PIO_TYPE_Msk) {
  40062e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400632:	d10b      	bne.n	40064c <pio_configure_pin_group+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400634:	460a      	mov	r2, r1
  400636:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40063a:	f7ff feb5 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  40063e:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  400642:	bf12      	itee	ne
  400644:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400646:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400648:	2001      	moveq	r0, #1
  40064a:	e000      	b.n	40064e <pio_configure_pin_group+0x5a>
	switch (ul_flags & PIO_TYPE_Msk) {
  40064c:	2000      	movs	r0, #0
}
  40064e:	b002      	add	sp, #8
  400650:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_flags & PIO_TYPE_Msk) {
  400652:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  400656:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  40065a:	d022      	beq.n	4006a2 <pio_configure_pin_group+0xae>
  40065c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400660:	bf18      	it	ne
  400662:	2000      	movne	r0, #0
  400664:	d1f3      	bne.n	40064e <pio_configure_pin_group+0x5a>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400666:	4622      	mov	r2, r4
  400668:	4628      	mov	r0, r5
  40066a:	f7ff fee1 	bl	400430 <pio_set_input>
	return 1;
  40066e:	2001      	movs	r0, #1
		break;
  400670:	e7ed      	b.n	40064e <pio_configure_pin_group+0x5a>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400672:	460a      	mov	r2, r1
  400674:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400678:	f7ff fe96 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  40067c:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  400680:	bf12      	itee	ne
  400682:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400684:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400686:	2001      	moveq	r0, #1
  400688:	e7e1      	b.n	40064e <pio_configure_pin_group+0x5a>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40068a:	460a      	mov	r2, r1
  40068c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400690:	f7ff fe8a 	bl	4003a8 <pio_set_peripheral>
	if (ul_pull_up_enable) {
  400694:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
  400698:	bf12      	itee	ne
  40069a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40069c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40069e:	2001      	moveq	r0, #1
  4006a0:	e7d5      	b.n	40064e <pio_configure_pin_group+0x5a>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4006a2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4006a6:	f004 0301 	and.w	r3, r4, #1
  4006aa:	9300      	str	r3, [sp, #0]
  4006ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4006b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4006b4:	bf14      	ite	ne
  4006b6:	2200      	movne	r2, #0
  4006b8:	2201      	moveq	r2, #1
  4006ba:	f7ff fed2 	bl	400462 <pio_set_output>
	return 1;
  4006be:	2001      	movs	r0, #1
		break;
  4006c0:	e7c5      	b.n	40064e <pio_configure_pin_group+0x5a>
	...

004006c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006c8:	4607      	mov	r7, r0
  4006ca:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006cc:	f7ff fedc 	bl	400488 <pio_get_interrupt_status>
  4006d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4006d2:	4638      	mov	r0, r7
  4006d4:	f7ff feda 	bl	40048c <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4006d8:	4005      	ands	r5, r0
  4006da:	d013      	beq.n	400704 <pio_handler_process+0x40>
  4006dc:	4c0e      	ldr	r4, [pc, #56]	; (400718 <pio_handler_process+0x54>)
  4006de:	f104 0970 	add.w	r9, r4, #112	; 0x70
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4006e2:	e003      	b.n	4006ec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006e4:	3410      	adds	r4, #16
  4006e6:	454c      	cmp	r4, r9
  4006e8:	d00c      	beq.n	400704 <pio_handler_process+0x40>
		while (status != 0) {
  4006ea:	b15d      	cbz	r5, 400704 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4006ec:	6820      	ldr	r0, [r4, #0]
  4006ee:	42b0      	cmp	r0, r6
  4006f0:	d1f8      	bne.n	4006e4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006f2:	6861      	ldr	r1, [r4, #4]
  4006f4:	4229      	tst	r1, r5
  4006f6:	d0f5      	beq.n	4006e4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006f8:	68e3      	ldr	r3, [r4, #12]
  4006fa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4006fc:	6863      	ldr	r3, [r4, #4]
  4006fe:	ea25 0503 	bic.w	r5, r5, r3
  400702:	e7ef      	b.n	4006e4 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400704:	4b05      	ldr	r3, [pc, #20]	; (40071c <pio_handler_process+0x58>)
  400706:	681b      	ldr	r3, [r3, #0]
  400708:	b123      	cbz	r3, 400714 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40070a:	4b05      	ldr	r3, [pc, #20]	; (400720 <pio_handler_process+0x5c>)
  40070c:	681b      	ldr	r3, [r3, #0]
  40070e:	b10b      	cbz	r3, 400714 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400710:	4638      	mov	r0, r7
  400712:	4798      	blx	r3
		}
	}
#endif
}
  400714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400718:	20000464 	.word	0x20000464
  40071c:	2000045c 	.word	0x2000045c
  400720:	20000460 	.word	0x20000460

00400724 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400724:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400726:	210b      	movs	r1, #11
  400728:	4801      	ldr	r0, [pc, #4]	; (400730 <PIOA_Handler+0xc>)
  40072a:	f7ff ffcb 	bl	4006c4 <pio_handler_process>
}
  40072e:	bd08      	pop	{r3, pc}
  400730:	400e0e00 	.word	0x400e0e00

00400734 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400734:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400736:	210c      	movs	r1, #12
  400738:	4801      	ldr	r0, [pc, #4]	; (400740 <PIOB_Handler+0xc>)
  40073a:	f7ff ffc3 	bl	4006c4 <pio_handler_process>
}
  40073e:	bd08      	pop	{r3, pc}
  400740:	400e1000 	.word	0x400e1000

00400744 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400744:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400746:	210d      	movs	r1, #13
  400748:	4801      	ldr	r0, [pc, #4]	; (400750 <PIOC_Handler+0xc>)
  40074a:	f7ff ffbb 	bl	4006c4 <pio_handler_process>
}
  40074e:	bd08      	pop	{r3, pc}
  400750:	400e1200 	.word	0x400e1200

00400754 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400754:	4a16      	ldr	r2, [pc, #88]	; (4007b0 <pmc_switch_mck_to_pllack+0x5c>)
  400756:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40075c:	4303      	orrs	r3, r0
  40075e:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400760:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400762:	f013 0f08 	tst.w	r3, #8
  400766:	d10a      	bne.n	40077e <pmc_switch_mck_to_pllack+0x2a>
  400768:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40076c:	4910      	ldr	r1, [pc, #64]	; (4007b0 <pmc_switch_mck_to_pllack+0x5c>)
  40076e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400770:	f012 0f08 	tst.w	r2, #8
  400774:	d103      	bne.n	40077e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400776:	3b01      	subs	r3, #1
  400778:	d1f9      	bne.n	40076e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40077a:	2001      	movs	r0, #1
  40077c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40077e:	4a0c      	ldr	r2, [pc, #48]	; (4007b0 <pmc_switch_mck_to_pllack+0x5c>)
  400780:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400782:	f023 0303 	bic.w	r3, r3, #3
  400786:	f043 0302 	orr.w	r3, r3, #2
  40078a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40078c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40078e:	f010 0008 	ands.w	r0, r0, #8
  400792:	d10a      	bne.n	4007aa <pmc_switch_mck_to_pllack+0x56>
  400794:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400798:	4905      	ldr	r1, [pc, #20]	; (4007b0 <pmc_switch_mck_to_pllack+0x5c>)
  40079a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40079c:	f012 0f08 	tst.w	r2, #8
  4007a0:	d105      	bne.n	4007ae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007a2:	3b01      	subs	r3, #1
  4007a4:	d1f9      	bne.n	40079a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007a6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007a8:	4770      	bx	lr
	return 0;
  4007aa:	2000      	movs	r0, #0
  4007ac:	4770      	bx	lr
  4007ae:	4770      	bx	lr
  4007b0:	400e0400 	.word	0x400e0400

004007b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007b4:	b138      	cbz	r0, 4007c6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007b6:	4911      	ldr	r1, [pc, #68]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007b8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007ba:	4a11      	ldr	r2, [pc, #68]	; (400800 <pmc_switch_mainck_to_xtal+0x4c>)
  4007bc:	401a      	ands	r2, r3
  4007be:	4b11      	ldr	r3, [pc, #68]	; (400804 <pmc_switch_mainck_to_xtal+0x50>)
  4007c0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007c2:	620b      	str	r3, [r1, #32]
  4007c4:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007c6:	480d      	ldr	r0, [pc, #52]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007c8:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007ca:	0209      	lsls	r1, r1, #8
  4007cc:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007ce:	f422 125c 	bic.w	r2, r2, #3604480	; 0x370000
  4007d2:	f022 0203 	bic.w	r2, r2, #3
  4007d6:	4313      	orrs	r3, r2
  4007d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007dc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007e0:	6203      	str	r3, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007e2:	4602      	mov	r2, r0
  4007e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e6:	f013 0f01 	tst.w	r3, #1
  4007ea:	d0fb      	beq.n	4007e4 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007ec:	4a03      	ldr	r2, [pc, #12]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007ee:	6a13      	ldr	r3, [r2, #32]
  4007f0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007f8:	6213      	str	r3, [r2, #32]
	}
}
  4007fa:	4770      	bx	lr
  4007fc:	400e0400 	.word	0x400e0400
  400800:	fec8fffc 	.word	0xfec8fffc
  400804:	01370002 	.word	0x01370002

00400808 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400808:	4b02      	ldr	r3, [pc, #8]	; (400814 <pmc_osc_is_ready_mainck+0xc>)
  40080a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40080c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400810:	4770      	bx	lr
  400812:	bf00      	nop
  400814:	400e0400 	.word	0x400e0400

00400818 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400818:	4b02      	ldr	r3, [pc, #8]	; (400824 <pmc_disable_pllack+0xc>)
  40081a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40081e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	400e0400 	.word	0x400e0400

00400828 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400828:	4b02      	ldr	r3, [pc, #8]	; (400834 <pmc_is_locked_pllack+0xc>)
  40082a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40082c:	f000 0002 	and.w	r0, r0, #2
  400830:	4770      	bx	lr
  400832:	bf00      	nop
  400834:	400e0400 	.word	0x400e0400

00400838 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400838:	2822      	cmp	r0, #34	; 0x22
  40083a:	d81c      	bhi.n	400876 <pmc_enable_periph_clk+0x3e>
		return 1;
	}

	if (ul_id < 32) {
  40083c:	281f      	cmp	r0, #31
  40083e:	d80b      	bhi.n	400858 <pmc_enable_periph_clk+0x20>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400840:	4b10      	ldr	r3, [pc, #64]	; (400884 <pmc_enable_periph_clk+0x4c>)
  400842:	699a      	ldr	r2, [r3, #24]
  400844:	2301      	movs	r3, #1
  400846:	4083      	lsls	r3, r0
  400848:	4393      	bics	r3, r2
  40084a:	d016      	beq.n	40087a <pmc_enable_periph_clk+0x42>
			PMC->PMC_PCER0 = 1 << ul_id;
  40084c:	2301      	movs	r3, #1
  40084e:	4083      	lsls	r3, r0
  400850:	4a0c      	ldr	r2, [pc, #48]	; (400884 <pmc_enable_periph_clk+0x4c>)
  400852:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400854:	2000      	movs	r0, #0
  400856:	4770      	bx	lr
		ul_id -= 32;
  400858:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40085a:	4b0a      	ldr	r3, [pc, #40]	; (400884 <pmc_enable_periph_clk+0x4c>)
  40085c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400860:	2301      	movs	r3, #1
  400862:	4083      	lsls	r3, r0
  400864:	4393      	bics	r3, r2
  400866:	d00a      	beq.n	40087e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER1 = 1 << ul_id;
  400868:	2301      	movs	r3, #1
  40086a:	4083      	lsls	r3, r0
  40086c:	4a05      	ldr	r2, [pc, #20]	; (400884 <pmc_enable_periph_clk+0x4c>)
  40086e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	return 0;
  400872:	2000      	movs	r0, #0
  400874:	4770      	bx	lr
		return 1;
  400876:	2001      	movs	r0, #1
  400878:	4770      	bx	lr
	return 0;
  40087a:	2000      	movs	r0, #0
  40087c:	4770      	bx	lr
  40087e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	400e0400 	.word	0x400e0400

00400888 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40088c:	6043      	str	r3, [r0, #4]

}
  40088e:	4770      	bx	lr

00400890 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
  400890:	e7fe      	b.n	400890 <Dummy_Handler>
	...

00400894 <Reset_Handler>:
{
  400894:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400896:	4a22      	ldr	r2, [pc, #136]	; (400920 <Reset_Handler+0x8c>)
  400898:	4b22      	ldr	r3, [pc, #136]	; (400924 <Reset_Handler+0x90>)
  40089a:	429a      	cmp	r2, r3
  40089c:	d929      	bls.n	4008f2 <Reset_Handler+0x5e>
		for (; pDest < &_erelocate;) {
  40089e:	461a      	mov	r2, r3
  4008a0:	4b21      	ldr	r3, [pc, #132]	; (400928 <Reset_Handler+0x94>)
  4008a2:	429a      	cmp	r2, r3
  4008a4:	d20c      	bcs.n	4008c0 <Reset_Handler+0x2c>
  4008a6:	1e58      	subs	r0, r3, #1
  4008a8:	1a80      	subs	r0, r0, r2
  4008aa:	f020 0003 	bic.w	r0, r0, #3
  4008ae:	3004      	adds	r0, #4
  4008b0:	4b1b      	ldr	r3, [pc, #108]	; (400920 <Reset_Handler+0x8c>)
  4008b2:	4418      	add	r0, r3
			*pDest++ = *pSrc++;
  4008b4:	f853 1b04 	ldr.w	r1, [r3], #4
  4008b8:	f842 1b04 	str.w	r1, [r2], #4
		for (; pDest < &_erelocate;) {
  4008bc:	4283      	cmp	r3, r0
  4008be:	d1f9      	bne.n	4008b4 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4008c0:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4008c2:	4a1a      	ldr	r2, [pc, #104]	; (40092c <Reset_Handler+0x98>)
  4008c4:	4b1a      	ldr	r3, [pc, #104]	; (400930 <Reset_Handler+0x9c>)
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d20b      	bcs.n	4008e2 <Reset_Handler+0x4e>
  4008ca:	4613      	mov	r3, r2
  4008cc:	4a19      	ldr	r2, [pc, #100]	; (400934 <Reset_Handler+0xa0>)
  4008ce:	1ad2      	subs	r2, r2, r3
  4008d0:	f022 0203 	bic.w	r2, r2, #3
  4008d4:	3204      	adds	r2, #4
  4008d6:	441a      	add	r2, r3
		*pDest++ = 0;
  4008d8:	2100      	movs	r1, #0
  4008da:	f843 1b04 	str.w	r1, [r3], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4008de:	429a      	cmp	r2, r3
  4008e0:	d1fb      	bne.n	4008da <Reset_Handler+0x46>
	SCB->VTOR = ((uint32_t) pSrc);
  4008e2:	4a15      	ldr	r2, [pc, #84]	; (400938 <Reset_Handler+0xa4>)
  4008e4:	4b15      	ldr	r3, [pc, #84]	; (40093c <Reset_Handler+0xa8>)
  4008e6:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4008e8:	f001 fe3e 	bl	402568 <__libc_init_array>
	main();
  4008ec:	f7ff fc0e 	bl	40010c <main>
	while (1);
  4008f0:	e7fe      	b.n	4008f0 <Reset_Handler+0x5c>
	} else if (pSrc < pDest) {
  4008f2:	4a0b      	ldr	r2, [pc, #44]	; (400920 <Reset_Handler+0x8c>)
  4008f4:	4b0b      	ldr	r3, [pc, #44]	; (400924 <Reset_Handler+0x90>)
  4008f6:	429a      	cmp	r2, r3
  4008f8:	d2e2      	bcs.n	4008c0 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008fa:	4a0b      	ldr	r2, [pc, #44]	; (400928 <Reset_Handler+0x94>)
  4008fc:	1ad1      	subs	r1, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008fe:	4808      	ldr	r0, [pc, #32]	; (400920 <Reset_Handler+0x8c>)
  400900:	1f03      	subs	r3, r0, #4
  400902:	440b      	add	r3, r1
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  400904:	3a04      	subs	r2, #4
		for (;nb_bytes;nb_bytes -= 4) {
  400906:	2900      	cmp	r1, #0
  400908:	d0da      	beq.n	4008c0 <Reset_Handler+0x2c>
  40090a:	f1c0 0004 	rsb	r0, r0, #4
			*pDest-- = *pSrc--;
  40090e:	4619      	mov	r1, r3
  400910:	3b04      	subs	r3, #4
  400912:	6809      	ldr	r1, [r1, #0]
  400914:	f842 1904 	str.w	r1, [r2], #-4
		for (;nb_bytes;nb_bytes -= 4) {
  400918:	42c3      	cmn	r3, r0
  40091a:	d1f8      	bne.n	40090e <Reset_Handler+0x7a>
  40091c:	e7d0      	b.n	4008c0 <Reset_Handler+0x2c>
  40091e:	bf00      	nop
  400920:	00402868 	.word	0x00402868
  400924:	20000000 	.word	0x20000000
  400928:	2000043c 	.word	0x2000043c
  40092c:	2000043c 	.word	0x2000043c
  400930:	2000a63c 	.word	0x2000a63c
  400934:	2000a63b 	.word	0x2000a63b
  400938:	00400000 	.word	0x00400000
  40093c:	e000ed00 	.word	0xe000ed00

00400940 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400940:	4b3c      	ldr	r3, [pc, #240]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400944:	f002 0303 	and.w	r3, r2, #3
  400948:	2b01      	cmp	r3, #1
  40094a:	d024      	beq.n	400996 <SystemCoreClockUpdate+0x56>
  40094c:	f012 0f02 	tst.w	r2, #2
  400950:	d10d      	bne.n	40096e <SystemCoreClockUpdate+0x2e>
  400952:	2b00      	cmp	r3, #0
  400954:	d153      	bne.n	4009fe <SystemCoreClockUpdate+0xbe>
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400956:	4b38      	ldr	r3, [pc, #224]	; (400a38 <SystemCoreClockUpdate+0xf8>)
  400958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40095a:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40095e:	4b37      	ldr	r3, [pc, #220]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400960:	bf14      	ite	ne
  400962:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400966:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40096a:	601a      	str	r2, [r3, #0]
  40096c:	e047      	b.n	4009fe <SystemCoreClockUpdate+0xbe>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40096e:	4b31      	ldr	r3, [pc, #196]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400970:	6a1b      	ldr	r3, [r3, #32]
  400972:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400976:	d12a      	bne.n	4009ce <SystemCoreClockUpdate+0x8e>
				SystemCoreClock = CHIP_FREQ_XTAL;
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400978:	4b30      	ldr	r3, [pc, #192]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  40097a:	4a31      	ldr	r2, [pc, #196]	; (400a40 <SystemCoreClockUpdate+0x100>)
  40097c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40097e:	4b2d      	ldr	r3, [pc, #180]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400980:	6a1b      	ldr	r3, [r3, #32]
  400982:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400986:	2b10      	cmp	r3, #16
  400988:	d049      	beq.n	400a1e <SystemCoreClockUpdate+0xde>
  40098a:	2b20      	cmp	r3, #32
  40098c:	d122      	bne.n	4009d4 <SystemCoreClockUpdate+0x94>
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40098e:	4b2b      	ldr	r3, [pc, #172]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400990:	4a2c      	ldr	r2, [pc, #176]	; (400a44 <SystemCoreClockUpdate+0x104>)
  400992:	601a      	str	r2, [r3, #0]
					break;
  400994:	e01e      	b.n	4009d4 <SystemCoreClockUpdate+0x94>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400996:	4b27      	ldr	r3, [pc, #156]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400998:	6a1b      	ldr	r3, [r3, #32]
  40099a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40099e:	d003      	beq.n	4009a8 <SystemCoreClockUpdate+0x68>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4009a0:	4b26      	ldr	r3, [pc, #152]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  4009a2:	4a28      	ldr	r2, [pc, #160]	; (400a44 <SystemCoreClockUpdate+0x104>)
  4009a4:	601a      	str	r2, [r3, #0]
  4009a6:	e02a      	b.n	4009fe <SystemCoreClockUpdate+0xbe>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009a8:	4b24      	ldr	r3, [pc, #144]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  4009aa:	4a25      	ldr	r2, [pc, #148]	; (400a40 <SystemCoreClockUpdate+0x100>)
  4009ac:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009ae:	4b21      	ldr	r3, [pc, #132]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  4009b0:	6a1b      	ldr	r3, [r3, #32]
  4009b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009b6:	2b10      	cmp	r3, #16
  4009b8:	d005      	beq.n	4009c6 <SystemCoreClockUpdate+0x86>
  4009ba:	2b20      	cmp	r3, #32
  4009bc:	d11f      	bne.n	4009fe <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009be:	4b1f      	ldr	r3, [pc, #124]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  4009c0:	4a20      	ldr	r2, [pc, #128]	; (400a44 <SystemCoreClockUpdate+0x104>)
  4009c2:	601a      	str	r2, [r3, #0]
			break;
  4009c4:	e01b      	b.n	4009fe <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009c6:	4b1d      	ldr	r3, [pc, #116]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  4009c8:	4a1f      	ldr	r2, [pc, #124]	; (400a48 <SystemCoreClockUpdate+0x108>)
  4009ca:	601a      	str	r2, [r3, #0]
			break;
  4009cc:	e017      	b.n	4009fe <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4009ce:	4b1b      	ldr	r3, [pc, #108]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  4009d0:	4a1c      	ldr	r2, [pc, #112]	; (400a44 <SystemCoreClockUpdate+0x104>)
  4009d2:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009d4:	4b17      	ldr	r3, [pc, #92]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  4009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009d8:	f003 0303 	and.w	r3, r3, #3
  4009dc:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009de:	4b15      	ldr	r3, [pc, #84]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  4009e0:	bf07      	ittee	eq
  4009e2:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009e4:	6a9a      	ldreq	r2, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009e6:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009e8:	6ada      	ldrne	r2, [r3, #44]	; 0x2c
  4009ea:	4814      	ldr	r0, [pc, #80]	; (400a3c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4009ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009f0:	6803      	ldr	r3, [r0, #0]
  4009f2:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  4009f6:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4009fc:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4009fe:	4b0d      	ldr	r3, [pc, #52]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a06:	2b70      	cmp	r3, #112	; 0x70
  400a08:	d00d      	beq.n	400a26 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a0a:	4b0a      	ldr	r3, [pc, #40]	; (400a34 <SystemCoreClockUpdate+0xf4>)
  400a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a0e:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400a12:	4b0a      	ldr	r3, [pc, #40]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400a14:	681b      	ldr	r3, [r3, #0]
  400a16:	40d3      	lsrs	r3, r2
  400a18:	4a08      	ldr	r2, [pc, #32]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400a1a:	6013      	str	r3, [r2, #0]
	}
}
  400a1c:	4770      	bx	lr
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a1e:	4b07      	ldr	r3, [pc, #28]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400a20:	4a09      	ldr	r2, [pc, #36]	; (400a48 <SystemCoreClockUpdate+0x108>)
  400a22:	601a      	str	r2, [r3, #0]
					break;
  400a24:	e7d6      	b.n	4009d4 <SystemCoreClockUpdate+0x94>
		SystemCoreClock /= 3U;
  400a26:	4b05      	ldr	r3, [pc, #20]	; (400a3c <SystemCoreClockUpdate+0xfc>)
  400a28:	681b      	ldr	r3, [r3, #0]
  400a2a:	4a08      	ldr	r2, [pc, #32]	; (400a4c <SystemCoreClockUpdate+0x10c>)
  400a2c:	fba2 2303 	umull	r2, r3, r2, r3
  400a30:	085b      	lsrs	r3, r3, #1
  400a32:	e7f1      	b.n	400a18 <SystemCoreClockUpdate+0xd8>
  400a34:	400e0400 	.word	0x400e0400
  400a38:	400e1400 	.word	0x400e1400
  400a3c:	20000000 	.word	0x20000000
  400a40:	003d0900 	.word	0x003d0900
  400a44:	00b71b00 	.word	0x00b71b00
  400a48:	007a1200 	.word	0x007a1200
  400a4c:	aaaaaaab 	.word	0xaaaaaaab

00400a50 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a50:	4b1a      	ldr	r3, [pc, #104]	; (400abc <system_init_flash+0x6c>)
  400a52:	4298      	cmp	r0, r3
  400a54:	d807      	bhi.n	400a66 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400a5a:	4a19      	ldr	r2, [pc, #100]	; (400ac0 <system_init_flash+0x70>)
  400a5c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a62:	6013      	str	r3, [r2, #0]
  400a64:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400a66:	4b17      	ldr	r3, [pc, #92]	; (400ac4 <system_init_flash+0x74>)
  400a68:	4298      	cmp	r0, r3
  400a6a:	d206      	bcs.n	400a7a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a6c:	4b16      	ldr	r3, [pc, #88]	; (400ac8 <system_init_flash+0x78>)
  400a6e:	4a14      	ldr	r2, [pc, #80]	; (400ac0 <system_init_flash+0x70>)
  400a70:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a76:	6013      	str	r3, [r2, #0]
  400a78:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a7a:	4b14      	ldr	r3, [pc, #80]	; (400acc <system_init_flash+0x7c>)
  400a7c:	4298      	cmp	r0, r3
  400a7e:	d206      	bcs.n	400a8e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a80:	4b13      	ldr	r3, [pc, #76]	; (400ad0 <system_init_flash+0x80>)
  400a82:	4a0f      	ldr	r2, [pc, #60]	; (400ac0 <system_init_flash+0x70>)
  400a84:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a86:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a8a:	6013      	str	r3, [r2, #0]
  400a8c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a8e:	4b11      	ldr	r3, [pc, #68]	; (400ad4 <system_init_flash+0x84>)
  400a90:	4298      	cmp	r0, r3
  400a92:	d806      	bhi.n	400aa2 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a94:	4b10      	ldr	r3, [pc, #64]	; (400ad8 <system_init_flash+0x88>)
  400a96:	4a0a      	ldr	r2, [pc, #40]	; (400ac0 <system_init_flash+0x70>)
  400a98:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a9e:	6013      	str	r3, [r2, #0]
  400aa0:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400aa2:	4b0e      	ldr	r3, [pc, #56]	; (400adc <system_init_flash+0x8c>)
  400aa4:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400aa6:	bf94      	ite	ls
  400aa8:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aac:	4b0c      	ldrhi	r3, [pc, #48]	; (400ae0 <system_init_flash+0x90>)
  400aae:	4a04      	ldr	r2, [pc, #16]	; (400ac0 <system_init_flash+0x70>)
  400ab0:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ab2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ab6:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
#endif
}
  400ab8:	4770      	bx	lr
  400aba:	bf00      	nop
  400abc:	01312cff 	.word	0x01312cff
  400ac0:	400e0a00 	.word	0x400e0a00
  400ac4:	02625a00 	.word	0x02625a00
  400ac8:	04000100 	.word	0x04000100
  400acc:	03938700 	.word	0x03938700
  400ad0:	04000200 	.word	0x04000200
  400ad4:	04c4b3ff 	.word	0x04c4b3ff
  400ad8:	04000300 	.word	0x04000300
  400adc:	05f5e0ff 	.word	0x05f5e0ff
  400ae0:	04000500 	.word	0x04000500

00400ae4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae4:	f100 0308 	add.w	r3, r0, #8
  400ae8:	6043      	str	r3, [r0, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  400aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  400aee:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af0:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af2:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400af4:	2300      	movs	r3, #0
  400af6:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
  400af8:	4770      	bx	lr

00400afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  400afa:	2300      	movs	r3, #0
  400afc:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
  400afe:	4770      	bx	lr

00400b00 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  400b00:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b02:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  400b04:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  400b08:	d011      	beq.n	400b2e <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  400b0a:	f100 0308 	add.w	r3, r0, #8
  400b0e:	461c      	mov	r4, r3
  400b10:	685b      	ldr	r3, [r3, #4]
  400b12:	681a      	ldr	r2, [r3, #0]
  400b14:	42aa      	cmp	r2, r5
  400b16:	d9fa      	bls.n	400b0e <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  400b18:	6863      	ldr	r3, [r4, #4]
  400b1a:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b1c:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  400b1e:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  400b20:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  400b22:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  400b24:	6803      	ldr	r3, [r0, #0]
  400b26:	3301      	adds	r3, #1
  400b28:	6003      	str	r3, [r0, #0]
}
  400b2a:	bc30      	pop	{r4, r5}
  400b2c:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
  400b2e:	6904      	ldr	r4, [r0, #16]
  400b30:	e7f2      	b.n	400b18 <vListInsert+0x18>

00400b32 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  400b32:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b34:	6841      	ldr	r1, [r0, #4]
  400b36:	6882      	ldr	r2, [r0, #8]
  400b38:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b3a:	6841      	ldr	r1, [r0, #4]
  400b3c:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  400b3e:	685a      	ldr	r2, [r3, #4]
  400b40:	4282      	cmp	r2, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b42:	bf04      	itt	eq
  400b44:	6882      	ldreq	r2, [r0, #8]
  400b46:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  400b48:	2200      	movs	r2, #0
  400b4a:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  400b4c:	681a      	ldr	r2, [r3, #0]
  400b4e:	3a01      	subs	r2, #1
  400b50:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  400b52:	6818      	ldr	r0, [r3, #0]
}
  400b54:	4770      	bx	lr

00400b56 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400b56:	b510      	push	{r4, lr}
  400b58:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400b5a:	f001 faf3 	bl	402144 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400b5e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  400b60:	f001 fb12 	bl	402188 <vPortExitCritical>

    return xReturn;
}
  400b64:	fab4 f084 	clz	r0, r4
  400b68:	0940      	lsrs	r0, r0, #5
  400b6a:	bd10      	pop	{r4, pc}

00400b6c <prvCopyDataToQueue>:
{
  400b6c:	b570      	push	{r4, r5, r6, lr}
  400b6e:	4604      	mov	r4, r0
  400b70:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400b72:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400b74:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b76:	b95a      	cbnz	r2, 400b90 <prvCopyDataToQueue+0x24>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400b78:	6803      	ldr	r3, [r0, #0]
  400b7a:	b11b      	cbz	r3, 400b84 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
  400b7c:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400b7e:	3601      	adds	r6, #1
  400b80:	63a6      	str	r6, [r4, #56]	; 0x38
}
  400b82:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400b84:	6880      	ldr	r0, [r0, #8]
  400b86:	f001 f88d 	bl	401ca4 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400b8a:	2300      	movs	r3, #0
  400b8c:	60a3      	str	r3, [r4, #8]
  400b8e:	e7f6      	b.n	400b7e <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400b90:	b96d      	cbnz	r5, 400bae <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400b92:	6840      	ldr	r0, [r0, #4]
  400b94:	f001 fd0c 	bl	4025b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400b98:	6863      	ldr	r3, [r4, #4]
  400b9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400b9c:	4413      	add	r3, r2
  400b9e:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400ba0:	68a2      	ldr	r2, [r4, #8]
  400ba2:	4293      	cmp	r3, r2
  400ba4:	d319      	bcc.n	400bda <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400ba6:	6823      	ldr	r3, [r4, #0]
  400ba8:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  400baa:	4628      	mov	r0, r5
  400bac:	e7e7      	b.n	400b7e <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  400bae:	68c0      	ldr	r0, [r0, #12]
  400bb0:	f001 fcfe 	bl	4025b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  400bb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400bb6:	4251      	negs	r1, r2
  400bb8:	68e3      	ldr	r3, [r4, #12]
  400bba:	1a9b      	subs	r3, r3, r2
  400bbc:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400bbe:	6822      	ldr	r2, [r4, #0]
  400bc0:	4293      	cmp	r3, r2
  400bc2:	d202      	bcs.n	400bca <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  400bc4:	68a3      	ldr	r3, [r4, #8]
  400bc6:	440b      	add	r3, r1
  400bc8:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
  400bca:	2d02      	cmp	r5, #2
  400bcc:	d001      	beq.n	400bd2 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  400bce:	2000      	movs	r0, #0
  400bd0:	e7d5      	b.n	400b7e <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400bd2:	b126      	cbz	r6, 400bde <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  400bd4:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
  400bd6:	2000      	movs	r0, #0
  400bd8:	e7d1      	b.n	400b7e <prvCopyDataToQueue+0x12>
  400bda:	4628      	mov	r0, r5
  400bdc:	e7cf      	b.n	400b7e <prvCopyDataToQueue+0x12>
  400bde:	2000      	movs	r0, #0
  400be0:	e7cd      	b.n	400b7e <prvCopyDataToQueue+0x12>

00400be2 <prvCopyDataFromQueue>:
{
  400be2:	b508      	push	{r3, lr}
  400be4:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400be6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400be8:	b162      	cbz	r2, 400c04 <prvCopyDataFromQueue+0x22>
  400bea:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400bec:	68d9      	ldr	r1, [r3, #12]
  400bee:	4411      	add	r1, r2
  400bf0:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400bf2:	f8d3 c008 	ldr.w	ip, [r3, #8]
  400bf6:	4561      	cmp	r1, ip
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400bf8:	bf24      	itt	cs
  400bfa:	6819      	ldrcs	r1, [r3, #0]
  400bfc:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400bfe:	68d9      	ldr	r1, [r3, #12]
  400c00:	f001 fcd6 	bl	4025b0 <memcpy>
}
  400c04:	bd08      	pop	{r3, pc}

00400c06 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  400c06:	b570      	push	{r4, r5, r6, lr}
  400c08:	b082      	sub	sp, #8
  400c0a:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400c0c:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400c0e:	b164      	cbz	r4, 400c2a <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c14:	429a      	cmp	r2, r3
  400c16:	d311      	bcc.n	400c3c <prvNotifyQueueSetContainer+0x36>
  400c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400c1c:	f383 8811 	msr	BASEPRI, r3
  400c20:	f3bf 8f6f 	isb	sy
  400c24:	f3bf 8f4f 	dsb	sy
  400c28:	e7fe      	b.n	400c28 <prvNotifyQueueSetContainer+0x22>
  400c2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400c2e:	f383 8811 	msr	BASEPRI, r3
  400c32:	f3bf 8f6f 	isb	sy
  400c36:	f3bf 8f4f 	dsb	sy
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400c3a:	e7fe      	b.n	400c3a <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400c3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c3e:	4293      	cmp	r3, r2
  400c40:	d803      	bhi.n	400c4a <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
  400c42:	2500      	movs	r5, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  400c44:	4628      	mov	r0, r5
  400c46:	b002      	add	sp, #8
  400c48:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400c4a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
  400c4e:	b276      	sxtb	r6, r6
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400c50:	2200      	movs	r2, #0
  400c52:	a901      	add	r1, sp, #4
  400c54:	4620      	mov	r0, r4
  400c56:	f7ff ff89 	bl	400b6c <prvCopyDataToQueue>
  400c5a:	4605      	mov	r5, r0
            if( cTxLock == queueUNLOCKED )
  400c5c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
  400c60:	d10a      	bne.n	400c78 <prvNotifyQueueSetContainer+0x72>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c64:	2b00      	cmp	r3, #0
  400c66:	d0ed      	beq.n	400c44 <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c6c:	f000 ff3e 	bl	401aec <xTaskRemoveFromEventList>
                        xReturn = pdTRUE;
  400c70:	2800      	cmp	r0, #0
  400c72:	bf18      	it	ne
  400c74:	2501      	movne	r5, #1
  400c76:	e7e5      	b.n	400c44 <prvNotifyQueueSetContainer+0x3e>
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
  400c78:	f000 fc84 	bl	401584 <uxTaskGetNumberOfTasks>
  400c7c:	4286      	cmp	r6, r0
  400c7e:	d2e1      	bcs.n	400c44 <prvNotifyQueueSetContainer+0x3e>
  400c80:	2e7f      	cmp	r6, #127	; 0x7f
  400c82:	d004      	beq.n	400c8e <prvNotifyQueueSetContainer+0x88>
  400c84:	1c73      	adds	r3, r6, #1
  400c86:	b25b      	sxtb	r3, r3
  400c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400c8c:	e7da      	b.n	400c44 <prvNotifyQueueSetContainer+0x3e>
  400c8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400c92:	f383 8811 	msr	BASEPRI, r3
  400c96:	f3bf 8f6f 	isb	sy
  400c9a:	f3bf 8f4f 	dsb	sy
  400c9e:	e7fe      	b.n	400c9e <prvNotifyQueueSetContainer+0x98>

00400ca0 <prvUnlockQueue>:
{
  400ca0:	b570      	push	{r4, r5, r6, lr}
  400ca2:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  400ca4:	f001 fa4e 	bl	402144 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
  400ca8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  400cac:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400cae:	2c00      	cmp	r4, #0
  400cb0:	dd19      	ble.n	400ce6 <prvUnlockQueue+0x46>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cb2:	f105 0624 	add.w	r6, r5, #36	; 0x24
  400cb6:	e008      	b.n	400cca <prvUnlockQueue+0x2a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  400cba:	b1a3      	cbz	r3, 400ce6 <prvUnlockQueue+0x46>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cbc:	4630      	mov	r0, r6
  400cbe:	f000 ff15 	bl	401aec <xTaskRemoveFromEventList>
  400cc2:	b968      	cbnz	r0, 400ce0 <prvUnlockQueue+0x40>
            --cTxLock;
  400cc4:	3c01      	subs	r4, #1
  400cc6:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400cc8:	b16c      	cbz	r4, 400ce6 <prvUnlockQueue+0x46>
                if( pxQueue->pxQueueSetContainer != NULL )
  400cca:	6cab      	ldr	r3, [r5, #72]	; 0x48
  400ccc:	2b00      	cmp	r3, #0
  400cce:	d0f3      	beq.n	400cb8 <prvUnlockQueue+0x18>
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400cd0:	4628      	mov	r0, r5
  400cd2:	f7ff ff98 	bl	400c06 <prvNotifyQueueSetContainer>
  400cd6:	2800      	cmp	r0, #0
  400cd8:	d0f4      	beq.n	400cc4 <prvUnlockQueue+0x24>
                        vTaskMissedYield();
  400cda:	f000 ffcd 	bl	401c78 <vTaskMissedYield>
  400cde:	e7f1      	b.n	400cc4 <prvUnlockQueue+0x24>
                            vTaskMissedYield();
  400ce0:	f000 ffca 	bl	401c78 <vTaskMissedYield>
  400ce4:	e7ee      	b.n	400cc4 <prvUnlockQueue+0x24>
        pxQueue->cTxLock = queueUNLOCKED;
  400ce6:	23ff      	movs	r3, #255	; 0xff
  400ce8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  400cec:	f001 fa4c 	bl	402188 <vPortExitCritical>
    taskENTER_CRITICAL();
  400cf0:	f001 fa28 	bl	402144 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
  400cf4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400cf8:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400cfa:	2c00      	cmp	r4, #0
  400cfc:	dd0f      	ble.n	400d1e <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400cfe:	f105 0610 	add.w	r6, r5, #16
  400d02:	e002      	b.n	400d0a <prvUnlockQueue+0x6a>
                --cRxLock;
  400d04:	3c01      	subs	r4, #1
  400d06:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400d08:	b14c      	cbz	r4, 400d1e <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d0a:	692b      	ldr	r3, [r5, #16]
  400d0c:	b13b      	cbz	r3, 400d1e <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d0e:	4630      	mov	r0, r6
  400d10:	f000 feec 	bl	401aec <xTaskRemoveFromEventList>
  400d14:	2800      	cmp	r0, #0
  400d16:	d0f5      	beq.n	400d04 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
  400d18:	f000 ffae 	bl	401c78 <vTaskMissedYield>
  400d1c:	e7f2      	b.n	400d04 <prvUnlockQueue+0x64>
        pxQueue->cRxLock = queueUNLOCKED;
  400d1e:	23ff      	movs	r3, #255	; 0xff
  400d20:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400d24:	f001 fa30 	bl	402188 <vPortExitCritical>
}
  400d28:	bd70      	pop	{r4, r5, r6, pc}

00400d2a <xQueueGenericReset>:
{
  400d2a:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400d2c:	b180      	cbz	r0, 400d50 <xQueueGenericReset+0x26>
  400d2e:	460d      	mov	r5, r1
  400d30:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400d32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400d34:	b11b      	cbz	r3, 400d3e <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400d36:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d38:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400d3c:	b18b      	cbz	r3, 400d62 <xQueueGenericReset+0x38>
  400d3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400d42:	f383 8811 	msr	BASEPRI, r3
  400d46:	f3bf 8f6f 	isb	sy
  400d4a:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
  400d4e:	e7fe      	b.n	400d4e <xQueueGenericReset+0x24>
  400d50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400d54:	f383 8811 	msr	BASEPRI, r3
  400d58:	f3bf 8f6f 	isb	sy
  400d5c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
  400d60:	e7fe      	b.n	400d60 <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
  400d62:	f001 f9ef 	bl	402144 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400d66:	6822      	ldr	r2, [r4, #0]
  400d68:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d6c:	fb01 f303 	mul.w	r3, r1, r3
  400d70:	18d0      	adds	r0, r2, r3
  400d72:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400d74:	2000      	movs	r0, #0
  400d76:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400d78:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400d7a:	1a5b      	subs	r3, r3, r1
  400d7c:	441a      	add	r2, r3
  400d7e:	60e2      	str	r2, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400d80:	23ff      	movs	r3, #255	; 0xff
  400d82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400d8a:	b9b5      	cbnz	r5, 400dba <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d8c:	6923      	ldr	r3, [r4, #16]
  400d8e:	b91b      	cbnz	r3, 400d98 <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
  400d90:	f001 f9fa 	bl	402188 <vPortExitCritical>
}
  400d94:	2001      	movs	r0, #1
  400d96:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d98:	f104 0010 	add.w	r0, r4, #16
  400d9c:	f000 fea6 	bl	401aec <xTaskRemoveFromEventList>
  400da0:	2800      	cmp	r0, #0
  400da2:	d0f5      	beq.n	400d90 <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
  400da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400dac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400db0:	f3bf 8f4f 	dsb	sy
  400db4:	f3bf 8f6f 	isb	sy
  400db8:	e7ea      	b.n	400d90 <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400dba:	f104 0010 	add.w	r0, r4, #16
  400dbe:	f7ff fe91 	bl	400ae4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400dc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400dc6:	f7ff fe8d 	bl	400ae4 <vListInitialise>
  400dca:	e7e1      	b.n	400d90 <xQueueGenericReset+0x66>

00400dcc <xQueueGenericCreate>:
    {
  400dcc:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400dce:	b148      	cbz	r0, 400de4 <xQueueGenericCreate+0x18>
  400dd0:	460c      	mov	r4, r1
  400dd2:	4605      	mov	r5, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400dd4:	fba1 2300 	umull	r2, r3, r1, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400dd8:	b923      	cbnz	r3, 400de4 <xQueueGenericCreate+0x18>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400dda:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400dde:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400de2:	d908      	bls.n	400df6 <xQueueGenericCreate+0x2a>
  400de4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400de8:	f383 8811 	msr	BASEPRI, r3
  400dec:	f3bf 8f6f 	isb	sy
  400df0:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
  400df4:	e7fe      	b.n	400df4 <xQueueGenericCreate+0x28>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400df6:	304c      	adds	r0, #76	; 0x4c
  400df8:	f001 fac0 	bl	40237c <pvPortMalloc>
            if( pxNewQueue != NULL )
  400dfc:	4606      	mov	r6, r0
  400dfe:	b158      	cbz	r0, 400e18 <xQueueGenericCreate+0x4c>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400e00:	b164      	cbz	r4, 400e1c <xQueueGenericCreate+0x50>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400e02:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400e06:	6033      	str	r3, [r6, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400e08:	63f5      	str	r5, [r6, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400e0a:	6434      	str	r4, [r6, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400e0c:	2101      	movs	r1, #1
  400e0e:	4630      	mov	r0, r6
  400e10:	f7ff ff8b 	bl	400d2a <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
  400e14:	2300      	movs	r3, #0
  400e16:	64b3      	str	r3, [r6, #72]	; 0x48
    }
  400e18:	4630      	mov	r0, r6
  400e1a:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400e1c:	4603      	mov	r3, r0
  400e1e:	e7f2      	b.n	400e06 <xQueueGenericCreate+0x3a>

00400e20 <xQueueGenericSend>:
{
  400e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e24:	b085      	sub	sp, #20
  400e26:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
  400e28:	b188      	cbz	r0, 400e4e <xQueueGenericSend+0x2e>
  400e2a:	460e      	mov	r6, r1
  400e2c:	461d      	mov	r5, r3
  400e2e:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e30:	b1b1      	cbz	r1, 400e60 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e32:	2d02      	cmp	r5, #2
  400e34:	d120      	bne.n	400e78 <xQueueGenericSend+0x58>
  400e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e38:	2b01      	cmp	r3, #1
  400e3a:	d01d      	beq.n	400e78 <xQueueGenericSend+0x58>
  400e3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e40:	f383 8811 	msr	BASEPRI, r3
  400e44:	f3bf 8f6f 	isb	sy
  400e48:	f3bf 8f4f 	dsb	sy
  400e4c:	e7fe      	b.n	400e4c <xQueueGenericSend+0x2c>
  400e4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e52:	f383 8811 	msr	BASEPRI, r3
  400e56:	f3bf 8f6f 	isb	sy
  400e5a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
  400e5e:	e7fe      	b.n	400e5e <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e60:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400e62:	2b00      	cmp	r3, #0
  400e64:	d0e5      	beq.n	400e32 <xQueueGenericSend+0x12>
  400e66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e6a:	f383 8811 	msr	BASEPRI, r3
  400e6e:	f3bf 8f6f 	isb	sy
  400e72:	f3bf 8f4f 	dsb	sy
  400e76:	e7fe      	b.n	400e76 <xQueueGenericSend+0x56>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e78:	f000 ff04 	bl	401c84 <xTaskGetSchedulerState>
  400e7c:	4680      	mov	r8, r0
  400e7e:	b950      	cbnz	r0, 400e96 <xQueueGenericSend+0x76>
  400e80:	9b01      	ldr	r3, [sp, #4]
  400e82:	b153      	cbz	r3, 400e9a <xQueueGenericSend+0x7a>
  400e84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  400e88:	f383 8811 	msr	BASEPRI, r3
  400e8c:	f3bf 8f6f 	isb	sy
  400e90:	f3bf 8f4f 	dsb	sy
  400e94:	e7fe      	b.n	400e94 <xQueueGenericSend+0x74>
  400e96:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
  400e9a:	2700      	movs	r7, #0
  400e9c:	e04d      	b.n	400f3a <xQueueGenericSend+0x11a>
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400e9e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ea0:	462a      	mov	r2, r5
  400ea2:	4631      	mov	r1, r6
  400ea4:	4620      	mov	r0, r4
  400ea6:	f7ff fe61 	bl	400b6c <prvCopyDataToQueue>
                    if( pxQueue->pxQueueSetContainer != NULL )
  400eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eac:	b1b3      	cbz	r3, 400edc <xQueueGenericSend+0xbc>
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400eae:	2d02      	cmp	r5, #2
  400eb0:	f000 80a0 	beq.w	400ff4 <xQueueGenericSend+0x1d4>
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400eb4:	4620      	mov	r0, r4
  400eb6:	f7ff fea6 	bl	400c06 <prvNotifyQueueSetContainer>
  400eba:	b148      	cbz	r0, 400ed0 <xQueueGenericSend+0xb0>
                            queueYIELD_IF_USING_PREEMPTION();
  400ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400ec8:	f3bf 8f4f 	dsb	sy
  400ecc:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
  400ed0:	f001 f95a 	bl	402188 <vPortExitCritical>
                return pdPASS;
  400ed4:	2001      	movs	r0, #1
}
  400ed6:	b005      	add	sp, #20
  400ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ede:	b963      	cbnz	r3, 400efa <xQueueGenericSend+0xda>
                        else if( xYieldRequired != pdFALSE )
  400ee0:	2800      	cmp	r0, #0
  400ee2:	d0f5      	beq.n	400ed0 <xQueueGenericSend+0xb0>
                            queueYIELD_IF_USING_PREEMPTION();
  400ee4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400eec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400ef0:	f3bf 8f4f 	dsb	sy
  400ef4:	f3bf 8f6f 	isb	sy
  400ef8:	e7ea      	b.n	400ed0 <xQueueGenericSend+0xb0>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400efe:	f000 fdf5 	bl	401aec <xTaskRemoveFromEventList>
  400f02:	2800      	cmp	r0, #0
  400f04:	d0e4      	beq.n	400ed0 <xQueueGenericSend+0xb0>
                                queueYIELD_IF_USING_PREEMPTION();
  400f06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400f12:	f3bf 8f4f 	dsb	sy
  400f16:	f3bf 8f6f 	isb	sy
  400f1a:	e7d9      	b.n	400ed0 <xQueueGenericSend+0xb0>
                    taskEXIT_CRITICAL();
  400f1c:	f001 f934 	bl	402188 <vPortExitCritical>
                    return errQUEUE_FULL;
  400f20:	2000      	movs	r0, #0
  400f22:	e7d8      	b.n	400ed6 <xQueueGenericSend+0xb6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400f24:	a802      	add	r0, sp, #8
  400f26:	f000 fe57 	bl	401bd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
  400f2a:	e014      	b.n	400f56 <xQueueGenericSend+0x136>
                prvUnlockQueue( pxQueue );
  400f2c:	4620      	mov	r0, r4
  400f2e:	f7ff feb7 	bl	400ca0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
  400f32:	f000 fc19 	bl	401768 <xTaskResumeAll>
  400f36:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
  400f3a:	f001 f903 	bl	402144 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400f3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f42:	429a      	cmp	r2, r3
  400f44:	d3ab      	bcc.n	400e9e <xQueueGenericSend+0x7e>
  400f46:	2d02      	cmp	r5, #2
  400f48:	d04a      	beq.n	400fe0 <xQueueGenericSend+0x1c0>
                if( xTicksToWait == ( TickType_t ) 0 )
  400f4a:	9b01      	ldr	r3, [sp, #4]
  400f4c:	2b00      	cmp	r3, #0
  400f4e:	d0e5      	beq.n	400f1c <xQueueGenericSend+0xfc>
                else if( xEntryTimeSet == pdFALSE )
  400f50:	f1b8 0f00 	cmp.w	r8, #0
  400f54:	d0e6      	beq.n	400f24 <xQueueGenericSend+0x104>
        taskEXIT_CRITICAL();
  400f56:	f001 f917 	bl	402188 <vPortExitCritical>
        vTaskSuspendAll();
  400f5a:	f000 fb05 	bl	401568 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
  400f5e:	f001 f8f1 	bl	402144 <vPortEnterCritical>
  400f62:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
  400f66:	b252      	sxtb	r2, r2
  400f68:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  400f6c:	bf08      	it	eq
  400f6e:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
  400f72:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  400f76:	b252      	sxtb	r2, r2
  400f78:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  400f7c:	bf08      	it	eq
  400f7e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
  400f82:	f001 f901 	bl	402188 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f86:	a901      	add	r1, sp, #4
  400f88:	a802      	add	r0, sp, #8
  400f8a:	f000 fe31 	bl	401bf0 <xTaskCheckForTimeOut>
  400f8e:	bb00      	cbnz	r0, 400fd2 <xQueueGenericSend+0x1b2>
    taskENTER_CRITICAL();
  400f90:	f001 f8d8 	bl	402144 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400f94:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  400f98:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  400f9c:	f001 f8f4 	bl	402188 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400fa0:	45c1      	cmp	r9, r8
  400fa2:	d1c3      	bne.n	400f2c <xQueueGenericSend+0x10c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400fa4:	9901      	ldr	r1, [sp, #4]
  400fa6:	f104 0010 	add.w	r0, r4, #16
  400faa:	f000 fd5d 	bl	401a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
  400fae:	4620      	mov	r0, r4
  400fb0:	f7ff fe76 	bl	400ca0 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
  400fb4:	f000 fbd8 	bl	401768 <xTaskResumeAll>
  400fb8:	2800      	cmp	r0, #0
  400fba:	d1bc      	bne.n	400f36 <xQueueGenericSend+0x116>
                    portYIELD_WITHIN_API();
  400fbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  400fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  400fc8:	f3bf 8f4f 	dsb	sy
  400fcc:	f3bf 8f6f 	isb	sy
  400fd0:	e7b1      	b.n	400f36 <xQueueGenericSend+0x116>
            prvUnlockQueue( pxQueue );
  400fd2:	4620      	mov	r0, r4
  400fd4:	f7ff fe64 	bl	400ca0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
  400fd8:	f000 fbc6 	bl	401768 <xTaskResumeAll>
            return errQUEUE_FULL;
  400fdc:	2000      	movs	r0, #0
  400fde:	e77a      	b.n	400ed6 <xQueueGenericSend+0xb6>
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400fe0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400fe2:	462a      	mov	r2, r5
  400fe4:	4631      	mov	r1, r6
  400fe6:	4620      	mov	r0, r4
  400fe8:	f7ff fdc0 	bl	400b6c <prvCopyDataToQueue>
                    if( pxQueue->pxQueueSetContainer != NULL )
  400fec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fee:	2b00      	cmp	r3, #0
  400ff0:	f43f af74 	beq.w	400edc <xQueueGenericSend+0xbc>
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400ff4:	2f00      	cmp	r7, #0
  400ff6:	f47f af6b 	bne.w	400ed0 <xQueueGenericSend+0xb0>
  400ffa:	e75b      	b.n	400eb4 <xQueueGenericSend+0x94>

00400ffc <xQueueReceive>:
{
  400ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401000:	b084      	sub	sp, #16
  401002:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  401004:	b188      	cbz	r0, 40102a <xQueueReceive+0x2e>
  401006:	460e      	mov	r6, r1
  401008:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40100a:	b1b9      	cbz	r1, 40103c <xQueueReceive+0x40>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40100c:	f000 fe3a 	bl	401c84 <xTaskGetSchedulerState>
  401010:	4680      	mov	r8, r0
  401012:	b9f8      	cbnz	r0, 401054 <xQueueReceive+0x58>
  401014:	9b01      	ldr	r3, [sp, #4]
  401016:	b1fb      	cbz	r3, 401058 <xQueueReceive+0x5c>
  401018:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40101c:	f383 8811 	msr	BASEPRI, r3
  401020:	f3bf 8f6f 	isb	sy
  401024:	f3bf 8f4f 	dsb	sy
  401028:	e7fe      	b.n	401028 <xQueueReceive+0x2c>
  40102a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40102e:	f383 8811 	msr	BASEPRI, r3
  401032:	f3bf 8f6f 	isb	sy
  401036:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
  40103a:	e7fe      	b.n	40103a <xQueueReceive+0x3e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40103c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40103e:	2b00      	cmp	r3, #0
  401040:	d0e4      	beq.n	40100c <xQueueReceive+0x10>
  401042:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401046:	f383 8811 	msr	BASEPRI, r3
  40104a:	f3bf 8f6f 	isb	sy
  40104e:	f3bf 8f4f 	dsb	sy
  401052:	e7fe      	b.n	401052 <xQueueReceive+0x56>
  401054:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
  401058:	2700      	movs	r7, #0
  40105a:	e038      	b.n	4010ce <xQueueReceive+0xd2>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  40105c:	4631      	mov	r1, r6
  40105e:	4620      	mov	r0, r4
  401060:	f7ff fdbf 	bl	400be2 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401064:	3d01      	subs	r5, #1
  401066:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401068:	6923      	ldr	r3, [r4, #16]
  40106a:	b92b      	cbnz	r3, 401078 <xQueueReceive+0x7c>
                taskEXIT_CRITICAL();
  40106c:	f001 f88c 	bl	402188 <vPortExitCritical>
                return pdPASS;
  401070:	2001      	movs	r0, #1
}
  401072:	b004      	add	sp, #16
  401074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401078:	f104 0010 	add.w	r0, r4, #16
  40107c:	f000 fd36 	bl	401aec <xTaskRemoveFromEventList>
  401080:	2800      	cmp	r0, #0
  401082:	d0f3      	beq.n	40106c <xQueueReceive+0x70>
                        queueYIELD_IF_USING_PREEMPTION();
  401084:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40108c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401090:	f3bf 8f4f 	dsb	sy
  401094:	f3bf 8f6f 	isb	sy
  401098:	e7e8      	b.n	40106c <xQueueReceive+0x70>
                    taskEXIT_CRITICAL();
  40109a:	f001 f875 	bl	402188 <vPortExitCritical>
                    return errQUEUE_EMPTY;
  40109e:	2000      	movs	r0, #0
  4010a0:	e7e7      	b.n	401072 <xQueueReceive+0x76>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  4010a2:	a802      	add	r0, sp, #8
  4010a4:	f000 fd98 	bl	401bd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
  4010a8:	e01c      	b.n	4010e4 <xQueueReceive+0xe8>
                prvUnlockQueue( pxQueue );
  4010aa:	4620      	mov	r0, r4
  4010ac:	f7ff fdf8 	bl	400ca0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
  4010b0:	f000 fb5a 	bl	401768 <xTaskResumeAll>
  4010b4:	e009      	b.n	4010ca <xQueueReceive+0xce>
            prvUnlockQueue( pxQueue );
  4010b6:	4620      	mov	r0, r4
  4010b8:	f7ff fdf2 	bl	400ca0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
  4010bc:	f000 fb54 	bl	401768 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4010c0:	4620      	mov	r0, r4
  4010c2:	f7ff fd48 	bl	400b56 <prvIsQueueEmpty>
  4010c6:	2800      	cmp	r0, #0
  4010c8:	d146      	bne.n	401158 <xQueueReceive+0x15c>
  4010ca:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
  4010ce:	f001 f839 	bl	402144 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4010d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010d4:	2d00      	cmp	r5, #0
  4010d6:	d1c1      	bne.n	40105c <xQueueReceive+0x60>
                if( xTicksToWait == ( TickType_t ) 0 )
  4010d8:	9b01      	ldr	r3, [sp, #4]
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d0dd      	beq.n	40109a <xQueueReceive+0x9e>
                else if( xEntryTimeSet == pdFALSE )
  4010de:	f1b8 0f00 	cmp.w	r8, #0
  4010e2:	d0de      	beq.n	4010a2 <xQueueReceive+0xa6>
        taskEXIT_CRITICAL();
  4010e4:	f001 f850 	bl	402188 <vPortExitCritical>
        vTaskSuspendAll();
  4010e8:	f000 fa3e 	bl	401568 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
  4010ec:	f001 f82a 	bl	402144 <vPortEnterCritical>
  4010f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4010f4:	b25b      	sxtb	r3, r3
  4010f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  4010fa:	bf08      	it	eq
  4010fc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
  401100:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401104:	b25b      	sxtb	r3, r3
  401106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  40110a:	bf08      	it	eq
  40110c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
  401110:	f001 f83a 	bl	402188 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401114:	a901      	add	r1, sp, #4
  401116:	a802      	add	r0, sp, #8
  401118:	f000 fd6a 	bl	401bf0 <xTaskCheckForTimeOut>
  40111c:	2800      	cmp	r0, #0
  40111e:	d1ca      	bne.n	4010b6 <xQueueReceive+0xba>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401120:	4620      	mov	r0, r4
  401122:	f7ff fd18 	bl	400b56 <prvIsQueueEmpty>
  401126:	2800      	cmp	r0, #0
  401128:	d0bf      	beq.n	4010aa <xQueueReceive+0xae>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40112a:	9901      	ldr	r1, [sp, #4]
  40112c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401130:	f000 fc9a 	bl	401a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
  401134:	4620      	mov	r0, r4
  401136:	f7ff fdb3 	bl	400ca0 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
  40113a:	f000 fb15 	bl	401768 <xTaskResumeAll>
  40113e:	2800      	cmp	r0, #0
  401140:	d1c3      	bne.n	4010ca <xQueueReceive+0xce>
                    portYIELD_WITHIN_API();
  401142:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40114a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  40114e:	f3bf 8f4f 	dsb	sy
  401152:	f3bf 8f6f 	isb	sy
  401156:	e7b8      	b.n	4010ca <xQueueReceive+0xce>
                return errQUEUE_EMPTY;
  401158:	2000      	movs	r0, #0
  40115a:	e78a      	b.n	401072 <xQueueReceive+0x76>

0040115c <vQueueWaitForMessageRestricted>:
    {
  40115c:	b570      	push	{r4, r5, r6, lr}
  40115e:	4604      	mov	r4, r0
  401160:	460d      	mov	r5, r1
  401162:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  401164:	f000 ffee 	bl	402144 <vPortEnterCritical>
  401168:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40116c:	b25b      	sxtb	r3, r3
  40116e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  401172:	bf04      	itt	eq
  401174:	2300      	moveq	r3, #0
  401176:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  40117a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40117e:	b25b      	sxtb	r3, r3
  401180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  401184:	bf04      	itt	eq
  401186:	2300      	moveq	r3, #0
  401188:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40118c:	f000 fffc 	bl	402188 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401192:	b11b      	cbz	r3, 40119c <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  401194:	4620      	mov	r0, r4
  401196:	f7ff fd83 	bl	400ca0 <prvUnlockQueue>
    }
  40119a:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40119c:	4632      	mov	r2, r6
  40119e:	4629      	mov	r1, r5
  4011a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011a4:	f000 fc78 	bl	401a98 <vTaskPlaceOnEventListRestricted>
  4011a8:	e7f4      	b.n	401194 <vQueueWaitForMessageRestricted+0x38>
	...

004011ac <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4011ac:	4b07      	ldr	r3, [pc, #28]	; (4011cc <prvResetNextTaskUnblockTime+0x20>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	681b      	ldr	r3, [r3, #0]
  4011b2:	b923      	cbnz	r3, 4011be <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
  4011b4:	4b06      	ldr	r3, [pc, #24]	; (4011d0 <prvResetNextTaskUnblockTime+0x24>)
  4011b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4011ba:	601a      	str	r2, [r3, #0]
  4011bc:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  4011be:	4b03      	ldr	r3, [pc, #12]	; (4011cc <prvResetNextTaskUnblockTime+0x20>)
  4011c0:	681b      	ldr	r3, [r3, #0]
  4011c2:	68db      	ldr	r3, [r3, #12]
  4011c4:	681a      	ldr	r2, [r3, #0]
  4011c6:	4b02      	ldr	r3, [pc, #8]	; (4011d0 <prvResetNextTaskUnblockTime+0x24>)
  4011c8:	601a      	str	r2, [r3, #0]
    }
}
  4011ca:	4770      	bx	lr
  4011cc:	20000544 	.word	0x20000544
  4011d0:	200004dc 	.word	0x200004dc

004011d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  4011d4:	b570      	push	{r4, r5, r6, lr}
  4011d6:	4604      	mov	r4, r0
  4011d8:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  4011da:	4b23      	ldr	r3, [pc, #140]	; (401268 <prvAddCurrentTaskToDelayedList+0x94>)
  4011dc:	681e      	ldr	r6, [r3, #0]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4011de:	4b23      	ldr	r3, [pc, #140]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  4011e0:	6818      	ldr	r0, [r3, #0]
  4011e2:	3004      	adds	r0, #4
  4011e4:	f7ff fca5 	bl	400b32 <uxListRemove>
  4011e8:	b948      	cbnz	r0, 4011fe <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  4011ea:	4b20      	ldr	r3, [pc, #128]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  4011ec:	681a      	ldr	r2, [r3, #0]
  4011ee:	4920      	ldr	r1, [pc, #128]	; (401270 <prvAddCurrentTaskToDelayedList+0x9c>)
  4011f0:	680b      	ldr	r3, [r1, #0]
  4011f2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4011f4:	2201      	movs	r2, #1
  4011f6:	4082      	lsls	r2, r0
  4011f8:	ea23 0302 	bic.w	r3, r3, r2
  4011fc:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4011fe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  401202:	d00d      	beq.n	401220 <prvAddCurrentTaskToDelayedList+0x4c>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
  401204:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401206:	4b19      	ldr	r3, [pc, #100]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  401208:	681b      	ldr	r3, [r3, #0]
  40120a:	605c      	str	r4, [r3, #4]

            if( xTimeToWake < xConstTickCount )
  40120c:	42a6      	cmp	r6, r4
  40120e:	d91d      	bls.n	40124c <prvAddCurrentTaskToDelayedList+0x78>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401210:	4b18      	ldr	r3, [pc, #96]	; (401274 <prvAddCurrentTaskToDelayedList+0xa0>)
  401212:	6818      	ldr	r0, [r3, #0]
  401214:	4b15      	ldr	r3, [pc, #84]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  401216:	6819      	ldr	r1, [r3, #0]
  401218:	3104      	adds	r1, #4
  40121a:	f7ff fc71 	bl	400b00 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
  40121e:	bd70      	pop	{r4, r5, r6, pc}
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401220:	2d00      	cmp	r5, #0
  401222:	d0ef      	beq.n	401204 <prvAddCurrentTaskToDelayedList+0x30>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401224:	4a14      	ldr	r2, [pc, #80]	; (401278 <prvAddCurrentTaskToDelayedList+0xa4>)
  401226:	6851      	ldr	r1, [r2, #4]
  401228:	4b10      	ldr	r3, [pc, #64]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  40122a:	6818      	ldr	r0, [r3, #0]
  40122c:	6081      	str	r1, [r0, #8]
  40122e:	6818      	ldr	r0, [r3, #0]
  401230:	688c      	ldr	r4, [r1, #8]
  401232:	60c4      	str	r4, [r0, #12]
  401234:	6818      	ldr	r0, [r3, #0]
  401236:	3004      	adds	r0, #4
  401238:	6060      	str	r0, [r4, #4]
  40123a:	6818      	ldr	r0, [r3, #0]
  40123c:	3004      	adds	r0, #4
  40123e:	6088      	str	r0, [r1, #8]
  401240:	681b      	ldr	r3, [r3, #0]
  401242:	615a      	str	r2, [r3, #20]
  401244:	6813      	ldr	r3, [r2, #0]
  401246:	3301      	adds	r3, #1
  401248:	6013      	str	r3, [r2, #0]
  40124a:	e7e8      	b.n	40121e <prvAddCurrentTaskToDelayedList+0x4a>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40124c:	4b0b      	ldr	r3, [pc, #44]	; (40127c <prvAddCurrentTaskToDelayedList+0xa8>)
  40124e:	6818      	ldr	r0, [r3, #0]
  401250:	4b06      	ldr	r3, [pc, #24]	; (40126c <prvAddCurrentTaskToDelayedList+0x98>)
  401252:	6819      	ldr	r1, [r3, #0]
  401254:	3104      	adds	r1, #4
  401256:	f7ff fc53 	bl	400b00 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
  40125a:	4b09      	ldr	r3, [pc, #36]	; (401280 <prvAddCurrentTaskToDelayedList+0xac>)
  40125c:	681b      	ldr	r3, [r3, #0]
  40125e:	42a3      	cmp	r3, r4
                    xNextTaskUnblockTime = xTimeToWake;
  401260:	bf84      	itt	hi
  401262:	4b07      	ldrhi	r3, [pc, #28]	; (401280 <prvAddCurrentTaskToDelayedList+0xac>)
  401264:	601c      	strhi	r4, [r3, #0]
}
  401266:	e7da      	b.n	40121e <prvAddCurrentTaskToDelayedList+0x4a>
  401268:	200004f8 	.word	0x200004f8
  40126c:	200005d4 	.word	0x200005d4
  401270:	200004f4 	.word	0x200004f4
  401274:	20000540 	.word	0x20000540
  401278:	20000500 	.word	0x20000500
  40127c:	20000544 	.word	0x20000544
  401280:	200004dc 	.word	0x200004dc

00401284 <prvIdleTask>:
{
  401284:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401286:	4d17      	ldr	r5, [pc, #92]	; (4012e4 <prvIdleTask+0x60>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401288:	4f17      	ldr	r7, [pc, #92]	; (4012e8 <prvIdleTask+0x64>)
                --uxCurrentNumberOfTasks;
  40128a:	4e18      	ldr	r6, [pc, #96]	; (4012ec <prvIdleTask+0x68>)
  40128c:	e00b      	b.n	4012a6 <prvIdleTask+0x22>
                taskYIELD();
  40128e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401296:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  40129a:	f3bf 8f4f 	dsb	sy
  40129e:	f3bf 8f6f 	isb	sy
            vApplicationIdleHook();
  4012a2:	f7fe ff54 	bl	40014e <vApplicationIdleHook>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4012a6:	682b      	ldr	r3, [r5, #0]
  4012a8:	b1bb      	cbz	r3, 4012da <prvIdleTask+0x56>
            taskENTER_CRITICAL();
  4012aa:	f000 ff4b 	bl	402144 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4012ae:	68fb      	ldr	r3, [r7, #12]
  4012b0:	68dc      	ldr	r4, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4012b2:	1d20      	adds	r0, r4, #4
  4012b4:	f7ff fc3d 	bl	400b32 <uxListRemove>
                --uxCurrentNumberOfTasks;
  4012b8:	6833      	ldr	r3, [r6, #0]
  4012ba:	3b01      	subs	r3, #1
  4012bc:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
  4012be:	682b      	ldr	r3, [r5, #0]
  4012c0:	3b01      	subs	r3, #1
  4012c2:	602b      	str	r3, [r5, #0]
            taskEXIT_CRITICAL();
  4012c4:	f000 ff60 	bl	402188 <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
  4012c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4012ca:	f001 f8f9 	bl	4024c0 <vPortFree>
            vPortFree( pxTCB );
  4012ce:	4620      	mov	r0, r4
  4012d0:	f001 f8f6 	bl	4024c0 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4012d4:	682b      	ldr	r3, [r5, #0]
  4012d6:	2b00      	cmp	r3, #0
  4012d8:	d1e7      	bne.n	4012aa <prvIdleTask+0x26>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4012da:	4b05      	ldr	r3, [pc, #20]	; (4012f0 <prvIdleTask+0x6c>)
  4012dc:	681b      	ldr	r3, [r3, #0]
  4012de:	2b01      	cmp	r3, #1
  4012e0:	d8d5      	bhi.n	40128e <prvIdleTask+0xa>
  4012e2:	e7de      	b.n	4012a2 <prvIdleTask+0x1e>
  4012e4:	20000514 	.word	0x20000514
  4012e8:	20000518 	.word	0x20000518
  4012ec:	200004fc 	.word	0x200004fc
  4012f0:	20000570 	.word	0x20000570

004012f4 <xTaskCreate>:
    {
  4012f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4012f8:	4607      	mov	r7, r0
  4012fa:	460c      	mov	r4, r1
  4012fc:	4698      	mov	r8, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4012fe:	0095      	lsls	r5, r2, #2
  401300:	4628      	mov	r0, r5
  401302:	f001 f83b 	bl	40237c <pvPortMalloc>
            if( pxStack != NULL )
  401306:	2800      	cmp	r0, #0
  401308:	f000 80c5 	beq.w	401496 <xTaskCreate+0x1a2>
  40130c:	4681      	mov	r9, r0
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  40130e:	2050      	movs	r0, #80	; 0x50
  401310:	f001 f834 	bl	40237c <pvPortMalloc>
                if( pxNewTCB != NULL )
  401314:	4606      	mov	r6, r0
  401316:	2800      	cmp	r0, #0
  401318:	f000 80b7 	beq.w	40148a <xTaskCreate+0x196>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
  40131c:	2250      	movs	r2, #80	; 0x50
  40131e:	2100      	movs	r1, #0
  401320:	f001 f9e0 	bl	4026e4 <memset>
                    pxNewTCB->pxStack = pxStack;
  401324:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401328:	462a      	mov	r2, r5
  40132a:	21a5      	movs	r1, #165	; 0xa5
  40132c:	4648      	mov	r0, r9
  40132e:	f001 f9d9 	bl	4026e4 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  401332:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
    if( pcName != NULL )
  401336:	b16c      	cbz	r4, 401354 <xTaskCreate+0x60>
  401338:	1e61      	subs	r1, r4, #1
  40133a:	f106 0333 	add.w	r3, r6, #51	; 0x33
  40133e:	3409      	adds	r4, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401340:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  401344:	f803 2f01 	strb.w	r2, [r3, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  401348:	b10a      	cbz	r2, 40134e <xTaskCreate+0x5a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40134a:	42a1      	cmp	r1, r4
  40134c:	d1f8      	bne.n	401340 <xTaskCreate+0x4c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40134e:	2300      	movs	r3, #0
  401350:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
  401354:	9b08      	ldr	r3, [sp, #32]
  401356:	2b04      	cmp	r3, #4
  401358:	d908      	bls.n	40136c <xTaskCreate+0x78>
  40135a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40135e:	f383 8811 	msr	BASEPRI, r3
  401362:	f3bf 8f6f 	isb	sy
  401366:	f3bf 8f4f 	dsb	sy
  40136a:	e7fe      	b.n	40136a <xTaskCreate+0x76>
    pxNewTCB->uxPriority = uxPriority;
  40136c:	9b08      	ldr	r3, [sp, #32]
  40136e:	62f3      	str	r3, [r6, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
  401370:	6433      	str	r3, [r6, #64]	; 0x40
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401372:	1d34      	adds	r4, r6, #4
  401374:	4620      	mov	r0, r4
  401376:	f7ff fbc0 	bl	400afa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  40137a:	f106 0018 	add.w	r0, r6, #24
  40137e:	f7ff fbbc 	bl	400afa <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401382:	6136      	str	r6, [r6, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401384:	9b08      	ldr	r3, [sp, #32]
  401386:	f1c3 0305 	rsb	r3, r3, #5
  40138a:	61b3      	str	r3, [r6, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  40138c:	6276      	str	r6, [r6, #36]	; 0x24
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  40138e:	3d04      	subs	r5, #4
  401390:	eb09 0005 	add.w	r0, r9, r5
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401394:	4642      	mov	r2, r8
  401396:	4639      	mov	r1, r7
  401398:	f020 0007 	bic.w	r0, r0, #7
  40139c:	f000 fea8 	bl	4020f0 <pxPortInitialiseStack>
  4013a0:	6030      	str	r0, [r6, #0]
    if( pxCreatedTask != NULL )
  4013a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4013a4:	b103      	cbz	r3, 4013a8 <xTaskCreate+0xb4>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4013a6:	601e      	str	r6, [r3, #0]
    taskENTER_CRITICAL();
  4013a8:	f000 fecc 	bl	402144 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
  4013ac:	4a3e      	ldr	r2, [pc, #248]	; (4014a8 <xTaskCreate+0x1b4>)
  4013ae:	6813      	ldr	r3, [r2, #0]
  4013b0:	3301      	adds	r3, #1
  4013b2:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  4013b4:	4b3d      	ldr	r3, [pc, #244]	; (4014ac <xTaskCreate+0x1b8>)
  4013b6:	681b      	ldr	r3, [r3, #0]
  4013b8:	2b00      	cmp	r3, #0
  4013ba:	d042      	beq.n	401442 <xTaskCreate+0x14e>
            if( xSchedulerRunning == pdFALSE )
  4013bc:	4b3c      	ldr	r3, [pc, #240]	; (4014b0 <xTaskCreate+0x1bc>)
  4013be:	681b      	ldr	r3, [r3, #0]
  4013c0:	b93b      	cbnz	r3, 4013d2 <xTaskCreate+0xde>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4013c2:	4b3a      	ldr	r3, [pc, #232]	; (4014ac <xTaskCreate+0x1b8>)
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4013c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  4013ca:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  4013cc:	bf9c      	itt	ls
  4013ce:	4b37      	ldrls	r3, [pc, #220]	; (4014ac <xTaskCreate+0x1b8>)
  4013d0:	601e      	strls	r6, [r3, #0]
        uxTaskNumber++;
  4013d2:	4a38      	ldr	r2, [pc, #224]	; (4014b4 <xTaskCreate+0x1c0>)
  4013d4:	6813      	ldr	r3, [r2, #0]
  4013d6:	3301      	adds	r3, #1
  4013d8:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  4013da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  4013dc:	4936      	ldr	r1, [pc, #216]	; (4014b8 <xTaskCreate+0x1c4>)
  4013de:	6808      	ldr	r0, [r1, #0]
  4013e0:	2201      	movs	r2, #1
  4013e2:	409a      	lsls	r2, r3
  4013e4:	4302      	orrs	r2, r0
  4013e6:	600a      	str	r2, [r1, #0]
  4013e8:	4a34      	ldr	r2, [pc, #208]	; (4014bc <xTaskCreate+0x1c8>)
  4013ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4013ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4013f2:	685b      	ldr	r3, [r3, #4]
  4013f4:	60b3      	str	r3, [r6, #8]
  4013f6:	6899      	ldr	r1, [r3, #8]
  4013f8:	60f1      	str	r1, [r6, #12]
  4013fa:	604c      	str	r4, [r1, #4]
  4013fc:	609c      	str	r4, [r3, #8]
  4013fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  401400:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401404:	0088      	lsls	r0, r1, #2
  401406:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  40140a:	6171      	str	r1, [r6, #20]
  40140c:	5811      	ldr	r1, [r2, r0]
  40140e:	3101      	adds	r1, #1
  401410:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
  401412:	f000 feb9 	bl	402188 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
  401416:	4b26      	ldr	r3, [pc, #152]	; (4014b0 <xTaskCreate+0x1bc>)
  401418:	681b      	ldr	r3, [r3, #0]
  40141a:	2b00      	cmp	r3, #0
  40141c:	d03f      	beq.n	40149e <xTaskCreate+0x1aa>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40141e:	4b23      	ldr	r3, [pc, #140]	; (4014ac <xTaskCreate+0x1b8>)
  401420:	681b      	ldr	r3, [r3, #0]
  401422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401424:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  401426:	429a      	cmp	r2, r3
  401428:	d23b      	bcs.n	4014a2 <xTaskCreate+0x1ae>
            taskYIELD_IF_USING_PREEMPTION();
  40142a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  40142e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401432:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401436:	f3bf 8f4f 	dsb	sy
  40143a:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  40143e:	2001      	movs	r0, #1
  401440:	e02b      	b.n	40149a <xTaskCreate+0x1a6>
            pxCurrentTCB = pxNewTCB;
  401442:	4b1a      	ldr	r3, [pc, #104]	; (4014ac <xTaskCreate+0x1b8>)
  401444:	601e      	str	r6, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401446:	6813      	ldr	r3, [r2, #0]
  401448:	2b01      	cmp	r3, #1
  40144a:	d1c2      	bne.n	4013d2 <xTaskCreate+0xde>
  40144c:	4d1b      	ldr	r5, [pc, #108]	; (4014bc <xTaskCreate+0x1c8>)
  40144e:	f105 0764 	add.w	r7, r5, #100	; 0x64
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401452:	4628      	mov	r0, r5
  401454:	f7ff fb46 	bl	400ae4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401458:	3514      	adds	r5, #20
  40145a:	42bd      	cmp	r5, r7
  40145c:	d1f9      	bne.n	401452 <xTaskCreate+0x15e>
    vListInitialise( &xDelayedTaskList1 );
  40145e:	4f18      	ldr	r7, [pc, #96]	; (4014c0 <xTaskCreate+0x1cc>)
  401460:	4638      	mov	r0, r7
  401462:	f7ff fb3f 	bl	400ae4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
  401466:	4d17      	ldr	r5, [pc, #92]	; (4014c4 <xTaskCreate+0x1d0>)
  401468:	4628      	mov	r0, r5
  40146a:	f7ff fb3b 	bl	400ae4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
  40146e:	4816      	ldr	r0, [pc, #88]	; (4014c8 <xTaskCreate+0x1d4>)
  401470:	f7ff fb38 	bl	400ae4 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
  401474:	4815      	ldr	r0, [pc, #84]	; (4014cc <xTaskCreate+0x1d8>)
  401476:	f7ff fb35 	bl	400ae4 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
  40147a:	4815      	ldr	r0, [pc, #84]	; (4014d0 <xTaskCreate+0x1dc>)
  40147c:	f7ff fb32 	bl	400ae4 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
  401480:	4b14      	ldr	r3, [pc, #80]	; (4014d4 <xTaskCreate+0x1e0>)
  401482:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401484:	4b14      	ldr	r3, [pc, #80]	; (4014d8 <xTaskCreate+0x1e4>)
  401486:	601d      	str	r5, [r3, #0]
}
  401488:	e7a3      	b.n	4013d2 <xTaskCreate+0xde>
                    vPortFreeStack( pxStack );
  40148a:	4648      	mov	r0, r9
  40148c:	f001 f818 	bl	4024c0 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401494:	e001      	b.n	40149a <xTaskCreate+0x1a6>
  401496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  40149a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            xReturn = pdPASS;
  40149e:	2001      	movs	r0, #1
  4014a0:	e7fb      	b.n	40149a <xTaskCreate+0x1a6>
  4014a2:	2001      	movs	r0, #1
        return xReturn;
  4014a4:	e7f9      	b.n	40149a <xTaskCreate+0x1a6>
  4014a6:	bf00      	nop
  4014a8:	200004fc 	.word	0x200004fc
  4014ac:	200005d4 	.word	0x200005d4
  4014b0:	200004f0 	.word	0x200004f0
  4014b4:	200004e0 	.word	0x200004e0
  4014b8:	200004f4 	.word	0x200004f4
  4014bc:	20000570 	.word	0x20000570
  4014c0:	2000055c 	.word	0x2000055c
  4014c4:	20000548 	.word	0x20000548
  4014c8:	2000052c 	.word	0x2000052c
  4014cc:	20000518 	.word	0x20000518
  4014d0:	20000500 	.word	0x20000500
  4014d4:	20000544 	.word	0x20000544
  4014d8:	20000540 	.word	0x20000540

004014dc <vTaskStartScheduler>:
{
  4014dc:	b500      	push	{lr}
  4014de:	b083      	sub	sp, #12
        xReturn = xTaskCreate( prvIdleTask,
  4014e0:	4b1a      	ldr	r3, [pc, #104]	; (40154c <vTaskStartScheduler+0x70>)
  4014e2:	9301      	str	r3, [sp, #4]
  4014e4:	2300      	movs	r3, #0
  4014e6:	9300      	str	r3, [sp, #0]
  4014e8:	2282      	movs	r2, #130	; 0x82
  4014ea:	4919      	ldr	r1, [pc, #100]	; (401550 <vTaskStartScheduler+0x74>)
  4014ec:	4819      	ldr	r0, [pc, #100]	; (401554 <vTaskStartScheduler+0x78>)
  4014ee:	f7ff ff01 	bl	4012f4 <xTaskCreate>
        if( xReturn == pdPASS )
  4014f2:	2801      	cmp	r0, #1
  4014f4:	d007      	beq.n	401506 <vTaskStartScheduler+0x2a>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4014f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  4014fa:	d01d      	beq.n	401538 <vTaskStartScheduler+0x5c>
    ( void ) uxTopUsedPriority;
  4014fc:	4b16      	ldr	r3, [pc, #88]	; (401558 <vTaskStartScheduler+0x7c>)
  4014fe:	681b      	ldr	r3, [r3, #0]
}
  401500:	b003      	add	sp, #12
  401502:	f85d fb04 	ldr.w	pc, [sp], #4
            xReturn = xTimerCreateTimerTask();
  401506:	f000 fd9b 	bl	402040 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
  40150a:	2801      	cmp	r0, #1
  40150c:	d1f3      	bne.n	4014f6 <vTaskStartScheduler+0x1a>
  40150e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401512:	f383 8811 	msr	BASEPRI, r3
  401516:	f3bf 8f6f 	isb	sy
  40151a:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  40151e:	4b0f      	ldr	r3, [pc, #60]	; (40155c <vTaskStartScheduler+0x80>)
  401520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401524:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  401526:	4b0e      	ldr	r3, [pc, #56]	; (401560 <vTaskStartScheduler+0x84>)
  401528:	2201      	movs	r2, #1
  40152a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  40152c:	4b0d      	ldr	r3, [pc, #52]	; (401564 <vTaskStartScheduler+0x88>)
  40152e:	2200      	movs	r2, #0
  401530:	601a      	str	r2, [r3, #0]
        xPortStartScheduler();
  401532:	f000 fe91 	bl	402258 <xPortStartScheduler>
  401536:	e7e1      	b.n	4014fc <vTaskStartScheduler+0x20>
  401538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40153c:	f383 8811 	msr	BASEPRI, r3
  401540:	f3bf 8f6f 	isb	sy
  401544:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401548:	e7fe      	b.n	401548 <vTaskStartScheduler+0x6c>
  40154a:	bf00      	nop
  40154c:	200004d8 	.word	0x200004d8
  401550:	00402830 	.word	0x00402830
  401554:	00401285 	.word	0x00401285
  401558:	20000004 	.word	0x20000004
  40155c:	200004dc 	.word	0x200004dc
  401560:	200004f0 	.word	0x200004f0
  401564:	200004f8 	.word	0x200004f8

00401568 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  401568:	4a02      	ldr	r2, [pc, #8]	; (401574 <vTaskSuspendAll+0xc>)
  40156a:	6813      	ldr	r3, [r2, #0]
  40156c:	3301      	adds	r3, #1
  40156e:	6013      	str	r3, [r2, #0]
}
  401570:	4770      	bx	lr
  401572:	bf00      	nop
  401574:	200004d4 	.word	0x200004d4

00401578 <xTaskGetTickCount>:
        xTicks = xTickCount;
  401578:	4b01      	ldr	r3, [pc, #4]	; (401580 <xTaskGetTickCount+0x8>)
  40157a:	6818      	ldr	r0, [r3, #0]
}
  40157c:	4770      	bx	lr
  40157e:	bf00      	nop
  401580:	200004f8 	.word	0x200004f8

00401584 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
  401584:	4b01      	ldr	r3, [pc, #4]	; (40158c <uxTaskGetNumberOfTasks+0x8>)
  401586:	6818      	ldr	r0, [r3, #0]
}
  401588:	4770      	bx	lr
  40158a:	bf00      	nop
  40158c:	200004fc 	.word	0x200004fc

00401590 <xTaskIncrementTick>:
{
  401590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401594:	4b69      	ldr	r3, [pc, #420]	; (40173c <xTaskIncrementTick+0x1ac>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	2b00      	cmp	r3, #0
  40159a:	f040 80c6 	bne.w	40172a <xTaskIncrementTick+0x19a>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40159e:	4b68      	ldr	r3, [pc, #416]	; (401740 <xTaskIncrementTick+0x1b0>)
  4015a0:	681d      	ldr	r5, [r3, #0]
  4015a2:	3501      	adds	r5, #1
        xTickCount = xConstTickCount;
  4015a4:	601d      	str	r5, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4015a6:	b9c5      	cbnz	r5, 4015da <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
  4015a8:	4b66      	ldr	r3, [pc, #408]	; (401744 <xTaskIncrementTick+0x1b4>)
  4015aa:	681b      	ldr	r3, [r3, #0]
  4015ac:	681b      	ldr	r3, [r3, #0]
  4015ae:	b143      	cbz	r3, 4015c2 <xTaskIncrementTick+0x32>
  4015b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4015b4:	f383 8811 	msr	BASEPRI, r3
  4015b8:	f3bf 8f6f 	isb	sy
  4015bc:	f3bf 8f4f 	dsb	sy
  4015c0:	e7fe      	b.n	4015c0 <xTaskIncrementTick+0x30>
  4015c2:	4a60      	ldr	r2, [pc, #384]	; (401744 <xTaskIncrementTick+0x1b4>)
  4015c4:	6811      	ldr	r1, [r2, #0]
  4015c6:	4b60      	ldr	r3, [pc, #384]	; (401748 <xTaskIncrementTick+0x1b8>)
  4015c8:	6818      	ldr	r0, [r3, #0]
  4015ca:	6010      	str	r0, [r2, #0]
  4015cc:	6019      	str	r1, [r3, #0]
  4015ce:	4a5f      	ldr	r2, [pc, #380]	; (40174c <xTaskIncrementTick+0x1bc>)
  4015d0:	6813      	ldr	r3, [r2, #0]
  4015d2:	3301      	adds	r3, #1
  4015d4:	6013      	str	r3, [r2, #0]
  4015d6:	f7ff fde9 	bl	4011ac <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
  4015da:	4b5d      	ldr	r3, [pc, #372]	; (401750 <xTaskIncrementTick+0x1c0>)
  4015dc:	681b      	ldr	r3, [r3, #0]
  4015de:	42ab      	cmp	r3, r5
  4015e0:	f200 8089 	bhi.w	4016f6 <xTaskIncrementTick+0x166>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015e4:	4b57      	ldr	r3, [pc, #348]	; (401744 <xTaskIncrementTick+0x1b4>)
  4015e6:	681b      	ldr	r3, [r3, #0]
  4015e8:	681b      	ldr	r3, [r3, #0]
  4015ea:	b14b      	cbz	r3, 401600 <xTaskIncrementTick+0x70>
    BaseType_t xSwitchRequired = pdFALSE;
  4015ec:	2400      	movs	r4, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4015ee:	4955      	ldr	r1, [pc, #340]	; (401744 <xTaskIncrementTick+0x1b4>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4015f0:	4626      	mov	r6, r4
                    prvAddTaskToReadyList( pxTCB );
  4015f2:	4858      	ldr	r0, [pc, #352]	; (401754 <xTaskIncrementTick+0x1c4>)
  4015f4:	f04f 0e01 	mov.w	lr, #1
  4015f8:	4a57      	ldr	r2, [pc, #348]	; (401758 <xTaskIncrementTick+0x1c8>)
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  4015fa:	f8df c160 	ldr.w	ip, [pc, #352]	; 40175c <xTaskIncrementTick+0x1cc>
  4015fe:	e03a      	b.n	401676 <xTaskIncrementTick+0xe6>
    BaseType_t xSwitchRequired = pdFALSE;
  401600:	2400      	movs	r4, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401602:	4b53      	ldr	r3, [pc, #332]	; (401750 <xTaskIncrementTick+0x1c0>)
  401604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401608:	601a      	str	r2, [r3, #0]
                    break;
  40160a:	e075      	b.n	4016f8 <xTaskIncrementTick+0x168>
                        xNextTaskUnblockTime = xItemValue;
  40160c:	4b50      	ldr	r3, [pc, #320]	; (401750 <xTaskIncrementTick+0x1c0>)
  40160e:	601f      	str	r7, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  401610:	e072      	b.n	4016f8 <xTaskIncrementTick+0x168>
                    prvAddTaskToReadyList( pxTCB );
  401612:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  401614:	f8d0 a000 	ldr.w	sl, [r0]
  401618:	fa0e f907 	lsl.w	r9, lr, r7
  40161c:	ea49 090a 	orr.w	r9, r9, sl
  401620:	f8c0 9000 	str.w	r9, [r0]
  401624:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401628:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  40162c:	687f      	ldr	r7, [r7, #4]
  40162e:	609f      	str	r7, [r3, #8]
  401630:	f8d7 9008 	ldr.w	r9, [r7, #8]
  401634:	f8c3 900c 	str.w	r9, [r3, #12]
  401638:	f8c9 8004 	str.w	r8, [r9, #4]
  40163c:	f8c7 8008 	str.w	r8, [r7, #8]
  401640:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  401642:	eb07 0887 	add.w	r8, r7, r7, lsl #2
  401646:	eb02 0988 	add.w	r9, r2, r8, lsl #2
  40164a:	f8c3 9014 	str.w	r9, [r3, #20]
  40164e:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
  401652:	f108 0801 	add.w	r8, r8, #1
  401656:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  40165a:	f842 8027 	str.w	r8, [r2, r7, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40165e:	f8dc 8000 	ldr.w	r8, [ip]
  401662:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  401664:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
                            xSwitchRequired = pdTRUE;
  401668:	429f      	cmp	r7, r3
  40166a:	bf88      	it	hi
  40166c:	2401      	movhi	r4, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40166e:	680b      	ldr	r3, [r1, #0]
  401670:	681b      	ldr	r3, [r3, #0]
  401672:	2b00      	cmp	r3, #0
  401674:	d0c5      	beq.n	401602 <xTaskIncrementTick+0x72>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401676:	680b      	ldr	r3, [r1, #0]
  401678:	68db      	ldr	r3, [r3, #12]
  40167a:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40167c:	685f      	ldr	r7, [r3, #4]
                    if( xConstTickCount < xItemValue )
  40167e:	42bd      	cmp	r5, r7
  401680:	d3c4      	bcc.n	40160c <xTaskIncrementTick+0x7c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401682:	695f      	ldr	r7, [r3, #20]
  401684:	f8d3 800c 	ldr.w	r8, [r3, #12]
  401688:	f8d3 9008 	ldr.w	r9, [r3, #8]
  40168c:	f8c9 8008 	str.w	r8, [r9, #8]
  401690:	f8d3 9008 	ldr.w	r9, [r3, #8]
  401694:	f8c8 9004 	str.w	r9, [r8, #4]
  401698:	f103 0804 	add.w	r8, r3, #4
  40169c:	f8d7 9004 	ldr.w	r9, [r7, #4]
  4016a0:	45c1      	cmp	r9, r8
  4016a2:	bf04      	itt	eq
  4016a4:	f8d3 900c 	ldreq.w	r9, [r3, #12]
  4016a8:	f8c7 9004 	streq.w	r9, [r7, #4]
  4016ac:	615e      	str	r6, [r3, #20]
  4016ae:	f8d7 9000 	ldr.w	r9, [r7]
  4016b2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  4016b6:	f8c7 9000 	str.w	r9, [r7]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4016ba:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  4016be:	f1b9 0f00 	cmp.w	r9, #0
  4016c2:	d0a6      	beq.n	401612 <xTaskIncrementTick+0x82>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  4016c4:	6a1f      	ldr	r7, [r3, #32]
  4016c6:	f8d3 a01c 	ldr.w	sl, [r3, #28]
  4016ca:	f8ca 7008 	str.w	r7, [sl, #8]
  4016ce:	f8d3 a01c 	ldr.w	sl, [r3, #28]
  4016d2:	f8c7 a004 	str.w	sl, [r7, #4]
  4016d6:	f103 0718 	add.w	r7, r3, #24
  4016da:	f8d9 a004 	ldr.w	sl, [r9, #4]
  4016de:	45ba      	cmp	sl, r7
  4016e0:	bf04      	itt	eq
  4016e2:	6a1f      	ldreq	r7, [r3, #32]
  4016e4:	f8c9 7004 	streq.w	r7, [r9, #4]
  4016e8:	629e      	str	r6, [r3, #40]	; 0x28
  4016ea:	f8d9 7000 	ldr.w	r7, [r9]
  4016ee:	3f01      	subs	r7, #1
  4016f0:	f8c9 7000 	str.w	r7, [r9]
  4016f4:	e78d      	b.n	401612 <xTaskIncrementTick+0x82>
    BaseType_t xSwitchRequired = pdFALSE;
  4016f6:	2400      	movs	r4, #0
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4016f8:	4b18      	ldr	r3, [pc, #96]	; (40175c <xTaskIncrementTick+0x1cc>)
  4016fa:	681b      	ldr	r3, [r3, #0]
  4016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401702:	009b      	lsls	r3, r3, #2
  401704:	4a14      	ldr	r2, [pc, #80]	; (401758 <xTaskIncrementTick+0x1c8>)
  401706:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
  401708:	2b02      	cmp	r3, #2
  40170a:	bf28      	it	cs
  40170c:	2401      	movcs	r4, #1
            if( xPendedTicks == ( TickType_t ) 0 )
  40170e:	4b14      	ldr	r3, [pc, #80]	; (401760 <xTaskIncrementTick+0x1d0>)
  401710:	681b      	ldr	r3, [r3, #0]
  401712:	b13b      	cbz	r3, 401724 <xTaskIncrementTick+0x194>
            if( xYieldPending != pdFALSE )
  401714:	4b13      	ldr	r3, [pc, #76]	; (401764 <xTaskIncrementTick+0x1d4>)
  401716:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
  401718:	2b00      	cmp	r3, #0
  40171a:	bf18      	it	ne
  40171c:	2401      	movne	r4, #1
}
  40171e:	4620      	mov	r0, r4
  401720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                vApplicationTickHook();
  401724:	f7fe fd1d 	bl	400162 <vApplicationTickHook>
  401728:	e7f4      	b.n	401714 <xTaskIncrementTick+0x184>
        ++xPendedTicks;
  40172a:	4a0d      	ldr	r2, [pc, #52]	; (401760 <xTaskIncrementTick+0x1d0>)
  40172c:	6813      	ldr	r3, [r2, #0]
  40172e:	3301      	adds	r3, #1
  401730:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
  401732:	f7fe fd16 	bl	400162 <vApplicationTickHook>
    BaseType_t xSwitchRequired = pdFALSE;
  401736:	2400      	movs	r4, #0
  401738:	e7f1      	b.n	40171e <xTaskIncrementTick+0x18e>
  40173a:	bf00      	nop
  40173c:	200004d4 	.word	0x200004d4
  401740:	200004f8 	.word	0x200004f8
  401744:	20000544 	.word	0x20000544
  401748:	20000540 	.word	0x20000540
  40174c:	200004e4 	.word	0x200004e4
  401750:	200004dc 	.word	0x200004dc
  401754:	200004f4 	.word	0x200004f4
  401758:	20000570 	.word	0x20000570
  40175c:	200005d4 	.word	0x200005d4
  401760:	200004ec 	.word	0x200004ec
  401764:	200004e8 	.word	0x200004e8

00401768 <xTaskResumeAll>:
{
  401768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( uxSchedulerSuspended );
  40176c:	4b59      	ldr	r3, [pc, #356]	; (4018d4 <xTaskResumeAll+0x16c>)
  40176e:	681b      	ldr	r3, [r3, #0]
  401770:	b943      	cbnz	r3, 401784 <xTaskResumeAll+0x1c>
  401772:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401776:	f383 8811 	msr	BASEPRI, r3
  40177a:	f3bf 8f6f 	isb	sy
  40177e:	f3bf 8f4f 	dsb	sy
  401782:	e7fe      	b.n	401782 <xTaskResumeAll+0x1a>
    taskENTER_CRITICAL();
  401784:	f000 fcde 	bl	402144 <vPortEnterCritical>
        --uxSchedulerSuspended;
  401788:	4b52      	ldr	r3, [pc, #328]	; (4018d4 <xTaskResumeAll+0x16c>)
  40178a:	681a      	ldr	r2, [r3, #0]
  40178c:	3a01      	subs	r2, #1
  40178e:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401790:	681b      	ldr	r3, [r3, #0]
  401792:	2b00      	cmp	r3, #0
  401794:	f040 8096 	bne.w	4018c4 <xTaskResumeAll+0x15c>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401798:	4b4f      	ldr	r3, [pc, #316]	; (4018d8 <xTaskResumeAll+0x170>)
  40179a:	681b      	ldr	r3, [r3, #0]
  40179c:	2b00      	cmp	r3, #0
  40179e:	f000 8097 	beq.w	4018d0 <xTaskResumeAll+0x168>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4017a2:	4b4e      	ldr	r3, [pc, #312]	; (4018dc <xTaskResumeAll+0x174>)
  4017a4:	681b      	ldr	r3, [r3, #0]
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	d06c      	beq.n	401884 <xTaskResumeAll+0x11c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4017aa:	f8df c130 	ldr.w	ip, [pc, #304]	; 4018dc <xTaskResumeAll+0x174>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  4017ae:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
  4017b0:	494b      	ldr	r1, [pc, #300]	; (4018e0 <xTaskResumeAll+0x178>)
  4017b2:	f04f 0e01 	mov.w	lr, #1
  4017b6:	4a4b      	ldr	r2, [pc, #300]	; (4018e4 <xTaskResumeAll+0x17c>)
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  4017b8:	4c4b      	ldr	r4, [pc, #300]	; (4018e8 <xTaskResumeAll+0x180>)
                        xYieldPending = pdTRUE;
  4017ba:	4d4c      	ldr	r5, [pc, #304]	; (4018ec <xTaskResumeAll+0x184>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4017bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4017c0:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  4017c2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  4017c4:	6a1f      	ldr	r7, [r3, #32]
  4017c6:	f8d3 801c 	ldr.w	r8, [r3, #28]
  4017ca:	f8c8 7008 	str.w	r7, [r8, #8]
  4017ce:	f8d3 801c 	ldr.w	r8, [r3, #28]
  4017d2:	f8c7 8004 	str.w	r8, [r7, #4]
  4017d6:	f103 0718 	add.w	r7, r3, #24
  4017da:	f8d6 8004 	ldr.w	r8, [r6, #4]
  4017de:	45b8      	cmp	r8, r7
  4017e0:	bf04      	itt	eq
  4017e2:	6a1f      	ldreq	r7, [r3, #32]
  4017e4:	6077      	streq	r7, [r6, #4]
  4017e6:	6298      	str	r0, [r3, #40]	; 0x28
  4017e8:	6837      	ldr	r7, [r6, #0]
  4017ea:	3f01      	subs	r7, #1
  4017ec:	6037      	str	r7, [r6, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4017ee:	695e      	ldr	r6, [r3, #20]
  4017f0:	68df      	ldr	r7, [r3, #12]
  4017f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4017f6:	f8c8 7008 	str.w	r7, [r8, #8]
  4017fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4017fe:	f8c7 8004 	str.w	r8, [r7, #4]
  401802:	1d1f      	adds	r7, r3, #4
  401804:	f8d6 8004 	ldr.w	r8, [r6, #4]
  401808:	45b8      	cmp	r8, r7
  40180a:	bf04      	itt	eq
  40180c:	f8d3 800c 	ldreq.w	r8, [r3, #12]
  401810:	f8c6 8004 	streq.w	r8, [r6, #4]
  401814:	6158      	str	r0, [r3, #20]
  401816:	f8d6 8000 	ldr.w	r8, [r6]
  40181a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  40181e:	f8c6 8000 	str.w	r8, [r6]
                    prvAddTaskToReadyList( pxTCB );
  401822:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401824:	f8d1 9000 	ldr.w	r9, [r1]
  401828:	fa0e f806 	lsl.w	r8, lr, r6
  40182c:	ea48 0809 	orr.w	r8, r8, r9
  401830:	f8c1 8000 	str.w	r8, [r1]
  401834:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401838:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40183c:	6876      	ldr	r6, [r6, #4]
  40183e:	609e      	str	r6, [r3, #8]
  401840:	f8d6 8008 	ldr.w	r8, [r6, #8]
  401844:	f8c3 800c 	str.w	r8, [r3, #12]
  401848:	f8c8 7004 	str.w	r7, [r8, #4]
  40184c:	60b7      	str	r7, [r6, #8]
  40184e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401850:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401854:	eb02 0887 	add.w	r8, r2, r7, lsl #2
  401858:	f8c3 8014 	str.w	r8, [r3, #20]
  40185c:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
  401860:	3701      	adds	r7, #1
  401862:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401866:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40186a:	6827      	ldr	r7, [r4, #0]
  40186c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  40186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401870:	429e      	cmp	r6, r3
                        xYieldPending = pdTRUE;
  401872:	bf88      	it	hi
  401874:	f8c5 e000 	strhi.w	lr, [r5]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401878:	f8dc 3000 	ldr.w	r3, [ip]
  40187c:	2b00      	cmp	r3, #0
  40187e:	d19d      	bne.n	4017bc <xTaskResumeAll+0x54>
                    prvResetNextTaskUnblockTime();
  401880:	f7ff fc94 	bl	4011ac <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  401884:	4b1a      	ldr	r3, [pc, #104]	; (4018f0 <xTaskResumeAll+0x188>)
  401886:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  401888:	b16c      	cbz	r4, 4018a6 <xTaskResumeAll+0x13e>
                                xYieldPending = pdTRUE;
  40188a:	4e18      	ldr	r6, [pc, #96]	; (4018ec <xTaskResumeAll+0x184>)
  40188c:	2501      	movs	r5, #1
  40188e:	e001      	b.n	401894 <xTaskResumeAll+0x12c>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  401890:	3c01      	subs	r4, #1
  401892:	d005      	beq.n	4018a0 <xTaskResumeAll+0x138>
                            if( xTaskIncrementTick() != pdFALSE )
  401894:	f7ff fe7c 	bl	401590 <xTaskIncrementTick>
  401898:	2800      	cmp	r0, #0
  40189a:	d0f9      	beq.n	401890 <xTaskResumeAll+0x128>
                                xYieldPending = pdTRUE;
  40189c:	6035      	str	r5, [r6, #0]
  40189e:	e7f7      	b.n	401890 <xTaskResumeAll+0x128>
                        xPendedTicks = 0;
  4018a0:	4b13      	ldr	r3, [pc, #76]	; (4018f0 <xTaskResumeAll+0x188>)
  4018a2:	2200      	movs	r2, #0
  4018a4:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  4018a6:	4b11      	ldr	r3, [pc, #68]	; (4018ec <xTaskResumeAll+0x184>)
  4018a8:	681c      	ldr	r4, [r3, #0]
  4018aa:	b164      	cbz	r4, 4018c6 <xTaskResumeAll+0x15e>
                    taskYIELD_IF_USING_PREEMPTION();
  4018ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  4018b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  4018b8:	f3bf 8f4f 	dsb	sy
  4018bc:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
  4018c0:	2401      	movs	r4, #1
  4018c2:	e000      	b.n	4018c6 <xTaskResumeAll+0x15e>
    BaseType_t xAlreadyYielded = pdFALSE;
  4018c4:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  4018c6:	f000 fc5f 	bl	402188 <vPortExitCritical>
}
  4018ca:	4620      	mov	r0, r4
  4018cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  4018d0:	2400      	movs	r4, #0
  4018d2:	e7f8      	b.n	4018c6 <xTaskResumeAll+0x15e>
  4018d4:	200004d4 	.word	0x200004d4
  4018d8:	200004fc 	.word	0x200004fc
  4018dc:	2000052c 	.word	0x2000052c
  4018e0:	200004f4 	.word	0x200004f4
  4018e4:	20000570 	.word	0x20000570
  4018e8:	200005d4 	.word	0x200005d4
  4018ec:	200004e8 	.word	0x200004e8
  4018f0:	200004ec 	.word	0x200004ec

004018f4 <xTaskDelayUntil>:
    {
  4018f4:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxPreviousWakeTime );
  4018f6:	b158      	cbz	r0, 401910 <xTaskDelayUntil+0x1c>
  4018f8:	460c      	mov	r4, r1
  4018fa:	4605      	mov	r5, r0
        configASSERT( ( xTimeIncrement > 0U ) );
  4018fc:	b989      	cbnz	r1, 401922 <xTaskDelayUntil+0x2e>
  4018fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401902:	f383 8811 	msr	BASEPRI, r3
  401906:	f3bf 8f6f 	isb	sy
  40190a:	f3bf 8f4f 	dsb	sy
  40190e:	e7fe      	b.n	40190e <xTaskDelayUntil+0x1a>
  401910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401914:	f383 8811 	msr	BASEPRI, r3
  401918:	f3bf 8f6f 	isb	sy
  40191c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxPreviousWakeTime );
  401920:	e7fe      	b.n	401920 <xTaskDelayUntil+0x2c>
        configASSERT( uxSchedulerSuspended == 0 );
  401922:	4b1d      	ldr	r3, [pc, #116]	; (401998 <xTaskDelayUntil+0xa4>)
  401924:	681b      	ldr	r3, [r3, #0]
  401926:	b143      	cbz	r3, 40193a <xTaskDelayUntil+0x46>
  401928:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40192c:	f383 8811 	msr	BASEPRI, r3
  401930:	f3bf 8f6f 	isb	sy
  401934:	f3bf 8f4f 	dsb	sy
  401938:	e7fe      	b.n	401938 <xTaskDelayUntil+0x44>
        vTaskSuspendAll();
  40193a:	f7ff fe15 	bl	401568 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
  40193e:	4b17      	ldr	r3, [pc, #92]	; (40199c <xTaskDelayUntil+0xa8>)
  401940:	6818      	ldr	r0, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
  401942:	682b      	ldr	r3, [r5, #0]
  401944:	441c      	add	r4, r3
            if( xConstTickCount < *pxPreviousWakeTime )
  401946:	4283      	cmp	r3, r0
  401948:	d909      	bls.n	40195e <xTaskDelayUntil+0x6a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  40194a:	42a3      	cmp	r3, r4
  40194c:	d802      	bhi.n	401954 <xTaskDelayUntil+0x60>
            *pxPreviousWakeTime = xTimeToWake;
  40194e:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401950:	2400      	movs	r4, #0
  401952:	e011      	b.n	401978 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  401954:	42a0      	cmp	r0, r4
  401956:	d309      	bcc.n	40196c <xTaskDelayUntil+0x78>
            *pxPreviousWakeTime = xTimeToWake;
  401958:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  40195a:	2400      	movs	r4, #0
  40195c:	e00c      	b.n	401978 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
  40195e:	42a3      	cmp	r3, r4
  401960:	d804      	bhi.n	40196c <xTaskDelayUntil+0x78>
  401962:	42a0      	cmp	r0, r4
  401964:	d302      	bcc.n	40196c <xTaskDelayUntil+0x78>
            *pxPreviousWakeTime = xTimeToWake;
  401966:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401968:	2400      	movs	r4, #0
  40196a:	e005      	b.n	401978 <xTaskDelayUntil+0x84>
            *pxPreviousWakeTime = xTimeToWake;
  40196c:	602c      	str	r4, [r5, #0]
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
  40196e:	2100      	movs	r1, #0
  401970:	1a20      	subs	r0, r4, r0
  401972:	f7ff fc2f 	bl	4011d4 <prvAddCurrentTaskToDelayedList>
  401976:	2401      	movs	r4, #1
        xAlreadyYielded = xTaskResumeAll();
  401978:	f7ff fef6 	bl	401768 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
  40197c:	b948      	cbnz	r0, 401992 <xTaskDelayUntil+0x9e>
            portYIELD_WITHIN_API();
  40197e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401986:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  40198a:	f3bf 8f4f 	dsb	sy
  40198e:	f3bf 8f6f 	isb	sy
    }
  401992:	4620      	mov	r0, r4
  401994:	bd38      	pop	{r3, r4, r5, pc}
  401996:	bf00      	nop
  401998:	200004d4 	.word	0x200004d4
  40199c:	200004f8 	.word	0x200004f8

004019a0 <vTaskSwitchContext>:
{
  4019a0:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4019a2:	4b2c      	ldr	r3, [pc, #176]	; (401a54 <vTaskSwitchContext+0xb4>)
  4019a4:	681b      	ldr	r3, [r3, #0]
  4019a6:	b11b      	cbz	r3, 4019b0 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
  4019a8:	4b2b      	ldr	r3, [pc, #172]	; (401a58 <vTaskSwitchContext+0xb8>)
  4019aa:	2201      	movs	r2, #1
  4019ac:	601a      	str	r2, [r3, #0]
}
  4019ae:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
  4019b0:	4b29      	ldr	r3, [pc, #164]	; (401a58 <vTaskSwitchContext+0xb8>)
  4019b2:	2200      	movs	r2, #0
  4019b4:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  4019b6:	4b29      	ldr	r3, [pc, #164]	; (401a5c <vTaskSwitchContext+0xbc>)
  4019b8:	681b      	ldr	r3, [r3, #0]
  4019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019bc:	681a      	ldr	r2, [r3, #0]
  4019be:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4019c2:	d103      	bne.n	4019cc <vTaskSwitchContext+0x2c>
  4019c4:	685a      	ldr	r2, [r3, #4]
  4019c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4019ca:	d01b      	beq.n	401a04 <vTaskSwitchContext+0x64>
  4019cc:	4b23      	ldr	r3, [pc, #140]	; (401a5c <vTaskSwitchContext+0xbc>)
  4019ce:	6818      	ldr	r0, [r3, #0]
  4019d0:	6819      	ldr	r1, [r3, #0]
  4019d2:	3134      	adds	r1, #52	; 0x34
  4019d4:	f7fe fbbc 	bl	400150 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4019d8:	4b21      	ldr	r3, [pc, #132]	; (401a60 <vTaskSwitchContext+0xc0>)
  4019da:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4019dc:	fab3 f383 	clz	r3, r3
  4019e0:	b2db      	uxtb	r3, r3
  4019e2:	f1c3 031f 	rsb	r3, r3, #31
  4019e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4019ea:	0092      	lsls	r2, r2, #2
  4019ec:	491d      	ldr	r1, [pc, #116]	; (401a64 <vTaskSwitchContext+0xc4>)
  4019ee:	588a      	ldr	r2, [r1, r2]
  4019f0:	b98a      	cbnz	r2, 401a16 <vTaskSwitchContext+0x76>
        __asm volatile
  4019f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4019f6:	f383 8811 	msr	BASEPRI, r3
  4019fa:	f3bf 8f6f 	isb	sy
  4019fe:	f3bf 8f4f 	dsb	sy
  401a02:	e7fe      	b.n	401a02 <vTaskSwitchContext+0x62>
        taskCHECK_FOR_STACK_OVERFLOW();
  401a04:	689a      	ldr	r2, [r3, #8]
  401a06:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401a0a:	d1df      	bne.n	4019cc <vTaskSwitchContext+0x2c>
  401a0c:	68db      	ldr	r3, [r3, #12]
  401a0e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401a12:	d1db      	bne.n	4019cc <vTaskSwitchContext+0x2c>
  401a14:	e7e0      	b.n	4019d8 <vTaskSwitchContext+0x38>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a16:	4a13      	ldr	r2, [pc, #76]	; (401a64 <vTaskSwitchContext+0xc4>)
  401a18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a1c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  401a20:	6848      	ldr	r0, [r1, #4]
  401a22:	6840      	ldr	r0, [r0, #4]
  401a24:	6048      	str	r0, [r1, #4]
  401a26:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401a2e:	3208      	adds	r2, #8
  401a30:	4290      	cmp	r0, r2
  401a32:	d009      	beq.n	401a48 <vTaskSwitchContext+0xa8>
  401a34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a38:	4a0a      	ldr	r2, [pc, #40]	; (401a64 <vTaskSwitchContext+0xc4>)
  401a3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a3e:	685b      	ldr	r3, [r3, #4]
  401a40:	68da      	ldr	r2, [r3, #12]
  401a42:	4b06      	ldr	r3, [pc, #24]	; (401a5c <vTaskSwitchContext+0xbc>)
  401a44:	601a      	str	r2, [r3, #0]
}
  401a46:	e7b2      	b.n	4019ae <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a48:	4a06      	ldr	r2, [pc, #24]	; (401a64 <vTaskSwitchContext+0xc4>)
  401a4a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401a4e:	68d1      	ldr	r1, [r2, #12]
  401a50:	6051      	str	r1, [r2, #4]
  401a52:	e7ef      	b.n	401a34 <vTaskSwitchContext+0x94>
  401a54:	200004d4 	.word	0x200004d4
  401a58:	200004e8 	.word	0x200004e8
  401a5c:	200005d4 	.word	0x200005d4
  401a60:	200004f4 	.word	0x200004f4
  401a64:	20000570 	.word	0x20000570

00401a68 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
  401a68:	b158      	cbz	r0, 401a82 <vTaskPlaceOnEventList+0x1a>
{
  401a6a:	b510      	push	{r4, lr}
  401a6c:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a6e:	4a09      	ldr	r2, [pc, #36]	; (401a94 <vTaskPlaceOnEventList+0x2c>)
  401a70:	6811      	ldr	r1, [r2, #0]
  401a72:	3118      	adds	r1, #24
  401a74:	f7ff f844 	bl	400b00 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401a78:	2101      	movs	r1, #1
  401a7a:	4620      	mov	r0, r4
  401a7c:	f7ff fbaa 	bl	4011d4 <prvAddCurrentTaskToDelayedList>
}
  401a80:	bd10      	pop	{r4, pc}
  401a82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401a86:	f383 8811 	msr	BASEPRI, r3
  401a8a:	f3bf 8f6f 	isb	sy
  401a8e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
  401a92:	e7fe      	b.n	401a92 <vTaskPlaceOnEventList+0x2a>
  401a94:	200005d4 	.word	0x200005d4

00401a98 <vTaskPlaceOnEventListRestricted>:
    {
  401a98:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
  401a9a:	b1e0      	cbz	r0, 401ad6 <vTaskPlaceOnEventListRestricted+0x3e>
  401a9c:	468c      	mov	ip, r1
  401a9e:	4611      	mov	r1, r2
  401aa0:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401aa2:	6842      	ldr	r2, [r0, #4]
  401aa4:	4b10      	ldr	r3, [pc, #64]	; (401ae8 <vTaskPlaceOnEventListRestricted+0x50>)
  401aa6:	6818      	ldr	r0, [r3, #0]
  401aa8:	61c2      	str	r2, [r0, #28]
  401aaa:	6818      	ldr	r0, [r3, #0]
  401aac:	6894      	ldr	r4, [r2, #8]
  401aae:	6204      	str	r4, [r0, #32]
  401ab0:	6818      	ldr	r0, [r3, #0]
  401ab2:	3018      	adds	r0, #24
  401ab4:	6060      	str	r0, [r4, #4]
  401ab6:	6818      	ldr	r0, [r3, #0]
  401ab8:	3018      	adds	r0, #24
  401aba:	6090      	str	r0, [r2, #8]
  401abc:	681b      	ldr	r3, [r3, #0]
  401abe:	629d      	str	r5, [r3, #40]	; 0x28
  401ac0:	682b      	ldr	r3, [r5, #0]
  401ac2:	3301      	adds	r3, #1
  401ac4:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
  401ac6:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401ac8:	bf0c      	ite	eq
  401aca:	4660      	moveq	r0, ip
  401acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  401ad0:	f7ff fb80 	bl	4011d4 <prvAddCurrentTaskToDelayedList>
    }
  401ad4:	bd38      	pop	{r3, r4, r5, pc}
  401ad6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401ada:	f383 8811 	msr	BASEPRI, r3
  401ade:	f3bf 8f6f 	isb	sy
  401ae2:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
  401ae6:	e7fe      	b.n	401ae6 <vTaskPlaceOnEventListRestricted+0x4e>
  401ae8:	200005d4 	.word	0x200005d4

00401aec <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401aec:	68c3      	ldr	r3, [r0, #12]
  401aee:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
  401af0:	2b00      	cmp	r3, #0
  401af2:	d04f      	beq.n	401b94 <xTaskRemoveFromEventList+0xa8>
{
  401af4:	b430      	push	{r4, r5}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401af8:	69d8      	ldr	r0, [r3, #28]
  401afa:	6a19      	ldr	r1, [r3, #32]
  401afc:	6081      	str	r1, [r0, #8]
  401afe:	69d8      	ldr	r0, [r3, #28]
  401b00:	6048      	str	r0, [r1, #4]
  401b02:	f103 0018 	add.w	r0, r3, #24
  401b06:	6851      	ldr	r1, [r2, #4]
  401b08:	4281      	cmp	r1, r0
  401b0a:	bf04      	itt	eq
  401b0c:	6a19      	ldreq	r1, [r3, #32]
  401b0e:	6051      	streq	r1, [r2, #4]
  401b10:	2100      	movs	r1, #0
  401b12:	6299      	str	r1, [r3, #40]	; 0x28
  401b14:	6811      	ldr	r1, [r2, #0]
  401b16:	3901      	subs	r1, #1
  401b18:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b1a:	4a29      	ldr	r2, [pc, #164]	; (401bc0 <xTaskRemoveFromEventList+0xd4>)
  401b1c:	6812      	ldr	r2, [r2, #0]
  401b1e:	2a00      	cmp	r2, #0
  401b20:	d141      	bne.n	401ba6 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401b22:	695a      	ldr	r2, [r3, #20]
  401b24:	6898      	ldr	r0, [r3, #8]
  401b26:	68d9      	ldr	r1, [r3, #12]
  401b28:	6081      	str	r1, [r0, #8]
  401b2a:	6898      	ldr	r0, [r3, #8]
  401b2c:	6048      	str	r0, [r1, #4]
  401b2e:	1d18      	adds	r0, r3, #4
  401b30:	6851      	ldr	r1, [r2, #4]
  401b32:	4281      	cmp	r1, r0
  401b34:	bf04      	itt	eq
  401b36:	68d9      	ldreq	r1, [r3, #12]
  401b38:	6051      	streq	r1, [r2, #4]
  401b3a:	2100      	movs	r1, #0
  401b3c:	6159      	str	r1, [r3, #20]
  401b3e:	6811      	ldr	r1, [r2, #0]
  401b40:	3901      	subs	r1, #1
  401b42:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b46:	4c1f      	ldr	r4, [pc, #124]	; (401bc4 <xTaskRemoveFromEventList+0xd8>)
  401b48:	6825      	ldr	r5, [r4, #0]
  401b4a:	2101      	movs	r1, #1
  401b4c:	4091      	lsls	r1, r2
  401b4e:	4329      	orrs	r1, r5
  401b50:	6021      	str	r1, [r4, #0]
  401b52:	491d      	ldr	r1, [pc, #116]	; (401bc8 <xTaskRemoveFromEventList+0xdc>)
  401b54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401b58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401b5c:	6852      	ldr	r2, [r2, #4]
  401b5e:	609a      	str	r2, [r3, #8]
  401b60:	6894      	ldr	r4, [r2, #8]
  401b62:	60dc      	str	r4, [r3, #12]
  401b64:	6060      	str	r0, [r4, #4]
  401b66:	6090      	str	r0, [r2, #8]
  401b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b6a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  401b6e:	0084      	lsls	r4, r0, #2
  401b70:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401b74:	6158      	str	r0, [r3, #20]
  401b76:	5908      	ldr	r0, [r1, r4]
  401b78:	3001      	adds	r0, #1
  401b7a:	5108      	str	r0, [r1, r4]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b7c:	4a13      	ldr	r2, [pc, #76]	; (401bcc <xTaskRemoveFromEventList+0xe0>)
  401b7e:	6811      	ldr	r1, [r2, #0]
  401b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b82:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  401b84:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  401b86:	bf83      	ittte	hi
  401b88:	2001      	movhi	r0, #1
  401b8a:	4b11      	ldrhi	r3, [pc, #68]	; (401bd0 <xTaskRemoveFromEventList+0xe4>)
  401b8c:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  401b8e:	2000      	movls	r0, #0
}
  401b90:	bc30      	pop	{r4, r5}
  401b92:	4770      	bx	lr
  401b94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401b98:	f383 8811 	msr	BASEPRI, r3
  401b9c:	f3bf 8f6f 	isb	sy
  401ba0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
  401ba4:	e7fe      	b.n	401ba4 <xTaskRemoveFromEventList+0xb8>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401ba6:	4a0b      	ldr	r2, [pc, #44]	; (401bd4 <xTaskRemoveFromEventList+0xe8>)
  401ba8:	6851      	ldr	r1, [r2, #4]
  401baa:	61d9      	str	r1, [r3, #28]
  401bac:	688c      	ldr	r4, [r1, #8]
  401bae:	621c      	str	r4, [r3, #32]
  401bb0:	6060      	str	r0, [r4, #4]
  401bb2:	6088      	str	r0, [r1, #8]
  401bb4:	629a      	str	r2, [r3, #40]	; 0x28
  401bb6:	6811      	ldr	r1, [r2, #0]
  401bb8:	3101      	adds	r1, #1
  401bba:	6011      	str	r1, [r2, #0]
  401bbc:	e7de      	b.n	401b7c <xTaskRemoveFromEventList+0x90>
  401bbe:	bf00      	nop
  401bc0:	200004d4 	.word	0x200004d4
  401bc4:	200004f4 	.word	0x200004f4
  401bc8:	20000570 	.word	0x20000570
  401bcc:	200005d4 	.word	0x200005d4
  401bd0:	200004e8 	.word	0x200004e8
  401bd4:	2000052c 	.word	0x2000052c

00401bd8 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  401bd8:	4b03      	ldr	r3, [pc, #12]	; (401be8 <vTaskInternalSetTimeOutState+0x10>)
  401bda:	681b      	ldr	r3, [r3, #0]
  401bdc:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401bde:	4b03      	ldr	r3, [pc, #12]	; (401bec <vTaskInternalSetTimeOutState+0x14>)
  401be0:	681b      	ldr	r3, [r3, #0]
  401be2:	6043      	str	r3, [r0, #4]
}
  401be4:	4770      	bx	lr
  401be6:	bf00      	nop
  401be8:	200004e4 	.word	0x200004e4
  401bec:	200004f8 	.word	0x200004f8

00401bf0 <xTaskCheckForTimeOut>:
{
  401bf0:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxTimeOut );
  401bf2:	b1b8      	cbz	r0, 401c24 <xTaskCheckForTimeOut+0x34>
  401bf4:	460c      	mov	r4, r1
  401bf6:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
  401bf8:	b1e9      	cbz	r1, 401c36 <xTaskCheckForTimeOut+0x46>
    taskENTER_CRITICAL();
  401bfa:	f000 faa3 	bl	402144 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
  401bfe:	4b1c      	ldr	r3, [pc, #112]	; (401c70 <xTaskCheckForTimeOut+0x80>)
  401c00:	681a      	ldr	r2, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401c02:	6823      	ldr	r3, [r4, #0]
  401c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  401c08:	d02d      	beq.n	401c66 <xTaskCheckForTimeOut+0x76>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401c0a:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401c0c:	4819      	ldr	r0, [pc, #100]	; (401c74 <xTaskCheckForTimeOut+0x84>)
  401c0e:	6800      	ldr	r0, [r0, #0]
  401c10:	f8d5 c000 	ldr.w	ip, [r5]
  401c14:	4584      	cmp	ip, r0
  401c16:	d017      	beq.n	401c48 <xTaskCheckForTimeOut+0x58>
  401c18:	4291      	cmp	r1, r2
  401c1a:	d815      	bhi.n	401c48 <xTaskCheckForTimeOut+0x58>
            *pxTicksToWait = ( TickType_t ) 0;
  401c1c:	2300      	movs	r3, #0
  401c1e:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401c20:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  401c22:	e021      	b.n	401c68 <xTaskCheckForTimeOut+0x78>
  401c24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401c28:	f383 8811 	msr	BASEPRI, r3
  401c2c:	f3bf 8f6f 	isb	sy
  401c30:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
  401c34:	e7fe      	b.n	401c34 <xTaskCheckForTimeOut+0x44>
  401c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401c3a:	f383 8811 	msr	BASEPRI, r3
  401c3e:	f3bf 8f6f 	isb	sy
  401c42:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
  401c46:	e7fe      	b.n	401c46 <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401c48:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401c4a:	4283      	cmp	r3, r0
  401c4c:	d803      	bhi.n	401c56 <xTaskCheckForTimeOut+0x66>
            *pxTicksToWait = ( TickType_t ) 0;
  401c4e:	2300      	movs	r3, #0
  401c50:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401c52:	2401      	movs	r4, #1
  401c54:	e008      	b.n	401c68 <xTaskCheckForTimeOut+0x78>
            *pxTicksToWait -= xElapsedTime;
  401c56:	1a9b      	subs	r3, r3, r2
  401c58:	440b      	add	r3, r1
  401c5a:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  401c5c:	4628      	mov	r0, r5
  401c5e:	f7ff ffbb 	bl	401bd8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
  401c62:	2400      	movs	r4, #0
  401c64:	e000      	b.n	401c68 <xTaskCheckForTimeOut+0x78>
                xReturn = pdFALSE;
  401c66:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  401c68:	f000 fa8e 	bl	402188 <vPortExitCritical>
}
  401c6c:	4620      	mov	r0, r4
  401c6e:	bd38      	pop	{r3, r4, r5, pc}
  401c70:	200004f8 	.word	0x200004f8
  401c74:	200004e4 	.word	0x200004e4

00401c78 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  401c78:	4b01      	ldr	r3, [pc, #4]	; (401c80 <vTaskMissedYield+0x8>)
  401c7a:	2201      	movs	r2, #1
  401c7c:	601a      	str	r2, [r3, #0]
}
  401c7e:	4770      	bx	lr
  401c80:	200004e8 	.word	0x200004e8

00401c84 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  401c84:	4b05      	ldr	r3, [pc, #20]	; (401c9c <xTaskGetSchedulerState+0x18>)
  401c86:	681b      	ldr	r3, [r3, #0]
  401c88:	b133      	cbz	r3, 401c98 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c8a:	4b05      	ldr	r3, [pc, #20]	; (401ca0 <xTaskGetSchedulerState+0x1c>)
  401c8c:	6818      	ldr	r0, [r3, #0]
  401c8e:	fab0 f080 	clz	r0, r0
  401c92:	0940      	lsrs	r0, r0, #5
  401c94:	0040      	lsls	r0, r0, #1
  401c96:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  401c98:	2001      	movs	r0, #1
    }
  401c9a:	4770      	bx	lr
  401c9c:	200004f0 	.word	0x200004f0
  401ca0:	200004d4 	.word	0x200004d4

00401ca4 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  401ca4:	2800      	cmp	r0, #0
  401ca6:	d051      	beq.n	401d4c <xTaskPriorityDisinherit+0xa8>
    {
  401ca8:	b570      	push	{r4, r5, r6, lr}
  401caa:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401cac:	4b29      	ldr	r3, [pc, #164]	; (401d54 <xTaskPriorityDisinherit+0xb0>)
  401cae:	681b      	ldr	r3, [r3, #0]
  401cb0:	4283      	cmp	r3, r0
  401cb2:	d008      	beq.n	401cc6 <xTaskPriorityDisinherit+0x22>
  401cb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401cb8:	f383 8811 	msr	BASEPRI, r3
  401cbc:	f3bf 8f6f 	isb	sy
  401cc0:	f3bf 8f4f 	dsb	sy
  401cc4:	e7fe      	b.n	401cc4 <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
  401cc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  401cc8:	b943      	cbnz	r3, 401cdc <xTaskPriorityDisinherit+0x38>
  401cca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401cce:	f383 8811 	msr	BASEPRI, r3
  401cd2:	f3bf 8f6f 	isb	sy
  401cd6:	f3bf 8f4f 	dsb	sy
  401cda:	e7fe      	b.n	401cda <xTaskPriorityDisinherit+0x36>
            ( pxTCB->uxMutexesHeld )--;
  401cdc:	3b01      	subs	r3, #1
  401cde:	6443      	str	r3, [r0, #68]	; 0x44
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401ce0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401ce2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ce4:	4291      	cmp	r1, r2
  401ce6:	d033      	beq.n	401d50 <xTaskPriorityDisinherit+0xac>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401ce8:	b10b      	cbz	r3, 401cee <xTaskPriorityDisinherit+0x4a>
        BaseType_t xReturn = pdFALSE;
  401cea:	2000      	movs	r0, #0
    }
  401cec:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401cee:	1d05      	adds	r5, r0, #4
  401cf0:	4628      	mov	r0, r5
  401cf2:	f7fe ff1e 	bl	400b32 <uxListRemove>
  401cf6:	b938      	cbnz	r0, 401d08 <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401cf8:	4917      	ldr	r1, [pc, #92]	; (401d58 <xTaskPriorityDisinherit+0xb4>)
  401cfa:	680b      	ldr	r3, [r1, #0]
  401cfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401cfe:	2201      	movs	r2, #1
  401d00:	4082      	lsls	r2, r0
  401d02:	ea23 0302 	bic.w	r3, r3, r2
  401d06:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d0c:	f1c3 0205 	rsb	r2, r3, #5
  401d10:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401d12:	4911      	ldr	r1, [pc, #68]	; (401d58 <xTaskPriorityDisinherit+0xb4>)
  401d14:	680e      	ldr	r6, [r1, #0]
  401d16:	2001      	movs	r0, #1
  401d18:	fa00 f203 	lsl.w	r2, r0, r3
  401d1c:	4332      	orrs	r2, r6
  401d1e:	600a      	str	r2, [r1, #0]
  401d20:	4a0e      	ldr	r2, [pc, #56]	; (401d5c <xTaskPriorityDisinherit+0xb8>)
  401d22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d2a:	685b      	ldr	r3, [r3, #4]
  401d2c:	60a3      	str	r3, [r4, #8]
  401d2e:	6899      	ldr	r1, [r3, #8]
  401d30:	60e1      	str	r1, [r4, #12]
  401d32:	604d      	str	r5, [r1, #4]
  401d34:	609d      	str	r5, [r3, #8]
  401d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401d38:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401d3c:	008d      	lsls	r5, r1, #2
  401d3e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  401d42:	6161      	str	r1, [r4, #20]
  401d44:	5951      	ldr	r1, [r2, r5]
  401d46:	4401      	add	r1, r0
  401d48:	5151      	str	r1, [r2, r5]
                    xReturn = pdTRUE;
  401d4a:	e7cf      	b.n	401cec <xTaskPriorityDisinherit+0x48>
        BaseType_t xReturn = pdFALSE;
  401d4c:	2000      	movs	r0, #0
    }
  401d4e:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
  401d50:	2000      	movs	r0, #0
  401d52:	e7cb      	b.n	401cec <xTaskPriorityDisinherit+0x48>
  401d54:	200005d4 	.word	0x200005d4
  401d58:	200004f4 	.word	0x200004f4
  401d5c:	20000570 	.word	0x20000570

00401d60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401d60:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401d62:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d64:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401d66:	4291      	cmp	r1, r2
  401d68:	d80c      	bhi.n	401d84 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d6a:	1ad2      	subs	r2, r2, r3
  401d6c:	6983      	ldr	r3, [r0, #24]
  401d6e:	429a      	cmp	r2, r3
  401d70:	d301      	bcc.n	401d76 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401d72:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
  401d74:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401d76:	1d01      	adds	r1, r0, #4
  401d78:	4b09      	ldr	r3, [pc, #36]	; (401da0 <prvInsertTimerInActiveList+0x40>)
  401d7a:	6818      	ldr	r0, [r3, #0]
  401d7c:	f7fe fec0 	bl	400b00 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
  401d80:	2000      	movs	r0, #0
  401d82:	e7f7      	b.n	401d74 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401d84:	429a      	cmp	r2, r3
  401d86:	d201      	bcs.n	401d8c <prvInsertTimerInActiveList+0x2c>
  401d88:	4299      	cmp	r1, r3
  401d8a:	d206      	bcs.n	401d9a <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d8c:	1d01      	adds	r1, r0, #4
  401d8e:	4b05      	ldr	r3, [pc, #20]	; (401da4 <prvInsertTimerInActiveList+0x44>)
  401d90:	6818      	ldr	r0, [r3, #0]
  401d92:	f7fe feb5 	bl	400b00 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
  401d96:	2000      	movs	r0, #0
  401d98:	e7ec      	b.n	401d74 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
  401d9a:	2001      	movs	r0, #1
        return xProcessTimerNow;
  401d9c:	e7ea      	b.n	401d74 <prvInsertTimerInActiveList+0x14>
  401d9e:	bf00      	nop
  401da0:	200005e4 	.word	0x200005e4
  401da4:	200005e8 	.word	0x200005e8

00401da8 <prvReloadTimer>:
    {
  401da8:	b570      	push	{r4, r5, r6, lr}
  401daa:	4604      	mov	r4, r0
  401dac:	460d      	mov	r5, r1
  401dae:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401db0:	e004      	b.n	401dbc <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401db2:	69a3      	ldr	r3, [r4, #24]
  401db4:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401db6:	6a23      	ldr	r3, [r4, #32]
  401db8:	4620      	mov	r0, r4
  401dba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401dbc:	69a1      	ldr	r1, [r4, #24]
  401dbe:	462b      	mov	r3, r5
  401dc0:	4632      	mov	r2, r6
  401dc2:	4429      	add	r1, r5
  401dc4:	4620      	mov	r0, r4
  401dc6:	f7ff ffcb 	bl	401d60 <prvInsertTimerInActiveList>
  401dca:	2800      	cmp	r0, #0
  401dcc:	d1f1      	bne.n	401db2 <prvReloadTimer+0xa>
    }
  401dce:	bd70      	pop	{r4, r5, r6, pc}

00401dd0 <prvProcessExpiredTimer>:
    {
  401dd0:	b570      	push	{r4, r5, r6, lr}
  401dd2:	4605      	mov	r5, r0
  401dd4:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401dd6:	4b0d      	ldr	r3, [pc, #52]	; (401e0c <prvProcessExpiredTimer+0x3c>)
  401dd8:	681b      	ldr	r3, [r3, #0]
  401dda:	68db      	ldr	r3, [r3, #12]
  401ddc:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401dde:	1d20      	adds	r0, r4, #4
  401de0:	f7fe fea7 	bl	400b32 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401de4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401de8:	f013 0f04 	tst.w	r3, #4
  401dec:	d107      	bne.n	401dfe <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401dee:	f023 0301 	bic.w	r3, r3, #1
  401df2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401df6:	6a23      	ldr	r3, [r4, #32]
  401df8:	4620      	mov	r0, r4
  401dfa:	4798      	blx	r3
    }
  401dfc:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401dfe:	4632      	mov	r2, r6
  401e00:	4629      	mov	r1, r5
  401e02:	4620      	mov	r0, r4
  401e04:	f7ff ffd0 	bl	401da8 <prvReloadTimer>
  401e08:	e7f5      	b.n	401df6 <prvProcessExpiredTimer+0x26>
  401e0a:	bf00      	nop
  401e0c:	200005e8 	.word	0x200005e8

00401e10 <prvSampleTimeNow>:
    {
  401e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e12:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
  401e14:	f7ff fbb0 	bl	401578 <xTaskGetTickCount>
  401e18:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401e1a:	4b10      	ldr	r3, [pc, #64]	; (401e5c <prvSampleTimeNow+0x4c>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	4283      	cmp	r3, r0
  401e20:	d805      	bhi.n	401e2e <prvSampleTimeNow+0x1e>
  401e22:	2300      	movs	r3, #0
            *pxTimerListsWereSwitched = pdTRUE;
  401e24:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
  401e26:	4b0d      	ldr	r3, [pc, #52]	; (401e5c <prvSampleTimeNow+0x4c>)
  401e28:	601c      	str	r4, [r3, #0]
    }
  401e2a:	4620      	mov	r0, r4
  401e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401e2e:	4b0c      	ldr	r3, [pc, #48]	; (401e60 <prvSampleTimeNow+0x50>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	681a      	ldr	r2, [r3, #0]
  401e34:	b15a      	cbz	r2, 401e4e <prvSampleTimeNow+0x3e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401e36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401e3a:	4e09      	ldr	r6, [pc, #36]	; (401e60 <prvSampleTimeNow+0x50>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e3c:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401e3e:	4639      	mov	r1, r7
  401e40:	6818      	ldr	r0, [r3, #0]
  401e42:	f7ff ffc5 	bl	401dd0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401e46:	6833      	ldr	r3, [r6, #0]
  401e48:	681a      	ldr	r2, [r3, #0]
  401e4a:	2a00      	cmp	r2, #0
  401e4c:	d1f6      	bne.n	401e3c <prvSampleTimeNow+0x2c>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401e4e:	4a05      	ldr	r2, [pc, #20]	; (401e64 <prvSampleTimeNow+0x54>)
  401e50:	6810      	ldr	r0, [r2, #0]
  401e52:	4903      	ldr	r1, [pc, #12]	; (401e60 <prvSampleTimeNow+0x50>)
  401e54:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401e56:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401e58:	2301      	movs	r3, #1
  401e5a:	e7e3      	b.n	401e24 <prvSampleTimeNow+0x14>
  401e5c:	200005d8 	.word	0x200005d8
  401e60:	200005e8 	.word	0x200005e8
  401e64:	200005e4 	.word	0x200005e4

00401e68 <prvTimerTask>:
    {
  401e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e6c:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401e6e:	4f5d      	ldr	r7, [pc, #372]	; (401fe4 <prvTimerTask+0x17c>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401e70:	4d5d      	ldr	r5, [pc, #372]	; (401fe8 <prvTimerTask+0x180>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401e72:	683b      	ldr	r3, [r7, #0]
  401e74:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401e76:	2e00      	cmp	r6, #0
  401e78:	f000 8090 	beq.w	401f9c <prvTimerTask+0x134>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e7c:	68db      	ldr	r3, [r3, #12]
  401e7e:	681e      	ldr	r6, [r3, #0]
        vTaskSuspendAll();
  401e80:	f7ff fb72 	bl	401568 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e84:	a802      	add	r0, sp, #8
  401e86:	f7ff ffc3 	bl	401e10 <prvSampleTimeNow>
  401e8a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e8c:	9a02      	ldr	r2, [sp, #8]
  401e8e:	b94a      	cbnz	r2, 401ea4 <prvTimerTask+0x3c>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401e90:	4286      	cmp	r6, r0
  401e92:	f200 8093 	bhi.w	401fbc <prvTimerTask+0x154>
                    ( void ) xTaskResumeAll();
  401e96:	f7ff fc67 	bl	401768 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e9a:	4621      	mov	r1, r4
  401e9c:	4630      	mov	r0, r6
  401e9e:	f7ff ff97 	bl	401dd0 <prvProcessExpiredTimer>
  401ea2:	e001      	b.n	401ea8 <prvTimerTask+0x40>
                ( void ) xTaskResumeAll();
  401ea4:	f7ff fc60 	bl	401768 <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401ea8:	2400      	movs	r4, #0
    }
  401eaa:	e006      	b.n	401eba <prvTimerTask+0x52>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401eac:	9905      	ldr	r1, [sp, #20]
  401eae:	9804      	ldr	r0, [sp, #16]
  401eb0:	9b03      	ldr	r3, [sp, #12]
  401eb2:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401eb4:	9b02      	ldr	r3, [sp, #8]
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	da09      	bge.n	401ece <prvTimerTask+0x66>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401eba:	4622      	mov	r2, r4
  401ebc:	a902      	add	r1, sp, #8
  401ebe:	6828      	ldr	r0, [r5, #0]
  401ec0:	f7ff f89c 	bl	400ffc <xQueueReceive>
  401ec4:	2800      	cmp	r0, #0
  401ec6:	d0d4      	beq.n	401e72 <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401ec8:	9b02      	ldr	r3, [sp, #8]
  401eca:	2b00      	cmp	r3, #0
  401ecc:	dbee      	blt.n	401eac <prvTimerTask+0x44>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401ece:	9e04      	ldr	r6, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401ed0:	6973      	ldr	r3, [r6, #20]
  401ed2:	b113      	cbz	r3, 401eda <prvTimerTask+0x72>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401ed4:	1d30      	adds	r0, r6, #4
  401ed6:	f7fe fe2c 	bl	400b32 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401eda:	a801      	add	r0, sp, #4
  401edc:	f7ff ff98 	bl	401e10 <prvSampleTimeNow>
  401ee0:	4680      	mov	r8, r0
                switch( xMessage.xMessageID )
  401ee2:	9b02      	ldr	r3, [sp, #8]
  401ee4:	3b01      	subs	r3, #1
  401ee6:	2b08      	cmp	r3, #8
  401ee8:	d8e7      	bhi.n	401eba <prvTimerTask+0x52>
  401eea:	e8df f003 	tbb	[pc, r3]
  401eee:	0505      	.short	0x0505
  401ef0:	05493029 	.word	0x05493029
  401ef4:	2905      	.short	0x2905
  401ef6:	30          	.byte	0x30
  401ef7:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401ef8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401efc:	f043 0301 	orr.w	r3, r3, #1
  401f00:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401f04:	9b03      	ldr	r3, [sp, #12]
  401f06:	69b1      	ldr	r1, [r6, #24]
  401f08:	4602      	mov	r2, r0
  401f0a:	4419      	add	r1, r3
  401f0c:	4630      	mov	r0, r6
  401f0e:	f7ff ff27 	bl	401d60 <prvInsertTimerInActiveList>
  401f12:	2800      	cmp	r0, #0
  401f14:	d0d1      	beq.n	401eba <prvTimerTask+0x52>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401f16:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401f1a:	f013 0f04 	tst.w	r3, #4
  401f1e:	d107      	bne.n	401f30 <prvTimerTask+0xc8>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f20:	f023 0301 	bic.w	r3, r3, #1
  401f24:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f28:	6a33      	ldr	r3, [r6, #32]
  401f2a:	4630      	mov	r0, r6
  401f2c:	4798      	blx	r3
  401f2e:	e7c4      	b.n	401eba <prvTimerTask+0x52>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  401f30:	69b3      	ldr	r3, [r6, #24]
  401f32:	4642      	mov	r2, r8
  401f34:	9903      	ldr	r1, [sp, #12]
  401f36:	4419      	add	r1, r3
  401f38:	4630      	mov	r0, r6
  401f3a:	f7ff ff35 	bl	401da8 <prvReloadTimer>
  401f3e:	e7f3      	b.n	401f28 <prvTimerTask+0xc0>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f40:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401f44:	f023 0301 	bic.w	r3, r3, #1
  401f48:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        break;
  401f4c:	e7b5      	b.n	401eba <prvTimerTask+0x52>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401f4e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401f52:	f043 0301 	orr.w	r3, r3, #1
  401f56:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401f5a:	9903      	ldr	r1, [sp, #12]
  401f5c:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f5e:	b131      	cbz	r1, 401f6e <prvTimerTask+0x106>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401f60:	4603      	mov	r3, r0
  401f62:	4602      	mov	r2, r0
  401f64:	4401      	add	r1, r0
  401f66:	4630      	mov	r0, r6
  401f68:	f7ff fefa 	bl	401d60 <prvInsertTimerInActiveList>
                        break;
  401f6c:	e7a5      	b.n	401eba <prvTimerTask+0x52>
  401f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  401f72:	f383 8811 	msr	BASEPRI, r3
  401f76:	f3bf 8f6f 	isb	sy
  401f7a:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f7e:	e7fe      	b.n	401f7e <prvTimerTask+0x116>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401f80:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  401f84:	f013 0f02 	tst.w	r3, #2
  401f88:	d004      	beq.n	401f94 <prvTimerTask+0x12c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f8a:	f023 0301 	bic.w	r3, r3, #1
  401f8e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  401f92:	e792      	b.n	401eba <prvTimerTask+0x52>
                                vPortFree( pxTimer );
  401f94:	4630      	mov	r0, r6
  401f96:	f000 fa93 	bl	4024c0 <vPortFree>
  401f9a:	e78e      	b.n	401eba <prvTimerTask+0x52>
        vTaskSuspendAll();
  401f9c:	f7ff fae4 	bl	401568 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fa0:	a802      	add	r0, sp, #8
  401fa2:	f7ff ff35 	bl	401e10 <prvSampleTimeNow>
  401fa6:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401fa8:	9b02      	ldr	r3, [sp, #8]
  401faa:	2b00      	cmp	r3, #0
  401fac:	f47f af7a 	bne.w	401ea4 <prvTimerTask+0x3c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401fb0:	4b0e      	ldr	r3, [pc, #56]	; (401fec <prvTimerTask+0x184>)
  401fb2:	681b      	ldr	r3, [r3, #0]
  401fb4:	681a      	ldr	r2, [r3, #0]
  401fb6:	fab2 f282 	clz	r2, r2
  401fba:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401fbc:	1b31      	subs	r1, r6, r4
  401fbe:	6828      	ldr	r0, [r5, #0]
  401fc0:	f7ff f8cc 	bl	40115c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
  401fc4:	f7ff fbd0 	bl	401768 <xTaskResumeAll>
  401fc8:	2800      	cmp	r0, #0
  401fca:	f47f af6d 	bne.w	401ea8 <prvTimerTask+0x40>
                        portYIELD_WITHIN_API();
  401fce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  401fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
  401fda:	f3bf 8f4f 	dsb	sy
  401fde:	f3bf 8f6f 	isb	sy
  401fe2:	e761      	b.n	401ea8 <prvTimerTask+0x40>
  401fe4:	200005e8 	.word	0x200005e8
  401fe8:	200005e0 	.word	0x200005e0
  401fec:	200005e4 	.word	0x200005e4

00401ff0 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  401ff0:	b538      	push	{r3, r4, r5, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  401ff2:	f000 f8a7 	bl	402144 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
  401ff6:	4b0d      	ldr	r3, [pc, #52]	; (40202c <prvCheckForValidListAndQueue+0x3c>)
  401ff8:	681b      	ldr	r3, [r3, #0]
  401ffa:	b113      	cbz	r3, 402002 <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  401ffc:	f000 f8c4 	bl	402188 <vPortExitCritical>
    }
  402000:	bd38      	pop	{r3, r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
  402002:	4d0b      	ldr	r5, [pc, #44]	; (402030 <prvCheckForValidListAndQueue+0x40>)
  402004:	4628      	mov	r0, r5
  402006:	f7fe fd6d 	bl	400ae4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
  40200a:	4c0a      	ldr	r4, [pc, #40]	; (402034 <prvCheckForValidListAndQueue+0x44>)
  40200c:	4620      	mov	r0, r4
  40200e:	f7fe fd69 	bl	400ae4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
  402012:	4b09      	ldr	r3, [pc, #36]	; (402038 <prvCheckForValidListAndQueue+0x48>)
  402014:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  402016:	4b09      	ldr	r3, [pc, #36]	; (40203c <prvCheckForValidListAndQueue+0x4c>)
  402018:	601c      	str	r4, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40201a:	2200      	movs	r2, #0
  40201c:	2110      	movs	r1, #16
  40201e:	2005      	movs	r0, #5
  402020:	f7fe fed4 	bl	400dcc <xQueueGenericCreate>
  402024:	4b01      	ldr	r3, [pc, #4]	; (40202c <prvCheckForValidListAndQueue+0x3c>)
  402026:	6018      	str	r0, [r3, #0]
  402028:	e7e8      	b.n	401ffc <prvCheckForValidListAndQueue+0xc>
  40202a:	bf00      	nop
  40202c:	200005e0 	.word	0x200005e0
  402030:	20000600 	.word	0x20000600
  402034:	200005ec 	.word	0x200005ec
  402038:	200005e8 	.word	0x200005e8
  40203c:	200005e4 	.word	0x200005e4

00402040 <xTimerCreateTimerTask>:
    {
  402040:	b500      	push	{lr}
  402042:	b083      	sub	sp, #12
        prvCheckForValidListAndQueue();
  402044:	f7ff ffd4 	bl	401ff0 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
  402048:	4b0d      	ldr	r3, [pc, #52]	; (402080 <xTimerCreateTimerTask+0x40>)
  40204a:	681b      	ldr	r3, [r3, #0]
  40204c:	b15b      	cbz	r3, 402066 <xTimerCreateTimerTask+0x26>
                xReturn = xTaskCreate( prvTimerTask,
  40204e:	4b0d      	ldr	r3, [pc, #52]	; (402084 <xTimerCreateTimerTask+0x44>)
  402050:	9301      	str	r3, [sp, #4]
  402052:	2302      	movs	r3, #2
  402054:	9300      	str	r3, [sp, #0]
  402056:	2300      	movs	r3, #0
  402058:	f44f 7282 	mov.w	r2, #260	; 0x104
  40205c:	490a      	ldr	r1, [pc, #40]	; (402088 <xTimerCreateTimerTask+0x48>)
  40205e:	480b      	ldr	r0, [pc, #44]	; (40208c <xTimerCreateTimerTask+0x4c>)
  402060:	f7ff f948 	bl	4012f4 <xTaskCreate>
        configASSERT( xReturn );
  402064:	b940      	cbnz	r0, 402078 <xTimerCreateTimerTask+0x38>
  402066:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40206a:	f383 8811 	msr	BASEPRI, r3
  40206e:	f3bf 8f6f 	isb	sy
  402072:	f3bf 8f4f 	dsb	sy
  402076:	e7fe      	b.n	402076 <xTimerCreateTimerTask+0x36>
    }
  402078:	b003      	add	sp, #12
  40207a:	f85d fb04 	ldr.w	pc, [sp], #4
  40207e:	bf00      	nop
  402080:	200005e0 	.word	0x200005e0
  402084:	200005dc 	.word	0x200005dc
  402088:	00402838 	.word	0x00402838
  40208c:	00401e69 	.word	0x00401e69

00402090 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  402090:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
  402092:	2300      	movs	r3, #0
  402094:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
  402096:	4b0d      	ldr	r3, [pc, #52]	; (4020cc <prvTaskExitError+0x3c>)
  402098:	681b      	ldr	r3, [r3, #0]
  40209a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  40209e:	d008      	beq.n	4020b2 <prvTaskExitError+0x22>
  4020a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4020a4:	f383 8811 	msr	BASEPRI, r3
  4020a8:	f3bf 8f6f 	isb	sy
  4020ac:	f3bf 8f4f 	dsb	sy
  4020b0:	e7fe      	b.n	4020b0 <prvTaskExitError+0x20>
  4020b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4020b6:	f383 8811 	msr	BASEPRI, r3
  4020ba:	f3bf 8f6f 	isb	sy
  4020be:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
  4020c2:	9b01      	ldr	r3, [sp, #4]
  4020c4:	2b00      	cmp	r3, #0
  4020c6:	d0fc      	beq.n	4020c2 <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
  4020c8:	b002      	add	sp, #8
  4020ca:	4770      	bx	lr
  4020cc:	20000008 	.word	0x20000008

004020d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
  4020d0:	4806      	ldr	r0, [pc, #24]	; (4020ec <prvPortStartFirstTask+0x1c>)
  4020d2:	6800      	ldr	r0, [r0, #0]
  4020d4:	6800      	ldr	r0, [r0, #0]
  4020d6:	f380 8808 	msr	MSP, r0
  4020da:	b662      	cpsie	i
  4020dc:	b661      	cpsie	f
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	f3bf 8f6f 	isb	sy
  4020e6:	df00      	svc	0
  4020e8:	bf00      	nop
  4020ea:	0000      	.short	0x0000
  4020ec:	e000ed08 	.word	0xe000ed08

004020f0 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  4020f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4020f4:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  4020f8:	f021 0101 	bic.w	r1, r1, #1
  4020fc:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  402100:	4b03      	ldr	r3, [pc, #12]	; (402110 <pxPortInitialiseStack+0x20>)
  402102:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
  402106:	f840 2c20 	str.w	r2, [r0, #-32]
}
  40210a:	3840      	subs	r0, #64	; 0x40
  40210c:	4770      	bx	lr
  40210e:	bf00      	nop
  402110:	00402091 	.word	0x00402091
	...

00402120 <SVC_Handler>:
    __asm volatile (
  402120:	4b07      	ldr	r3, [pc, #28]	; (402140 <pxCurrentTCBConst2>)
  402122:	6819      	ldr	r1, [r3, #0]
  402124:	6808      	ldr	r0, [r1, #0]
  402126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40212a:	f380 8809 	msr	PSP, r0
  40212e:	f3bf 8f6f 	isb	sy
  402132:	f04f 0000 	mov.w	r0, #0
  402136:	f380 8811 	msr	BASEPRI, r0
  40213a:	f04e 0e0d 	orr.w	lr, lr, #13
  40213e:	4770      	bx	lr

00402140 <pxCurrentTCBConst2>:
  402140:	200005d4 	.word	0x200005d4

00402144 <vPortEnterCritical>:
  402144:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402148:	f383 8811 	msr	BASEPRI, r3
  40214c:	f3bf 8f6f 	isb	sy
  402150:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
  402154:	4a0b      	ldr	r2, [pc, #44]	; (402184 <vPortEnterCritical+0x40>)
  402156:	6813      	ldr	r3, [r2, #0]
  402158:	3301      	adds	r3, #1
  40215a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
  40215c:	2b01      	cmp	r3, #1
  40215e:	d000      	beq.n	402162 <vPortEnterCritical+0x1e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
  402160:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402162:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  402166:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
  40216a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40216e:	d0f7      	beq.n	402160 <vPortEnterCritical+0x1c>
  402170:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402174:	f383 8811 	msr	BASEPRI, r3
  402178:	f3bf 8f6f 	isb	sy
  40217c:	f3bf 8f4f 	dsb	sy
  402180:	e7fe      	b.n	402180 <vPortEnterCritical+0x3c>
  402182:	bf00      	nop
  402184:	20000008 	.word	0x20000008

00402188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
  402188:	4b09      	ldr	r3, [pc, #36]	; (4021b0 <vPortExitCritical+0x28>)
  40218a:	681b      	ldr	r3, [r3, #0]
  40218c:	b943      	cbnz	r3, 4021a0 <vPortExitCritical+0x18>
  40218e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  402192:	f383 8811 	msr	BASEPRI, r3
  402196:	f3bf 8f6f 	isb	sy
  40219a:	f3bf 8f4f 	dsb	sy
  40219e:	e7fe      	b.n	40219e <vPortExitCritical+0x16>
    uxCriticalNesting--;
  4021a0:	3b01      	subs	r3, #1
  4021a2:	4a03      	ldr	r2, [pc, #12]	; (4021b0 <vPortExitCritical+0x28>)
  4021a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
  4021a6:	b90b      	cbnz	r3, 4021ac <vPortExitCritical+0x24>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  4021a8:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
  4021ac:	4770      	bx	lr
  4021ae:	bf00      	nop
  4021b0:	20000008 	.word	0x20000008
	...

004021c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
  4021c0:	f3ef 8009 	mrs	r0, PSP
  4021c4:	f3bf 8f6f 	isb	sy
  4021c8:	4b0d      	ldr	r3, [pc, #52]	; (402200 <pxCurrentTCBConst>)
  4021ca:	681a      	ldr	r2, [r3, #0]
  4021cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4021d0:	6010      	str	r0, [r2, #0]
  4021d2:	e92d 4008 	stmdb	sp!, {r3, lr}
  4021d6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4021da:	f380 8811 	msr	BASEPRI, r0
  4021de:	f7ff fbdf 	bl	4019a0 <vTaskSwitchContext>
  4021e2:	f04f 0000 	mov.w	r0, #0
  4021e6:	f380 8811 	msr	BASEPRI, r0
  4021ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4021ee:	6819      	ldr	r1, [r3, #0]
  4021f0:	6808      	ldr	r0, [r1, #0]
  4021f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4021f6:	f380 8809 	msr	PSP, r0
  4021fa:	f3bf 8f6f 	isb	sy
  4021fe:	4770      	bx	lr

00402200 <pxCurrentTCBConst>:
  402200:	200005d4 	.word	0x200005d4

00402204 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  402204:	b508      	push	{r3, lr}
        __asm volatile
  402206:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40220a:	f383 8811 	msr	BASEPRI, r3
  40220e:	f3bf 8f6f 	isb	sy
  402212:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
  402216:	f7ff f9bb 	bl	401590 <xTaskIncrementTick>
  40221a:	b128      	cbz	r0, 402228 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40221c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  402220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402224:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
  402228:	2300      	movs	r3, #0
  40222a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
  40222e:	bd08      	pop	{r3, pc}

00402230 <vPortSetupTimerInterrupt>:
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  402230:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  402234:	2300      	movs	r3, #0
  402236:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  402238:	6193      	str	r3, [r2, #24]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40223a:	4b05      	ldr	r3, [pc, #20]	; (402250 <vPortSetupTimerInterrupt+0x20>)
  40223c:	681b      	ldr	r3, [r3, #0]
  40223e:	4905      	ldr	r1, [pc, #20]	; (402254 <vPortSetupTimerInterrupt+0x24>)
  402240:	fba1 1303 	umull	r1, r3, r1, r3
  402244:	099b      	lsrs	r3, r3, #6
  402246:	3b01      	subs	r3, #1
  402248:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40224a:	2307      	movs	r3, #7
  40224c:	6113      	str	r3, [r2, #16]
}
  40224e:	4770      	bx	lr
  402250:	20000000 	.word	0x20000000
  402254:	10624dd3 	.word	0x10624dd3

00402258 <xPortStartScheduler>:
{
  402258:	b510      	push	{r4, lr}
  40225a:	b082      	sub	sp, #8
        ulOriginalPriority = *pucFirstUserPriorityRegister;
  40225c:	4b2c      	ldr	r3, [pc, #176]	; (402310 <xPortStartScheduler+0xb8>)
  40225e:	781a      	ldrb	r2, [r3, #0]
  402260:	b2d2      	uxtb	r2, r2
  402262:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402264:	22ff      	movs	r2, #255	; 0xff
  402266:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402268:	781b      	ldrb	r3, [r3, #0]
  40226a:	b2db      	uxtb	r3, r3
  40226c:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402270:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402274:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  402278:	4a26      	ldr	r2, [pc, #152]	; (402314 <xPortStartScheduler+0xbc>)
  40227a:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40227c:	4b26      	ldr	r3, [pc, #152]	; (402318 <xPortStartScheduler+0xc0>)
  40227e:	2207      	movs	r2, #7
  402280:	601a      	str	r2, [r3, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402282:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402286:	f013 0f80 	tst.w	r3, #128	; 0x80
  40228a:	d013      	beq.n	4022b4 <xPortStartScheduler+0x5c>
  40228c:	2206      	movs	r2, #6
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40228e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402292:	005b      	lsls	r3, r3, #1
  402294:	b2db      	uxtb	r3, r3
  402296:	f88d 3003 	strb.w	r3, [sp, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40229a:	f89d 1003 	ldrb.w	r1, [sp, #3]
  40229e:	4610      	mov	r0, r2
  4022a0:	3a01      	subs	r2, #1
  4022a2:	f011 0f80 	tst.w	r1, #128	; 0x80
  4022a6:	d1f2      	bne.n	40228e <xPortStartScheduler+0x36>
  4022a8:	4a1b      	ldr	r2, [pc, #108]	; (402318 <xPortStartScheduler+0xc0>)
  4022aa:	6010      	str	r0, [r2, #0]
  4022ac:	f88d 3003 	strb.w	r3, [sp, #3]
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  4022b0:	2803      	cmp	r0, #3
  4022b2:	d008      	beq.n	4022c6 <xPortStartScheduler+0x6e>
        __asm volatile
  4022b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4022b8:	f383 8811 	msr	BASEPRI, r3
  4022bc:	f3bf 8f6f 	isb	sy
  4022c0:	f3bf 8f4f 	dsb	sy
  4022c4:	e7fe      	b.n	4022c4 <xPortStartScheduler+0x6c>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4022c6:	4b14      	ldr	r3, [pc, #80]	; (402318 <xPortStartScheduler+0xc0>)
  4022c8:	f44f 7240 	mov.w	r2, #768	; 0x300
  4022cc:	601a      	str	r2, [r3, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
  4022ce:	9b01      	ldr	r3, [sp, #4]
  4022d0:	b2db      	uxtb	r3, r3
  4022d2:	4a0f      	ldr	r2, [pc, #60]	; (402310 <xPortStartScheduler+0xb8>)
  4022d4:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  4022d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  4022da:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
  4022de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4022e2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  4022e6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
  4022ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4022ee:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
  4022f2:	f7ff ff9d 	bl	402230 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
  4022f6:	2400      	movs	r4, #0
  4022f8:	4b08      	ldr	r3, [pc, #32]	; (40231c <xPortStartScheduler+0xc4>)
  4022fa:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
  4022fc:	f7ff fee8 	bl	4020d0 <prvPortStartFirstTask>
    vTaskSwitchContext();
  402300:	f7ff fb4e 	bl	4019a0 <vTaskSwitchContext>
    prvTaskExitError();
  402304:	f7ff fec4 	bl	402090 <prvTaskExitError>
}
  402308:	4620      	mov	r0, r4
  40230a:	b002      	add	sp, #8
  40230c:	bd10      	pop	{r4, pc}
  40230e:	bf00      	nop
  402310:	e000e400 	.word	0xe000e400
  402314:	20000618 	.word	0x20000618
  402318:	20000614 	.word	0x20000614
  40231c:	20000008 	.word	0x20000008

00402320 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
  402320:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  402322:	4b14      	ldr	r3, [pc, #80]	; (402374 <prvInsertBlockIntoFreeList+0x54>)
  402324:	461a      	mov	r2, r3
  402326:	681b      	ldr	r3, [r3, #0]
  402328:	4283      	cmp	r3, r0
  40232a:	d3fb      	bcc.n	402324 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40232c:	6854      	ldr	r4, [r2, #4]
  40232e:	1911      	adds	r1, r2, r4
  402330:	4288      	cmp	r0, r1
  402332:	d009      	beq.n	402348 <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  402334:	6844      	ldr	r4, [r0, #4]
  402336:	1901      	adds	r1, r0, r4
  402338:	428b      	cmp	r3, r1
  40233a:	d00f      	beq.n	40235c <prvInsertBlockIntoFreeList+0x3c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40233c:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  40233e:	4282      	cmp	r2, r0
  402340:	d000      	beq.n	402344 <prvInsertBlockIntoFreeList+0x24>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  402342:	6010      	str	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  402344:	bc10      	pop	{r4}
  402346:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  402348:	6841      	ldr	r1, [r0, #4]
  40234a:	4421      	add	r1, r4
  40234c:	6051      	str	r1, [r2, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40234e:	460c      	mov	r4, r1
  402350:	4411      	add	r1, r2
  402352:	428b      	cmp	r3, r1
  402354:	d001      	beq.n	40235a <prvInsertBlockIntoFreeList+0x3a>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  402356:	6013      	str	r3, [r2, #0]
    if( pxIterator != pxBlockToInsert )
  402358:	e7f4      	b.n	402344 <prvInsertBlockIntoFreeList+0x24>
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40235a:	4610      	mov	r0, r2
        if( pxIterator->pxNextFreeBlock != pxEnd )
  40235c:	4906      	ldr	r1, [pc, #24]	; (402378 <prvInsertBlockIntoFreeList+0x58>)
  40235e:	6809      	ldr	r1, [r1, #0]
  402360:	428b      	cmp	r3, r1
  402362:	d005      	beq.n	402370 <prvInsertBlockIntoFreeList+0x50>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  402364:	685b      	ldr	r3, [r3, #4]
  402366:	4423      	add	r3, r4
  402368:	6043      	str	r3, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  40236a:	6813      	ldr	r3, [r2, #0]
  40236c:	681b      	ldr	r3, [r3, #0]
  40236e:	e7e5      	b.n	40233c <prvInsertBlockIntoFreeList+0x1c>
  402370:	460b      	mov	r3, r1
  402372:	e7e3      	b.n	40233c <prvInsertBlockIntoFreeList+0x1c>
  402374:	20000630 	.word	0x20000630
  402378:	2000062c 	.word	0x2000062c

0040237c <pvPortMalloc>:
{
  40237c:	b570      	push	{r4, r5, r6, lr}
  40237e:	4604      	mov	r4, r0
    vTaskSuspendAll();
  402380:	f7ff f8f2 	bl	401568 <vTaskSuspendAll>
        if( pxEnd == NULL )
  402384:	4b48      	ldr	r3, [pc, #288]	; (4024a8 <pvPortMalloc+0x12c>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	b1a3      	cbz	r3, 4023b4 <pvPortMalloc+0x38>
        if( xWantedSize > 0 )
  40238a:	2c00      	cmp	r4, #0
  40238c:	d037      	beq.n	4023fe <pvPortMalloc+0x82>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
  40238e:	f004 0007 	and.w	r0, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
  402392:	f1a0 0311 	sub.w	r3, r0, #17
  402396:	42a3      	cmp	r3, r4
  402398:	d331      	bcc.n	4023fe <pvPortMalloc+0x82>
  40239a:	f104 0c10 	add.w	ip, r4, #16
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
  40239e:	ebbc 0100 	subs.w	r1, ip, r0
  4023a2:	d429      	bmi.n	4023f8 <pvPortMalloc+0x7c>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4023a4:	b359      	cbz	r1, 4023fe <pvPortMalloc+0x82>
  4023a6:	4b41      	ldr	r3, [pc, #260]	; (4024ac <pvPortMalloc+0x130>)
  4023a8:	681d      	ldr	r5, [r3, #0]
  4023aa:	428d      	cmp	r5, r1
  4023ac:	d32e      	bcc.n	40240c <pvPortMalloc+0x90>
                pxBlock = xStart.pxNextFreeBlock;
  4023ae:	4a40      	ldr	r2, [pc, #256]	; (4024b0 <pvPortMalloc+0x134>)
  4023b0:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4023b2:	e030      	b.n	402416 <pvPortMalloc+0x9a>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
  4023b4:	4a3f      	ldr	r2, [pc, #252]	; (4024b4 <pvPortMalloc+0x138>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4023b6:	f012 0f07 	tst.w	r2, #7
  4023ba:	d01a      	beq.n	4023f2 <pvPortMalloc+0x76>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
  4023bc:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  4023be:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
  4023c2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
  4023c6:	1a53      	subs	r3, r2, r1
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  4023c8:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  4023ca:	4839      	ldr	r0, [pc, #228]	; (4024b0 <pvPortMalloc+0x134>)
  4023cc:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
  4023ce:	2100      	movs	r1, #0
  4023d0:	6041      	str	r1, [r0, #4]
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
  4023d2:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
  4023d4:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  4023d6:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( BlockLink_t * ) uxAddress;
  4023da:	4833      	ldr	r0, [pc, #204]	; (4024a8 <pvPortMalloc+0x12c>)
  4023dc:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
  4023de:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
  4023e0:	6019      	str	r1, [r3, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
  4023e2:	1a99      	subs	r1, r3, r2
  4023e4:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4023e6:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  4023e8:	4b33      	ldr	r3, [pc, #204]	; (4024b8 <pvPortMalloc+0x13c>)
  4023ea:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  4023ec:	4b2f      	ldr	r3, [pc, #188]	; (4024ac <pvPortMalloc+0x130>)
  4023ee:	6019      	str	r1, [r3, #0]
}
  4023f0:	e7cb      	b.n	40238a <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  4023f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  4023f6:	e7e8      	b.n	4023ca <pvPortMalloc+0x4e>
    ( void ) xTaskResumeAll();
  4023f8:	f7ff f9b6 	bl	401768 <xTaskResumeAll>
        if( pvReturn == NULL )
  4023fc:	e001      	b.n	402402 <pvPortMalloc+0x86>
    ( void ) xTaskResumeAll();
  4023fe:	f7ff f9b3 	bl	401768 <xTaskResumeAll>
            vApplicationMallocFailedHook();
  402402:	f7fd fe9b 	bl	40013c <vApplicationMallocFailedHook>
  402406:	2600      	movs	r6, #0
}
  402408:	4630      	mov	r0, r6
  40240a:	bd70      	pop	{r4, r5, r6, pc}
    ( void ) xTaskResumeAll();
  40240c:	f7ff f9ac 	bl	401768 <xTaskResumeAll>
        if( pvReturn == NULL )
  402410:	e7f7      	b.n	402402 <pvPortMalloc+0x86>
  402412:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  402414:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  402416:	6863      	ldr	r3, [r4, #4]
  402418:	428b      	cmp	r3, r1
  40241a:	d202      	bcs.n	402422 <pvPortMalloc+0xa6>
  40241c:	6823      	ldr	r3, [r4, #0]
  40241e:	2b00      	cmp	r3, #0
  402420:	d1f7      	bne.n	402412 <pvPortMalloc+0x96>
                if( pxBlock != pxEnd )
  402422:	4b21      	ldr	r3, [pc, #132]	; (4024a8 <pvPortMalloc+0x12c>)
  402424:	681b      	ldr	r3, [r3, #0]
  402426:	42a3      	cmp	r3, r4
  402428:	d016      	beq.n	402458 <pvPortMalloc+0xdc>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40242a:	6816      	ldr	r6, [r2, #0]
  40242c:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40242e:	6823      	ldr	r3, [r4, #0]
  402430:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  402432:	eba0 030c 	sub.w	r3, r0, ip
  402436:	6862      	ldr	r2, [r4, #4]
  402438:	4413      	add	r3, r2
  40243a:	2b10      	cmp	r3, #16
  40243c:	d913      	bls.n	402466 <pvPortMalloc+0xea>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40243e:	1860      	adds	r0, r4, r1
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  402440:	f010 0f07 	tst.w	r0, #7
  402444:	d00b      	beq.n	40245e <pvPortMalloc+0xe2>
  402446:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40244a:	f383 8811 	msr	BASEPRI, r3
  40244e:	f3bf 8f6f 	isb	sy
  402452:	f3bf 8f4f 	dsb	sy
  402456:	e7fe      	b.n	402456 <pvPortMalloc+0xda>
    ( void ) xTaskResumeAll();
  402458:	f7ff f986 	bl	401768 <xTaskResumeAll>
        if( pvReturn == NULL )
  40245c:	e7d1      	b.n	402402 <pvPortMalloc+0x86>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40245e:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  402460:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
  402462:	f7ff ff5d 	bl	402320 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  402466:	6863      	ldr	r3, [r4, #4]
  402468:	1aed      	subs	r5, r5, r3
  40246a:	4a10      	ldr	r2, [pc, #64]	; (4024ac <pvPortMalloc+0x130>)
  40246c:	6015      	str	r5, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  40246e:	4a12      	ldr	r2, [pc, #72]	; (4024b8 <pvPortMalloc+0x13c>)
  402470:	6812      	ldr	r2, [r2, #0]
  402472:	4295      	cmp	r5, r2
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  402474:	bf3c      	itt	cc
  402476:	4a10      	ldrcc	r2, [pc, #64]	; (4024b8 <pvPortMalloc+0x13c>)
  402478:	6015      	strcc	r5, [r2, #0]
                    heapALLOCATE_BLOCK( pxBlock );
  40247a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40247e:	6063      	str	r3, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  402480:	2300      	movs	r3, #0
  402482:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  402484:	4a0d      	ldr	r2, [pc, #52]	; (4024bc <pvPortMalloc+0x140>)
  402486:	6813      	ldr	r3, [r2, #0]
  402488:	3301      	adds	r3, #1
  40248a:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  40248c:	f7ff f96c 	bl	401768 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
  402490:	f016 0f07 	tst.w	r6, #7
  402494:	d0b8      	beq.n	402408 <pvPortMalloc+0x8c>
  402496:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  40249a:	f383 8811 	msr	BASEPRI, r3
  40249e:	f3bf 8f6f 	isb	sy
  4024a2:	f3bf 8f4f 	dsb	sy
  4024a6:	e7fe      	b.n	4024a6 <pvPortMalloc+0x12a>
  4024a8:	2000062c 	.word	0x2000062c
  4024ac:	20000628 	.word	0x20000628
  4024b0:	20000630 	.word	0x20000630
  4024b4:	20000638 	.word	0x20000638
  4024b8:	20000624 	.word	0x20000624
  4024bc:	20000620 	.word	0x20000620

004024c0 <vPortFree>:
    if( pv != NULL )
  4024c0:	b388      	cbz	r0, 402526 <vPortFree+0x66>
{
  4024c2:	b510      	push	{r4, lr}
  4024c4:	4604      	mov	r4, r0
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
  4024c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4024ca:	2b00      	cmp	r3, #0
  4024cc:	db08      	blt.n	4024e0 <vPortFree+0x20>
  4024ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4024d2:	f383 8811 	msr	BASEPRI, r3
  4024d6:	f3bf 8f6f 	isb	sy
  4024da:	f3bf 8f4f 	dsb	sy
  4024de:	e7fe      	b.n	4024de <vPortFree+0x1e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4024e0:	f850 2c08 	ldr.w	r2, [r0, #-8]
  4024e4:	b142      	cbz	r2, 4024f8 <vPortFree+0x38>
  4024e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
  4024ea:	f383 8811 	msr	BASEPRI, r3
  4024ee:	f3bf 8f6f 	isb	sy
  4024f2:	f3bf 8f4f 	dsb	sy
  4024f6:	e7fe      	b.n	4024f6 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
  4024f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  4024fc:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
  402500:	f7ff f832 	bl	401568 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
  402504:	4a08      	ldr	r2, [pc, #32]	; (402528 <vPortFree+0x68>)
  402506:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40250a:	6811      	ldr	r1, [r2, #0]
  40250c:	440b      	add	r3, r1
  40250e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  402510:	f1a4 0008 	sub.w	r0, r4, #8
  402514:	f7ff ff04 	bl	402320 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
  402518:	4a04      	ldr	r2, [pc, #16]	; (40252c <vPortFree+0x6c>)
  40251a:	6813      	ldr	r3, [r2, #0]
  40251c:	3301      	adds	r3, #1
  40251e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  402520:	f7ff f922 	bl	401768 <xTaskResumeAll>
}
  402524:	bd10      	pop	{r4, pc}
  402526:	4770      	bx	lr
  402528:	20000628 	.word	0x20000628
  40252c:	2000061c 	.word	0x2000061c

00402530 <atexit>:
  402530:	2300      	movs	r3, #0
  402532:	4601      	mov	r1, r0
  402534:	461a      	mov	r2, r3
  402536:	4618      	mov	r0, r3
  402538:	f000 b926 	b.w	402788 <__register_exitproc>

0040253c <__libc_fini_array>:
  40253c:	b538      	push	{r3, r4, r5, lr}
  40253e:	4d08      	ldr	r5, [pc, #32]	; (402560 <__libc_fini_array+0x24>)
  402540:	4b08      	ldr	r3, [pc, #32]	; (402564 <__libc_fini_array+0x28>)
  402542:	1aed      	subs	r5, r5, r3
  402544:	10ac      	asrs	r4, r5, #2
  402546:	d007      	beq.n	402558 <__libc_fini_array+0x1c>
  402548:	3d04      	subs	r5, #4
  40254a:	441d      	add	r5, r3
  40254c:	3c01      	subs	r4, #1
  40254e:	f855 3904 	ldr.w	r3, [r5], #-4
  402552:	4798      	blx	r3
  402554:	2c00      	cmp	r4, #0
  402556:	d1f9      	bne.n	40254c <__libc_fini_array+0x10>
  402558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40255c:	f000 b97c 	b.w	402858 <_fini>
  402560:	00402868 	.word	0x00402868
  402564:	00402864 	.word	0x00402864

00402568 <__libc_init_array>:
  402568:	b570      	push	{r4, r5, r6, lr}
  40256a:	4e0d      	ldr	r6, [pc, #52]	; (4025a0 <__libc_init_array+0x38>)
  40256c:	4d0d      	ldr	r5, [pc, #52]	; (4025a4 <__libc_init_array+0x3c>)
  40256e:	1b76      	subs	r6, r6, r5
  402570:	10b6      	asrs	r6, r6, #2
  402572:	d006      	beq.n	402582 <__libc_init_array+0x1a>
  402574:	2400      	movs	r4, #0
  402576:	f855 3b04 	ldr.w	r3, [r5], #4
  40257a:	3401      	adds	r4, #1
  40257c:	4798      	blx	r3
  40257e:	42a6      	cmp	r6, r4
  402580:	d1f9      	bne.n	402576 <__libc_init_array+0xe>
  402582:	4e09      	ldr	r6, [pc, #36]	; (4025a8 <__libc_init_array+0x40>)
  402584:	4d09      	ldr	r5, [pc, #36]	; (4025ac <__libc_init_array+0x44>)
  402586:	1b76      	subs	r6, r6, r5
  402588:	f000 f95c 	bl	402844 <_init>
  40258c:	10b6      	asrs	r6, r6, #2
  40258e:	d006      	beq.n	40259e <__libc_init_array+0x36>
  402590:	2400      	movs	r4, #0
  402592:	f855 3b04 	ldr.w	r3, [r5], #4
  402596:	3401      	adds	r4, #1
  402598:	4798      	blx	r3
  40259a:	42a6      	cmp	r6, r4
  40259c:	d1f9      	bne.n	402592 <__libc_init_array+0x2a>
  40259e:	bd70      	pop	{r4, r5, r6, pc}
  4025a0:	00402850 	.word	0x00402850
  4025a4:	00402850 	.word	0x00402850
  4025a8:	00402858 	.word	0x00402858
  4025ac:	00402850 	.word	0x00402850

004025b0 <memcpy>:
  4025b0:	4684      	mov	ip, r0
  4025b2:	ea41 0300 	orr.w	r3, r1, r0
  4025b6:	f013 0303 	ands.w	r3, r3, #3
  4025ba:	d16d      	bne.n	402698 <memcpy+0xe8>
  4025bc:	3a40      	subs	r2, #64	; 0x40
  4025be:	d341      	bcc.n	402644 <memcpy+0x94>
  4025c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025c4:	f840 3b04 	str.w	r3, [r0], #4
  4025c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025cc:	f840 3b04 	str.w	r3, [r0], #4
  4025d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025d4:	f840 3b04 	str.w	r3, [r0], #4
  4025d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025dc:	f840 3b04 	str.w	r3, [r0], #4
  4025e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025e4:	f840 3b04 	str.w	r3, [r0], #4
  4025e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025ec:	f840 3b04 	str.w	r3, [r0], #4
  4025f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025f4:	f840 3b04 	str.w	r3, [r0], #4
  4025f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025fc:	f840 3b04 	str.w	r3, [r0], #4
  402600:	f851 3b04 	ldr.w	r3, [r1], #4
  402604:	f840 3b04 	str.w	r3, [r0], #4
  402608:	f851 3b04 	ldr.w	r3, [r1], #4
  40260c:	f840 3b04 	str.w	r3, [r0], #4
  402610:	f851 3b04 	ldr.w	r3, [r1], #4
  402614:	f840 3b04 	str.w	r3, [r0], #4
  402618:	f851 3b04 	ldr.w	r3, [r1], #4
  40261c:	f840 3b04 	str.w	r3, [r0], #4
  402620:	f851 3b04 	ldr.w	r3, [r1], #4
  402624:	f840 3b04 	str.w	r3, [r0], #4
  402628:	f851 3b04 	ldr.w	r3, [r1], #4
  40262c:	f840 3b04 	str.w	r3, [r0], #4
  402630:	f851 3b04 	ldr.w	r3, [r1], #4
  402634:	f840 3b04 	str.w	r3, [r0], #4
  402638:	f851 3b04 	ldr.w	r3, [r1], #4
  40263c:	f840 3b04 	str.w	r3, [r0], #4
  402640:	3a40      	subs	r2, #64	; 0x40
  402642:	d2bd      	bcs.n	4025c0 <memcpy+0x10>
  402644:	3230      	adds	r2, #48	; 0x30
  402646:	d311      	bcc.n	40266c <memcpy+0xbc>
  402648:	f851 3b04 	ldr.w	r3, [r1], #4
  40264c:	f840 3b04 	str.w	r3, [r0], #4
  402650:	f851 3b04 	ldr.w	r3, [r1], #4
  402654:	f840 3b04 	str.w	r3, [r0], #4
  402658:	f851 3b04 	ldr.w	r3, [r1], #4
  40265c:	f840 3b04 	str.w	r3, [r0], #4
  402660:	f851 3b04 	ldr.w	r3, [r1], #4
  402664:	f840 3b04 	str.w	r3, [r0], #4
  402668:	3a10      	subs	r2, #16
  40266a:	d2ed      	bcs.n	402648 <memcpy+0x98>
  40266c:	320c      	adds	r2, #12
  40266e:	d305      	bcc.n	40267c <memcpy+0xcc>
  402670:	f851 3b04 	ldr.w	r3, [r1], #4
  402674:	f840 3b04 	str.w	r3, [r0], #4
  402678:	3a04      	subs	r2, #4
  40267a:	d2f9      	bcs.n	402670 <memcpy+0xc0>
  40267c:	3204      	adds	r2, #4
  40267e:	d008      	beq.n	402692 <memcpy+0xe2>
  402680:	07d2      	lsls	r2, r2, #31
  402682:	bf1c      	itt	ne
  402684:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402688:	f800 3b01 	strbne.w	r3, [r0], #1
  40268c:	d301      	bcc.n	402692 <memcpy+0xe2>
  40268e:	880b      	ldrh	r3, [r1, #0]
  402690:	8003      	strh	r3, [r0, #0]
  402692:	4660      	mov	r0, ip
  402694:	4770      	bx	lr
  402696:	bf00      	nop
  402698:	2a08      	cmp	r2, #8
  40269a:	d313      	bcc.n	4026c4 <memcpy+0x114>
  40269c:	078b      	lsls	r3, r1, #30
  40269e:	d08d      	beq.n	4025bc <memcpy+0xc>
  4026a0:	f010 0303 	ands.w	r3, r0, #3
  4026a4:	d08a      	beq.n	4025bc <memcpy+0xc>
  4026a6:	f1c3 0304 	rsb	r3, r3, #4
  4026aa:	1ad2      	subs	r2, r2, r3
  4026ac:	07db      	lsls	r3, r3, #31
  4026ae:	bf1c      	itt	ne
  4026b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4026b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4026b8:	d380      	bcc.n	4025bc <memcpy+0xc>
  4026ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4026be:	f820 3b02 	strh.w	r3, [r0], #2
  4026c2:	e77b      	b.n	4025bc <memcpy+0xc>
  4026c4:	3a04      	subs	r2, #4
  4026c6:	d3d9      	bcc.n	40267c <memcpy+0xcc>
  4026c8:	3a01      	subs	r2, #1
  4026ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4026ce:	f800 3b01 	strb.w	r3, [r0], #1
  4026d2:	d2f9      	bcs.n	4026c8 <memcpy+0x118>
  4026d4:	780b      	ldrb	r3, [r1, #0]
  4026d6:	7003      	strb	r3, [r0, #0]
  4026d8:	784b      	ldrb	r3, [r1, #1]
  4026da:	7043      	strb	r3, [r0, #1]
  4026dc:	788b      	ldrb	r3, [r1, #2]
  4026de:	7083      	strb	r3, [r0, #2]
  4026e0:	4660      	mov	r0, ip
  4026e2:	4770      	bx	lr

004026e4 <memset>:
  4026e4:	0783      	lsls	r3, r0, #30
  4026e6:	b530      	push	{r4, r5, lr}
  4026e8:	d048      	beq.n	40277c <memset+0x98>
  4026ea:	1e54      	subs	r4, r2, #1
  4026ec:	2a00      	cmp	r2, #0
  4026ee:	d03f      	beq.n	402770 <memset+0x8c>
  4026f0:	b2ca      	uxtb	r2, r1
  4026f2:	4603      	mov	r3, r0
  4026f4:	e001      	b.n	4026fa <memset+0x16>
  4026f6:	3c01      	subs	r4, #1
  4026f8:	d33a      	bcc.n	402770 <memset+0x8c>
  4026fa:	f803 2b01 	strb.w	r2, [r3], #1
  4026fe:	079d      	lsls	r5, r3, #30
  402700:	d1f9      	bne.n	4026f6 <memset+0x12>
  402702:	2c03      	cmp	r4, #3
  402704:	d92d      	bls.n	402762 <memset+0x7e>
  402706:	b2cd      	uxtb	r5, r1
  402708:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40270c:	2c0f      	cmp	r4, #15
  40270e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402712:	d936      	bls.n	402782 <memset+0x9e>
  402714:	f1a4 0210 	sub.w	r2, r4, #16
  402718:	f022 0c0f 	bic.w	ip, r2, #15
  40271c:	f103 0e20 	add.w	lr, r3, #32
  402720:	44e6      	add	lr, ip
  402722:	ea4f 1c12 	mov.w	ip, r2, lsr #4
  402726:	f103 0210 	add.w	r2, r3, #16
  40272a:	e942 5504 	strd	r5, r5, [r2, #-16]
  40272e:	e942 5502 	strd	r5, r5, [r2, #-8]
  402732:	3210      	adds	r2, #16
  402734:	4572      	cmp	r2, lr
  402736:	d1f8      	bne.n	40272a <memset+0x46>
  402738:	f10c 0201 	add.w	r2, ip, #1
  40273c:	f014 0f0c 	tst.w	r4, #12
  402740:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  402744:	f004 0c0f 	and.w	ip, r4, #15
  402748:	d013      	beq.n	402772 <memset+0x8e>
  40274a:	f1ac 0304 	sub.w	r3, ip, #4
  40274e:	f023 0303 	bic.w	r3, r3, #3
  402752:	3304      	adds	r3, #4
  402754:	4413      	add	r3, r2
  402756:	f842 5b04 	str.w	r5, [r2], #4
  40275a:	4293      	cmp	r3, r2
  40275c:	d1fb      	bne.n	402756 <memset+0x72>
  40275e:	f00c 0403 	and.w	r4, ip, #3
  402762:	b12c      	cbz	r4, 402770 <memset+0x8c>
  402764:	b2c9      	uxtb	r1, r1
  402766:	441c      	add	r4, r3
  402768:	f803 1b01 	strb.w	r1, [r3], #1
  40276c:	429c      	cmp	r4, r3
  40276e:	d1fb      	bne.n	402768 <memset+0x84>
  402770:	bd30      	pop	{r4, r5, pc}
  402772:	4664      	mov	r4, ip
  402774:	4613      	mov	r3, r2
  402776:	2c00      	cmp	r4, #0
  402778:	d1f4      	bne.n	402764 <memset+0x80>
  40277a:	e7f9      	b.n	402770 <memset+0x8c>
  40277c:	4603      	mov	r3, r0
  40277e:	4614      	mov	r4, r2
  402780:	e7bf      	b.n	402702 <memset+0x1e>
  402782:	461a      	mov	r2, r3
  402784:	46a4      	mov	ip, r4
  402786:	e7e0      	b.n	40274a <memset+0x66>

00402788 <__register_exitproc>:
  402788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40278c:	4d1d      	ldr	r5, [pc, #116]	; (402804 <__register_exitproc+0x7c>)
  40278e:	4606      	mov	r6, r0
  402790:	6828      	ldr	r0, [r5, #0]
  402792:	4698      	mov	r8, r3
  402794:	460f      	mov	r7, r1
  402796:	4691      	mov	r9, r2
  402798:	f000 f842 	bl	402820 <__retarget_lock_acquire_recursive>
  40279c:	4b1a      	ldr	r3, [pc, #104]	; (402808 <__register_exitproc+0x80>)
  40279e:	681b      	ldr	r3, [r3, #0]
  4027a0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
  4027a4:	b31c      	cbz	r4, 4027ee <__register_exitproc+0x66>
  4027a6:	6828      	ldr	r0, [r5, #0]
  4027a8:	6865      	ldr	r5, [r4, #4]
  4027aa:	2d1f      	cmp	r5, #31
  4027ac:	dc24      	bgt.n	4027f8 <__register_exitproc+0x70>
  4027ae:	b94e      	cbnz	r6, 4027c4 <__register_exitproc+0x3c>
  4027b0:	1c6b      	adds	r3, r5, #1
  4027b2:	3502      	adds	r5, #2
  4027b4:	6063      	str	r3, [r4, #4]
  4027b6:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
  4027ba:	f000 f833 	bl	402824 <__retarget_lock_release_recursive>
  4027be:	2000      	movs	r0, #0
  4027c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027c4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
  4027c8:	2301      	movs	r3, #1
  4027ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4027ce:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
  4027d2:	40ab      	lsls	r3, r5
  4027d4:	431a      	orrs	r2, r3
  4027d6:	2e02      	cmp	r6, #2
  4027d8:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
  4027dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4027e0:	d1e6      	bne.n	4027b0 <__register_exitproc+0x28>
  4027e2:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
  4027e6:	431a      	orrs	r2, r3
  4027e8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4027ec:	e7e0      	b.n	4027b0 <__register_exitproc+0x28>
  4027ee:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
  4027f2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
  4027f6:	e7d6      	b.n	4027a6 <__register_exitproc+0x1e>
  4027f8:	f000 f814 	bl	402824 <__retarget_lock_release_recursive>
  4027fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402800:	e7de      	b.n	4027c0 <__register_exitproc+0x38>
  402802:	bf00      	nop
  402804:	20000438 	.word	0x20000438
  402808:	00402840 	.word	0x00402840

0040280c <register_fini>:
  40280c:	4b02      	ldr	r3, [pc, #8]	; (402818 <register_fini+0xc>)
  40280e:	b113      	cbz	r3, 402816 <register_fini+0xa>
  402810:	4802      	ldr	r0, [pc, #8]	; (40281c <register_fini+0x10>)
  402812:	f7ff be8d 	b.w	402530 <atexit>
  402816:	4770      	bx	lr
  402818:	00000000 	.word	0x00000000
  40281c:	0040253d 	.word	0x0040253d

00402820 <__retarget_lock_acquire_recursive>:
  402820:	4770      	bx	lr
  402822:	bf00      	nop

00402824 <__retarget_lock_release_recursive>:
  402824:	4770      	bx	lr
  402826:	bf00      	nop
  402828:	00007852 	.word	0x00007852
  40282c:	00005854 	.word	0x00005854
  402830:	454c4449 	.word	0x454c4449
  402834:	00000000 	.word	0x00000000
  402838:	20726d54 	.word	0x20726d54
  40283c:	00637653 	.word	0x00637653

00402840 <_global_impure_ptr>:
  402840:	20000010                                ... 

00402844 <_init>:
  402844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402846:	bf00      	nop
  402848:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40284a:	bc08      	pop	{r3}
  40284c:	469e      	mov	lr, r3
  40284e:	4770      	bx	lr

00402850 <__init_array_start>:
  402850:	0040280d 	.word	0x0040280d

00402854 <__frame_dummy_init_array_entry>:
  402854:	004000f1                                ..@.

00402858 <_fini>:
  402858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40285a:	bf00      	nop
  40285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40285e:	bc08      	pop	{r3}
  402860:	469e      	mov	lr, r3
  402862:	4770      	bx	lr

00402864 <__do_global_dtors_aux_fini_array_entry>:
  402864:	00cd 0040                                   ..@.
